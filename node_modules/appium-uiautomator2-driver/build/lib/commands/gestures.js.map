{"version":3,"file":"gestures.js","names":["commands","toOrigin","element","util","wrapElement","unwrapElement","undefined","toPoint","x","y","_","isFinite","toRect","left","top","width","height","some","v","mobileClickGesture","opts","elementId","uiautomator2","jwproxy","command","origin","offset","mobileLongClickGesture","duration","mobileDoubleClickGesture","mobileDragGesture","startX","startY","endX","endY","speed","start","end","mobileFlingGesture","direction","area","mobilePinchCloseGesture","percent","mobilePinchOpenGesture","mobileSwipeGesture","mobileScrollGesture","mobileScrollBackTo","elementToId","errors","InvalidArgumentError","mobileScroll","strategy","selector","maxSwipes","params"],"sources":["../../../lib/commands/gestures.js"],"sourcesContent":["import { util } from 'appium/support';\nimport _ from 'lodash';\nimport { errors } from 'appium/driver';\n\nconst commands = {};\n\n\nfunction toOrigin (element) {\n  return element ? util.wrapElement(util.unwrapElement(element)) : undefined;\n}\n\nfunction toPoint (x, y) {\n  return _.isFinite(x) && _.isFinite(y) ? {x, y} : undefined;\n}\n\nfunction toRect (left, top, width, height) {\n  return [left, top, width, height].some((v) => !_.isFinite(v))\n    ? undefined\n    : {left, top, width, height};\n}\n\n/**\n * @typedef {Object} ClickOptions\n * @property {?string} elementId - The id of the element to be clicked.\n * If the element is missing then both click offset coordinates must be provided.\n * If both the element id and offset are provided then the coordinates\n * are parsed as relative offsets from the top left corner of the element.\n * @property {?number} x - The x coordinate to click on\n * @property {?number} y - The y coordinate to click on\n */\n\n/**\n * Performs a simple click/tap gesture\n *\n * @param {?ClickOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileClickGesture = async function mobileClickGesture (opts = {}) {\n  const {\n    elementId,\n    x, y,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/click', 'POST', {\n    origin: toOrigin(elementId),\n    offset: toPoint(x, y),\n  });\n};\n\n/**\n * @typedef {Object} LongClickOptions\n * @property {?string} elementId - The id of the element to be clicked.\n * If the element is missing then both click offset coordinates must be provided.\n * If both the element id and offset are provided then the coordinates\n * are parsed as relative offsets from the top left corner of the element.\n * @property {?number} x - The x coordinate to click on\n * @property {?number} y - The y coordinate to click on\n * @property {?number} duration [500] - Click duration in milliseconds.\n * The value must not be negative\n */\n\n/**\n * Performs a click that lasts for the given duration\n *\n * @param {?LongClickOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileLongClickGesture = async function mobileLongClickGesture (opts = {}) {\n  const {\n    elementId,\n    x, y,\n    duration,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/long_click', 'POST', {\n    origin: toOrigin(elementId),\n    offset: toPoint(x, y),\n    duration,\n  });\n};\n\n/**\n * @typedef {Object} DoubleClickOptions\n * @property {?string} elementId - The id of the element to be double clicked.\n * If the element is missing then both click offset coordinates must be provided.\n * If both the element id and offset are provided then the coordinates\n * are parsed as relative offsets from the top left corner of the element.\n * @property {?number} x - The x coordinate to double click on\n * @property {?number} y - The y coordinate to double click on\n */\n\n/**\n * Performs a click that lasts for the given duration\n *\n * @param {?DoubleClickOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileDoubleClickGesture = async function mobileDoubleClickGesture (opts = {}) {\n  const {\n    elementId,\n    x, y,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/double_click', 'POST', {\n    origin: toOrigin(elementId),\n    offset: toPoint(x, y),\n  });\n};\n\n/**\n * @typedef {Object} DragOptions\n * @property {?string} elementId - The id of the element to be dragged.\n * If the element id is missing then the start coordinates must be provided.\n * If both the element id and the start coordinates are provided then these\n * coordinates are considered as offsets from the top left element corner.\n * @property {?number} startX - The x coordinate where the dragging starts\n * @property {?number} startY - The y coordinate where the dragging starts\n * @property {!number} endX - The x coordinate where the dragging ends\n * @property {!number} endY - The y coordinate where the dragging ends\n * @property {?number} speed [2500 * displayDensity] - The speed at which to perform\n * this gesture in pixels per second. The value must not be negative\n */\n\n/**\n * Drags this object to the specified location.\n *\n * @param {?DragOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileDragGesture = async function mobileDragGesture (opts = {}) {\n  const {\n    elementId,\n    startX, startY,\n    endX, endY,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/drag', 'POST', {\n    origin: toOrigin(elementId),\n    start: toPoint(startX, startY),\n    end: toPoint(endX, endY),\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} FlingOptions\n * @property {?string} elementId - The id of the element to be flinged.\n * If the element id is missing then fling bounding area must be provided.\n * If both the element id and the fling bounding area are provided then this\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the fling bounding area\n * @property {?number} top - The top coordinate of the fling bounding area\n * @property {?number} width - The width of the fling bounding area\n * @property {?number} height - The height of the fling bounding area\n * @property {!string} direction - Direction of the fling.\n * Acceptable values are: `up`, `down`, `left` and `right` (case insensitive)\n * @property {?number} speed [7500 * displayDensity] - The speed at which to perform this\n * gesture in pixels per second. The value must be greater than the minimum fling\n * velocity for the given view (50 by default)\n */\n\n/**\n * Drags to the specified location.\n *\n * @param {?FlingOptions} opts\n * @throws {Error} if provided options are not valid\n * @returns {boolean} True if the object can still scroll in the given direction.\n */\ncommands.mobileFlingGesture = async function mobileFlingGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    direction,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/fling', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    direction,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} PinchOptions\n * @property {?string} elementId - The id of the element to be pinched.\n * If the element id is missing then pinch bounding area must be provided.\n * If both the element id and the pinch bounding area are provided then the\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the pinch bounding area\n * @property {?number} top - The top coordinate of the pinch bounding area\n * @property {?number} width - The width of the pinch bounding area\n * @property {?number} height - The height of the pinch bounding area\n * @property {!number} percent - The size of the pinch as a percentage of the pinch area size.\n * Valid values must be float numbers in range 0..1, where 1.0 is 100%\n * @property {?number} speed [2500 * displayDensity] - The speed at which to perform\n * this gesture in pixels per second. The value must not be negative\n */\n\n/**\n * Performs a pinch close gesture.\n *\n * @param {?PinchOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobilePinchCloseGesture = async function mobilePinchCloseGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/pinch_close', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    percent,\n    speed,\n  });\n};\n\n/**\n * Performs a pinch open gesture.\n *\n * @param {?PinchOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobilePinchOpenGesture = async function mobilePinchOpenGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/pinch_open', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    percent,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} SwipeOptions\n * @property {?string} elementId - The id of the element to be swiped.\n * If the element id is missing then swipe bounding area must be provided.\n * If both the element id and the swipe bounding area are provided then the\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the swipe bounding area\n * @property {?number} top - The top coordinate of the swipe bounding area\n * @property {?number} width - The width of the swipe bounding area\n * @property {?number} height - The height of the swipe bounding area\n * @property {!string} direction - Direction of the swipe.\n * Acceptable values are: `up`, `down`, `left` and `right` (case insensitive)\n * @property {!number} percent - The size of the swipe as a percentage of the swipe area size.\n * Valid values must be float numbers in range 0..1, where 1.0 is 100%\n * @property {?number} speed [5000 * displayDensity] - The speed at which to perform this\n * gesture in pixels per second. The value must not be negative\n */\n\n/**\n * Performs a swipe gesture.\n *\n * @param {?SwipeOptions} opts\n * @throws {Error} if provided options are not valid\n */\ncommands.mobileSwipeGesture = async function mobileSwipeGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    direction,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/swipe', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    direction,\n    percent,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} ScrollOptions\n * @property {?string} elementId - The id of the element to be scrolled.\n * If the element id is missing then scroll bounding area must be provided.\n * If both the element id and the scroll bounding area are provided then this\n * area is effectively ignored.\n * @property {?number} left - The left coordinate of the scroll bounding area\n * @property {?number} top - The top coordinate of the scroll bounding area\n * @property {?number} width - The width of the scroll bounding area\n * @property {?number} height - The height of the scroll bounding area\n * @property {!string} direction - Direction of the scroll.\n * Acceptable values are: `up`, `down`, `left` and `right` (case insensitive)\n * @property {!number} percent - The size of the scroll as a percentage of the scrolling area size.\n * Valid values must be float numbers greater than zero, where 1.0 is 100%\n * @property {?number} speed [5000 * displayDensity] - The speed at which to perform this gesture\n * in pixels per second. The value must not be negative\n */\n\n/**\n * Performs a scroll gesture.\n *\n * @param {?ScrollOptions} opts\n * @throws {Error} if provided options are not valid\n * @returns {boolean} True if the object can still scroll in the given direction.\n */\ncommands.mobileScrollGesture = async function mobileScrollGesture (opts = {}) {\n  const {\n    elementId,\n    left, top, width, height,\n    direction,\n    percent,\n    speed,\n  } = opts;\n  return await this.uiautomator2.jwproxy.command('/appium/gestures/scroll', 'POST', {\n    origin: toOrigin(elementId),\n    area: toRect(left, top, width, height),\n    direction,\n    percent,\n    speed,\n  });\n};\n\n/**\n * @typedef {Object} ScrollElementToElementOpts\n * @property {string} elementId The identifier of the scrollable element,\n * which is going to be scrolled. It is required this element\n * is a valid scrollable container and it was located by `-android uiautomator`\n * strategy.\n * @property {string} elementToId The identifier of the item, which belongs\n * to the scrollable element above, and which should become visible after\n * the scrolling operation is finished. It is required this element\n * was located by `-android uiautomator` strategy.\n */\n\n/**\n * Scrolls the given scrollable element `elementId` until `elementToId`\n * becomes visible. This function returns immediately if the `elementToId`\n * is already visible in the view port. Otherwise it would scroll\n * to the very beginning of the scrollable control and tries to reach the destination element\n * by scrolling its parent to the end step by step. The scroll direction (vertical or horizontal)\n * is detected automatically.\n *\n * @param {ScrollElementToElementOpts} opts\n * @throws {Error} if the scrolling operation cannot be performed\n */\ncommands.mobileScrollBackTo = async function (opts = {}) {\n  const {elementId, elementToId} = opts;\n  if (!elementId || !elementToId) {\n    throw new errors.InvalidArgumentError(`Both elementId and elementToId arguments must be provided`);\n  }\n  return await this.uiautomator2.jwproxy.command(\n    `/appium/element/${util.unwrapElement(elementId)}/scroll_to/${util.unwrapElement(elementToId)}`, 'POST', {});\n};\n\n/**\n * @typedef {Object} ScrollOpts\n * @property {?string} elementId The identifier of an element. It is required this element\n * is a valid scrollable container and it was located by `-android uiautomator`\n * strategy. If this property is not provided then the first currently available scrollable view\n * is selected for the interaction.\n * @property {!string} strategy The following strategies are supported:\n * - `accessibility id` (UiSelector().description)\n * - `class name` (UiSelector().className)\n * - `-android uiautomator` (UiSelector)\n * @property {!string} selector The corresponding lookup value for the given\n * strategy.\n * @property {?number} maxSwipes The maximum number of swipes to perform\n * on the target scrollable view in order to reach the destination element.\n * In case this value is unset then it would be retrieved from the scrollable\n * element itself (vua `getMaxSearchSwipes()` property).\n */\n\n/**\n * Scrolls the given scrollable element until the element identified\n * by `strategy` and `selector` becomes visible. This function returns immediately if the\n * destination element is already visible in the view port. Otherwise it would scroll\n * to the very beginning of the scrollable control and tries to reach the destination element\n * by scrolling its parent to the end step by step. The scroll direction (vertical or horizontal)\n * is detected automatically.\n *\n * @param {ScrollOpts} opts\n * @throws {Error} if the scrolling operation cannot be performed\n */\ncommands.mobileScroll = async function (opts = {}) {\n  const {\n    element, elementId, // `element` is deprecated, use `elementId` instead\n    strategy, selector, maxSwipes\n  } = opts;\n  if (!strategy || !selector) {\n    throw new errors.InvalidArgumentError(`Both strategy and selector arguments must be provided`);\n  }\n  return await this.uiautomator2.jwproxy.command('/touch/scroll', 'POST', {\n    origin: toOrigin(elementId || element),\n    params: {strategy, selector, maxSwipes},\n  });\n};\n\nexport default commands;\n"],"mappings":"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"}