{"version":3,"file":"file-actions.js","names":["CONTAINER_PATH_MARKER","CONTAINER_PATH_PATTERN","RegExp","ANDROID_MEDIA_RESCAN_INTENT","commands","parseContainerPath","remotePath","match","exec","Error","path","posix","resolve","scanMedia","adb","log","debug","getApiLevel","shell","e","warn","stderr","message","escapePath","p","replace","pullFile","endsWith","errors","InvalidArgumentError","tmpDestination","startsWith","packageId","pathInContainer","basename","errorAndThrow","localFile","tempDir","prefix","suffix","pull","util","toInMemoryBase64","toString","fs","exists","unlink","mobilePullFile","opts","requireArgs","pushFile","base64Data","_","isArray","Buffer","from","content","writeFile","dirname","push","mobilePushFile","payload","pullFolder","tmpRoot","openDir","zip","toInMemoryZip","encodeToBase64","rimraf","mobilePullFolder","deleteFileOrFolder","performRemoteFsCheck","op","runAs","passFlag","checkCmd","fullCmd","includes","ign","isFile","isDir","isPresent","dstPath","pkgId","info","expectsFile","mobileDeleteFile"],"sources":["../../../lib/commands/file-actions.js"],"sourcesContent":["import _ from 'lodash';\nimport { fs, util, zip, tempDir } from 'appium/support';\nimport path from 'path';\nimport { errors } from 'appium/driver';\nimport { requireArgs } from '../utils';\n\n\nconst CONTAINER_PATH_MARKER = '@';\n// https://regex101.com/r/PLdB0G/2\nconst CONTAINER_PATH_PATTERN = new RegExp(`^${CONTAINER_PATH_MARKER}([^/]+)/(.+)`);\nconst ANDROID_MEDIA_RESCAN_INTENT = 'android.intent.action.MEDIA_SCANNER_SCAN_FILE';\n\n\nconst commands = {};\n\n/**\n * Parses the actual destination path from the given value\n *\n * @param {string} remotePath The preformatted remote path, which looks like\n * `@my.app.id/my/path`\n * @returns {Array<string>} An array, where the first item is the parsed package\n * identifier and the second one is the actual destination path inside the package.\n * @throws {Error} If the given string cannot be parsed\n */\nfunction parseContainerPath (remotePath) {\n  const match = CONTAINER_PATH_PATTERN.exec(remotePath);\n  if (!match) {\n    throw new Error(`It is expected that package identifier is separated from the relative path with a single slash. ` +\n      `'${remotePath}' is given instead`);\n  }\n  return [match[1], path.posix.resolve(`/data/data/${match[1]}`, match[2])];\n}\n\n/**\n * Scans the given file/folder on the remote device\n * and adds matching items to the device's media library.\n * Exceptions are ignored and written into the log.\n *\n * @param {ADB} adb ADB instance\n * @param {Object?} log Logger instance\n * @param {string} remotePath The file/folder path on the remote device\n */\nasync function scanMedia (adb, remotePath, log = null) {\n  log?.debug(`Performing media scan of '${remotePath}'`);\n  try {\n    // https://github.com/appium/appium/issues/16184\n    if (await adb.getApiLevel() >= 29) {\n      await adb.scanMedia(remotePath);\n    } else {\n      await adb.shell([\n        'am', 'broadcast',\n        '-a', ANDROID_MEDIA_RESCAN_INTENT,\n        '-d', `file://${remotePath}`\n      ]);\n    }\n  } catch (e) {\n    log?.warn(`Ignoring an unexpected error upon media scanning of '${remotePath}': ${e.stderr || e.message}`);\n  }\n}\n\n/**\n * A small helper, which escapes single quotes in paths,\n * so they are safe to be passed as arguments of shell commands\n *\n * @param {string} p The initial remote path\n * @returns {string} The escaped path value\n */\nfunction escapePath (p) {\n  return p.replace(/'/g, `\\\\'`);\n}\n\n/**\n * Pulls a remote file from the device.\n * It is required, that a package has debugging flag enabled\n * in order to access its files.\n *\n * @param {string} remotePath The full path to the remote file\n * or a specially formatted path, which points to an item inside app bundle\n * @returns {string} Base64 encoded content of the pulled file\n * @throws {Error} If the pull operation failed\n */\ncommands.pullFile = async function pullFile (remotePath) {\n  if (remotePath.endsWith('/')) {\n    throw new errors.InvalidArgumentError(`It is expected that remote path points to a file and not to a folder. ` +\n      `'${remotePath}' is given instead`);\n  }\n  let tmpDestination = null;\n  if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {\n    const [packageId, pathInContainer] = parseContainerPath(remotePath);\n    this.log.debug(`Parsed package identifier '${packageId}' from '${remotePath}'. Will get the data from '${pathInContainer}'`);\n    tmpDestination = `/data/local/tmp/${path.posix.basename(pathInContainer)}`;\n    try {\n      await this.adb.shell(['run-as', packageId, `chmod 777 '${escapePath(pathInContainer)}'`]);\n      await this.adb.shell([\n        'run-as', packageId,\n        `cp -f '${escapePath(pathInContainer)}' '${escapePath(tmpDestination)}'`\n      ]);\n    } catch (e) {\n      this.log.errorAndThrow(`Cannot access the container of '${packageId}' application. ` +\n                        `Is the application installed and has 'debuggable' build option set to true? ` +\n                        `Original error: ${e.message}`);\n    }\n  }\n  const localFile = await tempDir.path({prefix: 'appium', suffix: '.tmp'});\n  try {\n    await this.adb.pull(tmpDestination || remotePath, localFile);\n    return (await util.toInMemoryBase64(localFile)).toString();\n  } finally {\n    if (await fs.exists(localFile)) {\n      await fs.unlink(localFile);\n    }\n    if (tmpDestination) {\n      await this.adb.shell(['rm', '-f', tmpDestination]);\n    }\n  }\n};\n\n/**\n * @typedef {Object} PullFileOptions\n * @property {string} remotePath The full path to the remote file\n * or a specially formatted path, which points to an item inside an app bundle,\n * for example `@my.app.id/my/path`. It is mandatory for the app bundle to have\n * debugging enabled in order to use the latter remotePath format.\n */\n\n/**\n * Pulls a remote file from the device.\n *\n * @param {PullFileOptions} opts\n * @returns {string} The same as `pullFile`\n */\ncommands.mobilePullFile = async function mobilePullFile (opts = {}) {\n  const { remotePath } = requireArgs('remotePath', opts);\n  return await this.pullFile(remotePath);\n};\n\n/**\n * Pushes the given data to a file on the remote device\n * It is required, that a package has debugging flag enabled\n * in order to access its files.\n * After a file is pushed it gets automatically scanned for possible\n * media occurrences. If the scan succeeds then the file is added to the\n * media library.\n *\n * @param {string} remotePath The full path to the remote file or\n * a file inside a package bundle\n * @param {string} base64Data Base64 encoded data to be written to the\n * remote file. The remote file will be silently overridden if it already exists.\n * @throws {Error} If there was an error while pushing the data\n */\ncommands.pushFile = async function pushFile (remotePath, base64Data) {\n  if (remotePath.endsWith('/')) {\n    throw new errors.InvalidArgumentError(\n      `It is expected that remote path points to a file and not to a folder. ` +\n      `'${remotePath}' is given instead`\n    );\n  }\n  const localFile = await tempDir.path({prefix: 'appium', suffix: '.tmp'});\n  if (_.isArray(base64Data)) {\n    // some clients (ahem) java, send a byte array encoding utf8 characters\n    // instead of a string, which would be infinitely better!\n    base64Data = Buffer.from(base64Data).toString('utf8');\n  }\n  const content = Buffer.from(base64Data, 'base64');\n  let tmpDestination = null;\n  try {\n    await fs.writeFile(localFile, content.toString('binary'), 'binary');\n    if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {\n      const [packageId, pathInContainer] = parseContainerPath(remotePath);\n      this.log.debug(`Parsed package identifier '${packageId}' from '${remotePath}'. ` +\n        `Will put the data into '${pathInContainer}'`);\n      tmpDestination = `/data/local/tmp/${path.posix.basename(pathInContainer)}`;\n      try {\n        await this.adb.shell(\n          ['run-as', packageId, `mkdir -p '${escapePath(path.posix.dirname(pathInContainer))}'`]\n        );\n        await this.adb.shell(['run-as', packageId, `touch '${escapePath(pathInContainer)}'`]);\n        await this.adb.shell(['run-as', packageId, `chmod 777 '${escapePath(pathInContainer)}'`]);\n        await this.adb.push(localFile, tmpDestination);\n        await this.adb.shell([\n          'run-as', packageId,\n          `cp -f '${escapePath(tmpDestination)}' '${escapePath(pathInContainer)}'`\n        ]);\n      } catch (e) {\n        this.log.errorAndThrow(`Cannot access the container of '${packageId}' application. ` +\n                          `Is the application installed and has 'debuggable' build option set to true? ` +\n                          `Original error: ${e.message}`);\n      }\n    } else {\n      // adb push creates folders and overwrites existing files.\n      await this.adb.push(localFile, remotePath);\n\n      // if we have pushed a file, it might be a media file, so ensure that\n      // apps know about it\n      await scanMedia(this.adb, remotePath, this.log);\n    }\n  } finally {\n    if (await fs.exists(localFile)) {\n      await fs.unlink(localFile);\n    }\n    if (tmpDestination) {\n      await this.adb.shell(['rm', '-f', tmpDestination]);\n    }\n  }\n};\n\n/**\n * @typedef {Object} PushFileOptions\n * @property {string} remotePath The full path to the remote file\n * or a specially formatted path, which points to an item inside an app bundle,\n * for example `@my.app.id/my/path`. It is mandatory for the app bundle to have\n * debugging enabled in order to use the latter remotePath format.\n * @property {string} payload Base64-encoded content of the file to be pushed.\n */\n\n/**\n * Pushes the given data to a file on the remote device.\n *\n * @param {PushFileOptions} opts\n */\ncommands.mobilePushFile = async function mobilePushFile (opts = {}) {\n  const { remotePath, payload } = requireArgs(['remotePath', 'payload'], opts);\n  return await this.pushFile(remotePath, payload);\n};\n\n/**\n * Pulls the whole folder from the remote device\n *\n * @param {string} remotePath The full path to a folder on the\n * remote device or a folder inside an application bundle\n * @returns {string} Base64-encoded and zipped content of the folder\n * @throws {Error} If there was a failure while getting the folder content\n */\ncommands.pullFolder = async function pullFolder (remotePath) {\n  const tmpRoot = await tempDir.openDir();\n  try {\n    await this.adb.pull(remotePath, tmpRoot);\n    return (await zip.toInMemoryZip(tmpRoot, {\n      encodeToBase64: true,\n    })).toString();\n  } finally {\n    await fs.rimraf(tmpRoot);\n  }\n};\n\n/**\n * @typedef {Object} PullFolderOptions\n * @property {string} remotePath The full path to the remote folder.\n */\n\n/**\n * Pulls the whole folder from the device under test.\n *\n * @param {PullFolderOptions} opts\n * @returns {string} The same as `pullFolder`\n */\ncommands.mobilePullFolder = async function mobilePullFolder (opts = {}) {\n  const { remotePath } = requireArgs('remotePath', opts);\n  return await this.pullFolder(remotePath);\n};\n\n/**\n * Deletes the given folder or file from the remote device\n *\n * @param {ADB} adb\n * @param {string} remotePath The full path to the remote folder\n * or file (folder names must end with a single slash)\n * @throws {Error} If the provided remote path is invalid or\n * the package content cannot be accessed\n * @returns {boolean} `true` if the remote item has been successfully deleted.\n * If the remote path is valid, but the remote path does not exist\n * this function return `false`.\n */\nasync function deleteFileOrFolder (adb, remotePath) {\n  const performRemoteFsCheck = async (p, op, runAs = null) => {\n    const passFlag = '__PASS__';\n    const checkCmd = `[ -${op} '${escapePath(p)}' ] && echo ${passFlag}`;\n    const fullCmd = runAs ? `run-as ${runAs} ${checkCmd}` : checkCmd;\n    try {\n      return _.includes(await adb.shell([fullCmd]), passFlag);\n    } catch (ign) {\n      return false;\n    }\n  };\n  const isFile = async (p, runAs = null) => await performRemoteFsCheck(p, 'f', runAs);\n  const isDir = async (p, runAs = null) => await performRemoteFsCheck(p, 'd', runAs);\n  const isPresent = async (p, runAs = null) => await performRemoteFsCheck(p, 'e', runAs);\n\n  let dstPath = remotePath;\n  let pkgId = null;\n  if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {\n    const [packageId, pathInContainer] = parseContainerPath(remotePath);\n    this.log.debug(`Parsed package identifier '${packageId}' from '${remotePath}'`);\n    dstPath = pathInContainer;\n    pkgId = packageId;\n  }\n\n  if (pkgId) {\n    try {\n      await adb.shell(['run-as', pkgId, 'ls']);\n    } catch (e) {\n      this.log.errorAndThrow(`Cannot access the container of '${pkgId}' application. ` +\n        `Is the application installed and has 'debuggable' build option set to true? ` +\n        `Original error: ${e.message}`);\n    }\n  }\n\n  if (!await isPresent(dstPath, pkgId)) {\n    this.log.info(`The item at '${dstPath}' does not exist. Perhaps, already deleted?`);\n    return false;\n  }\n\n  const expectsFile = !remotePath.endsWith('/');\n  if (expectsFile && !await isFile(dstPath, pkgId)) {\n    this.log.errorAndThrow(`The item at '${dstPath}' is not a file`);\n  } else if (!expectsFile && !await isDir(dstPath, pkgId)) {\n    this.log.errorAndThrow(`The item at '${dstPath}' is not a folder`);\n  }\n\n  if (pkgId) {\n    await adb.shell(\n      ['run-as', pkgId, `rm -f${expectsFile ? '' : 'r'} '${escapePath(dstPath)}'`]);\n  } else {\n    await adb.shell(['rm', `-f${expectsFile ? '' : 'r'}`, dstPath]);\n  }\n  if (await isPresent(dstPath, pkgId)) {\n    this.log.errorAndThrow(`The item at '${dstPath}' still exists after being deleted. ` +\n      `Is it writable?`);\n  }\n  return true;\n}\n\n/**\n * @typedef {Object} DeleteFileOpts\n * @property {!string} remotePath The full path to the remote file\n * or a file inside an application bundle (for example `@my.app.id/path/in/bundle`)\n */\n\n/**\n * Deletes a file on the remote device\n *\n * @param {DeleteFileOpts} opts\n * @returns {boolean} `true` if the remote file has been successfully deleted.\n * If the path to a remote file is valid, but the file itself does not exist\n * then `false` is returned.\n * @throws {Error} If the argument is invalid or there was an error while\n * deleting the file\n */\ncommands.mobileDeleteFile = async function mobileDeleteFile (opts = {}) {\n  const {remotePath} = opts;\n  if (!remotePath) {\n    throw new errors.InvalidArgumentError(`The 'remotePath' argument is mandatory`);\n  }\n  if (remotePath.endsWith('/')) {\n    throw new errors.InvalidArgumentError(\n      `It is expected that remote path points to a folder and not to a file. ` +\n      `'${remotePath}' is given instead`\n    );\n  }\n  return await deleteFileOrFolder(this.adb, remotePath);\n};\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}