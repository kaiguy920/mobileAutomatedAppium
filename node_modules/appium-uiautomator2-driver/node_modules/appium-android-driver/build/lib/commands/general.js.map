{"version":3,"file":"general.js","names":["MOMENT_FORMAT_ISO8601","commands","helpers","extensions","keys","_","isArray","join","params","text","replace","opts","unicodeKeyboard","doSendKeys","bootstrap","sendAction","getDeviceTime","format","log","debug","deviceTimestamp","adb","shell","trim","parsedTimestamp","moment","utc","isValid","warn","utcOffset","_tzm","mobileGetDeviceTime","getPageSource","back","isKeyboardShown","isSoftKeyboardPresent","hideKeyboard","openSettingsActivity","setting","appPackage","appActivity","getFocusedPackageAndActivity","waitForNotActivity","getWindowSize","getWindowRect","width","height","x","y","getCurrentActivity","getCurrentPackage","background","seconds","goToHome","sleepMs","thresholdMs","intervalMs","min","parseInt","progressCb","elapsedMs","progress","waitSecs","toFixed","progressPct","longSleep","args","_cachedActivityArgs","activateApp","ign","appWaitPackage","appWaitActivity","split","includes","pkg","activity","action","intentAction","category","intentCategory","flags","intentFlags","waitPkg","waitActivity","waitForLaunch","appWaitForLaunch","waitDuration","appWaitDuration","optionalIntentArguments","stopApp","user","userProfile","util","filterObject","JSON","stringify","startApp","getStrings","language","getDeviceLanguage","info","preprocessStringsMap","mapping","result","key","value","toPairs","isString","apkStrings","androidHelpers","pushStrings","launchApp","initAUT","startAUT","startActivity","dontStopAppOnReset","hasValue","reset","resetApp","Object","assign","fastReset","setContext","isChromeSession","startChromeSession","setUrl","uri","startUri","closeApp","forceStop","getDisplayDensity","out","val","isNaN","errorAndThrow","mobilePerformEditorAction","errors","InvalidArgumentError","performEditorAction","PERMISSION_ACTION","GRANT","REVOKE","mobileChangePermissions","permissions","actionFunc","toLower","permission","grantPermission","revokePermission","values","PERMISSIONS_TYPE","DENIED","GRANTED","REQUESTED","mobileGetPermissions","type","getReqPermissions","getGrantedPermissions","getDeniedPermissions","mobileGetNotifications","getNotifications","mobileListSms","getSmsList","mobileUnlock","strategy","timeoutMs","unlock","unlockKey","unlockType","unlockStrategy","unlockSuccessTimeout"],"sources":["../../../lib/commands/general.js"],"sourcesContent":["import _ from 'lodash';\nimport androidHelpers from '../android-helpers';\nimport { util } from 'appium/support';\nimport moment from 'moment';\nimport { longSleep } from 'asyncbox';\nimport { errors } from 'appium/driver';\n\nconst MOMENT_FORMAT_ISO8601 = 'YYYY-MM-DDTHH:mm:ssZ';\n\nlet commands = {}, helpers = {}, extensions = {};\n\ncommands.keys = async function keys (keys) {\n  // Protocol sends an array; rethink approach\n  keys = _.isArray(keys) ? keys.join('') : keys;\n  let params = {\n    text: keys,\n    replace: false\n  };\n  if (this.opts.unicodeKeyboard) {\n    params.unicodeKeyboard = true;\n  }\n  await this.doSendKeys(params);\n};\n\ncommands.doSendKeys = async function doSendKeys (params) {\n  return await this.bootstrap.sendAction('setText', params);\n};\n\n/**\n * Retrieves the current device's timestamp.\n *\n * @param {string} format - The set of format specifiers. Read\n *                          https://momentjs.com/docs/ to get the full list of supported\n *                          datetime format specifiers. The default format is\n *                          `YYYY-MM-DDTHH:mm:ssZ`, which complies to ISO-8601\n * @return {string} Formatted datetime string or the raw command output if formatting fails\n */\ncommands.getDeviceTime = async function getDeviceTime (format = MOMENT_FORMAT_ISO8601) {\n  this.log.debug('Attempting to capture android device date and time. ' +\n    `The format specifier is '${format}'`);\n  const deviceTimestamp = (await this.adb.shell(['date', '+%Y-%m-%dT%T%z'])).trim();\n  this.log.debug(`Got device timestamp: ${deviceTimestamp}`);\n  const parsedTimestamp = moment.utc(deviceTimestamp, 'YYYY-MM-DDTHH:mm:ssZZ');\n  if (!parsedTimestamp.isValid()) {\n    this.log.warn('Cannot parse the returned timestamp. Returning as is');\n    return deviceTimestamp;\n  }\n  return parsedTimestamp.utcOffset(parsedTimestamp._tzm || 0).format(format);\n};\n\n/**\n * @typedef {Object} DeviceTimeOptions\n * @property {string} format [YYYY-MM-DDTHH:mm:ssZ] - See getDeviceTime#format\n */\n\n/**\n * Retrieves the current device time\n *\n * @param {DeviceTimeOptions} opts\n * @return {string} Formatted datetime string or the raw command output if formatting fails\n */\ncommands.mobileGetDeviceTime = async function mobileGetDeviceTime (opts = {}) {\n  return await this.getDeviceTime(opts.format);\n};\n\ncommands.getPageSource = async function getPageSource () {\n  return await this.bootstrap.sendAction('source');\n};\n\ncommands.back = async function back () {\n  return await this.bootstrap.sendAction('pressBack');\n};\n\ncommands.isKeyboardShown = async function isKeyboardShown () {\n  const {isKeyboardShown} = await this.adb.isSoftKeyboardPresent();\n  return isKeyboardShown;\n};\n\ncommands.hideKeyboard = async function hideKeyboard () {\n  return await this.adb.hideKeyboard();\n};\n\ncommands.openSettingsActivity = async function openSettingsActivity (setting) {\n  let {appPackage, appActivity} = await this.adb.getFocusedPackageAndActivity();\n  await this.adb.shell(['am', 'start', '-a', `android.settings.${setting}`]);\n  await this.adb.waitForNotActivity(appPackage, appActivity, 5000);\n};\n\ncommands.getWindowSize = async function getWindowSize () {\n  return await this.bootstrap.sendAction('getDeviceSize');\n};\n\n// For W3C\ncommands.getWindowRect = async function getWindowRect () {\n  const { width, height } = await this.getWindowSize();\n  return {\n    width,\n    height,\n    x: 0,\n    y: 0\n  };\n};\n\ncommands.getCurrentActivity = async function getCurrentActivity () {\n  return (await this.adb.getFocusedPackageAndActivity()).appActivity;\n};\n\ncommands.getCurrentPackage = async function getCurrentPackage () {\n  return (await this.adb.getFocusedPackageAndActivity()).appPackage;\n};\n\ncommands.background = async function background (seconds) {\n  if (seconds < 0) {\n    // if user passes in a negative seconds value, interpret that as the instruction\n    // to not bring the app back at all\n    await this.adb.goToHome();\n    return true;\n  }\n  let {appPackage, appActivity} = await this.adb.getFocusedPackageAndActivity();\n  await this.adb.goToHome();\n\n  // people can wait for a long time, so to be safe let's use the longSleep function and log\n  // progress periodically.\n  const sleepMs = seconds * 1000;\n  const thresholdMs = 30 * 1000; // use the spin-wait for anything over this threshold\n  // for our spin interval, use 1% of the total wait time, but nothing bigger than 30s\n  const intervalMs = _.min([30 * 1000, parseInt(sleepMs / 100, 10)]);\n  const progressCb = ({elapsedMs, progress}) => {\n    const waitSecs = (elapsedMs / 1000).toFixed(0);\n    const progressPct = (progress * 100).toFixed(2);\n    this.log.debug(`Waited ${waitSecs}s so far (${progressPct}%)`);\n  };\n  await longSleep(sleepMs, {thresholdMs, intervalMs, progressCb});\n\n  let args;\n  if (this._cachedActivityArgs && this._cachedActivityArgs[`${appPackage}/${appActivity}`]) {\n    // the activity was started with `startActivity`, so use those args to restart\n    args = this._cachedActivityArgs[`${appPackage}/${appActivity}`];\n  } else {\n    try {\n      this.log.debug(`Activating app '${appPackage}' in order to restore it`);\n      await this.activateApp(appPackage);\n      return true;\n    } catch (ign) {}\n    args = ((appPackage === this.opts.appPackage && appActivity === this.opts.appActivity) ||\n            (appPackage === this.opts.appWaitPackage && (this.opts.appWaitActivity || '').split(',').includes(appActivity)))\n      ? {// the activity is the original session activity, so use the original args\n        pkg: this.opts.appPackage,\n        activity: this.opts.appActivity,\n        action: this.opts.intentAction,\n        category: this.opts.intentCategory,\n        flags: this.opts.intentFlags,\n        waitPkg: this.opts.appWaitPackage,\n        waitActivity: this.opts.appWaitActivity,\n        waitForLaunch: this.opts.appWaitForLaunch,\n        waitDuration: this.opts.appWaitDuration,\n        optionalIntentArguments: this.opts.optionalIntentArguments,\n        stopApp: false,\n        user: this.opts.userProfile}\n      : {// the activity was started some other way, so use defaults\n        pkg: appPackage,\n        activity: appActivity,\n        waitPkg: appPackage,\n        waitActivity: appActivity,\n        stopApp: false};\n  }\n  args = await util.filterObject(args);\n  this.log.debug(`Bringing application back to foreground with arguments: ${JSON.stringify(args)}`);\n  return await this.adb.startApp(args);\n};\n\ncommands.getStrings = async function getStrings (language) {\n  if (!language) {\n    language = await this.adb.getDeviceLanguage();\n    this.log.info(`No language specified, returning strings for: ${language}`);\n  }\n\n  // Clients require the resulting mapping to have both keys\n  // and values of type string\n  const preprocessStringsMap = (mapping) => {\n    const result = {};\n    for (const [key, value] of _.toPairs(mapping)) {\n      result[key] = _.isString(value) ? value : JSON.stringify(value);\n    }\n    return result;\n  };\n\n  if (this.apkStrings[language]) {\n    // Return cached strings\n    return preprocessStringsMap(this.apkStrings[language]);\n  }\n\n  this.apkStrings[language] = await androidHelpers.pushStrings(language, this.adb, this.opts);\n  if (this.bootstrap) {\n    // TODO: This is mutating the current language, but it's how appium currently works\n    await this.bootstrap.sendAction('updateStrings');\n  }\n\n  return preprocessStringsMap(this.apkStrings[language]);\n};\n\ncommands.launchApp = async function launchApp () {\n  await this.initAUT();\n  await this.startAUT();\n};\n\ncommands.startActivity = async function startActivity (appPackage, appActivity,\n  appWaitPackage, appWaitActivity, intentAction, intentCategory, intentFlags,\n  optionalIntentArguments, dontStopAppOnReset) {\n  this.log.debug(`Starting package '${appPackage}' and activity '${appActivity}'`);\n\n  // dontStopAppOnReset is both an argument here, and a desired capability\n  // if the argument is set, use it, otherwise use the cap\n  if (!util.hasValue(dontStopAppOnReset)) {\n    dontStopAppOnReset = !!this.opts.dontStopAppOnReset;\n  }\n\n  let args = {\n    pkg: appPackage,\n    activity: appActivity,\n    waitPkg: appWaitPackage || appPackage,\n    waitActivity: appWaitActivity || appActivity,\n    action: intentAction,\n    category: intentCategory,\n    flags: intentFlags,\n    optionalIntentArguments,\n    stopApp: !dontStopAppOnReset\n  };\n  this._cachedActivityArgs = this._cachedActivityArgs || {};\n  this._cachedActivityArgs[`${args.waitPkg}/${args.waitActivity}`] = args;\n  await this.adb.startApp(args);\n};\n\ncommands.reset = async function reset () {\n  await androidHelpers.resetApp(this.adb, Object.assign({}, this.opts, {fastReset: true}));\n  // reset context since we don't know what kind on context we will end up after app launch.\n  await this.setContext();\n  return await this.isChromeSession ? this.startChromeSession() : this.startAUT();\n};\n\ncommands.startAUT = async function startAUT () {\n  await this.adb.startApp({\n    pkg: this.opts.appPackage,\n    activity: this.opts.appActivity,\n    action: this.opts.intentAction,\n    category: this.opts.intentCategory,\n    flags: this.opts.intentFlags,\n    waitPkg: this.opts.appWaitPackage,\n    waitActivity: this.opts.appWaitActivity,\n    waitForLaunch: this.opts.appWaitForLaunch,\n    waitDuration: this.opts.appWaitDuration,\n    optionalIntentArguments: this.opts.optionalIntentArguments,\n    stopApp: !this.opts.dontStopAppOnReset,\n    user: this.opts.userProfile,\n  });\n};\n\n// we override setUrl to take an android URI which can be used for deep-linking\n// inside an app, similar to starting an intent\ncommands.setUrl = async function setUrl (uri) {\n  await this.adb.startUri(uri, this.opts.appPackage);\n};\n\n// closing app using force stop\ncommands.closeApp = async function closeApp () {\n  await this.adb.forceStop(this.opts.appPackage);\n  // reset context since we don't know what kind on context we will end up after app launch.\n  await this.setContext();\n};\n\ncommands.getDisplayDensity = async function getDisplayDensity () {\n  // first try the property for devices\n  let out = await this.adb.shell(['getprop', 'ro.sf.lcd_density']);\n  if (out) {\n    let val = parseInt(out, 10);\n    // if the value is NaN, try getting the emulator property\n    if (!isNaN(val)) {\n      return val;\n    }\n    this.log.debug(`Parsed density value was NaN: \"${out}\"`);\n  }\n  // fallback to trying property for emulators\n  out = await this.adb.shell(['getprop', 'qemu.sf.lcd_density']);\n  if (out) {\n    let val = parseInt(out, 10);\n    if (!isNaN(val)) {\n      return val;\n    }\n    this.log.debug(`Parsed density value was NaN: \"${out}\"`);\n  }\n  // couldn't get anything, so error out\n  this.log.errorAndThrow('Failed to get display density property.');\n};\n\ncommands.mobilePerformEditorAction = async function mobilePerformEditorAction (opts = {}) {\n  const {action} = opts;\n  if (!util.hasValue(action)) {\n    throw new errors.InvalidArgumentError(`'action' argument is required`);\n  }\n\n  await this.adb.performEditorAction(action);\n};\n\nconst PERMISSION_ACTION = {\n  GRANT: 'grant',\n  REVOKE: 'revoke',\n};\n\n/**\n * @typedef {Object} ChangePermissionsOptions\n * @property {!string|Array<string>} permissions - The full name of the permission to be changed\n * or a list of permissions. Mandatory argument.\n * @property {string} appPackage [this.opts.appPackage] - The application package to set change\n * permissions on. Defaults to the package name under test.\n * @property {string} action [grant] - One of `PERMISSION_ACTION` values\n */\n\n/**\n * Changes package permissions in runtime.\n *\n * @param {?ChangePermissionsOptions} opts - Available options mapping.\n * @throws {Error} if there was a failure while changing permissions\n */\ncommands.mobileChangePermissions = async function mobileChangePermissions (opts = {}) {\n  const {\n    permissions,\n    appPackage = this.opts.appPackage,\n    action = PERMISSION_ACTION.GRANT,\n  } = opts;\n  if (!util.hasValue(permissions)) {\n    throw new errors.InvalidArgumentError(`'permissions' argument is required`);\n  }\n\n  let actionFunc;\n  switch (_.toLower(action)) {\n    case PERMISSION_ACTION.GRANT:\n      actionFunc = (appPackage, permission) => this.adb.grantPermission(appPackage, permission);\n      break;\n    case PERMISSION_ACTION.REVOKE:\n      actionFunc = (appPackage, permission) => this.adb.revokePermission(appPackage, permission);\n      break;\n    default:\n      throw new errors.InvalidArgumentError(`Unknown action '${action}'. ` +\n        `Only ${JSON.stringify(_.values(PERMISSION_ACTION))} actions are supported`);\n  }\n  for (const permission of (_.isArray(permissions) ? permissions : [permissions])) {\n    await actionFunc(appPackage, permission);\n  }\n};\n\nconst PERMISSIONS_TYPE = {\n  DENIED: 'denied',\n  GRANTED: 'granted',\n  REQUESTED: 'requested',\n};\n\n/**\n * @typedef {Object} GetPermissionsOptions\n * @property {string} type [requested] - One of possible permission types to get.\n * Can be any of `PERMISSIONS_TYPE` values.\n * @property {string} appPackage [this.opts.appPackage] - The application package to set change\n * permissions on. Defaults to the package name under test.\n */\n\n/**\n * Gets runtime permissions list for the given application package.\n *\n * @param {GetPermissionsOptions} opts - Available options mapping.\n * @returns {Array<string>} The list of retrieved permissions for the given type\n * (can also be empty).\n * @throws {Error} if there was an error while getting permissions.\n */\ncommands.mobileGetPermissions = async function mobileGetPermissions (opts = {}) {\n  const {\n    type = PERMISSIONS_TYPE.REQUESTED,\n    appPackage = this.opts.appPackage,\n  } = opts;\n\n  let actionFunc;\n  switch (_.toLower(type)) {\n    case PERMISSIONS_TYPE.REQUESTED:\n      actionFunc = (appPackage) => this.adb.getReqPermissions(appPackage);\n      break;\n    case PERMISSIONS_TYPE.GRANTED:\n      actionFunc = (appPackage) => this.adb.getGrantedPermissions(appPackage);\n      break;\n    case PERMISSIONS_TYPE.DENIED:\n      actionFunc = (appPackage) => this.adb.getDeniedPermissions(appPackage);\n      break;\n    default:\n      throw new errors.InvalidArgumentError(`Unknown permissions type '${type}'. ` +\n        `Only ${JSON.stringify(_.values(PERMISSIONS_TYPE))} types are supported`);\n  }\n  return await actionFunc(appPackage);\n};\n\n/**\n * Retrieves the list of recent system notifications.\n *\n * @returns {Object} See the documentation on `adb.getNotifications` for\n * more details\n */\ncommands.mobileGetNotifications = async function mobileGetNotifications () {\n  return await this.adb.getNotifications();\n};\n\n/**\n * @typedef {Object} SmsListOptions\n * @property {number} max [100] - The maximum count of recent SMS messages\n * to retrieve\n */\n\n/**\n * Retrieves the list of recent SMS messages with their properties.\n *\n * @param {SmsListOptions} opts\n * @returns {Object} See the documentation on `adb.getSmsList` for\n * more details\n */\ncommands.mobileListSms = async function mobileListSms (opts = {}) {\n  return await this.adb.getSmsList(opts);\n};\n\n/**\n * @typedef {Object} UnlockOptions\n * @property {string} key The unlock key. The value of this key depends\n * on the actual unlock type and could be a pin/password/pattern value or\n * a biometric finger id.\n * @property {string} type The unlock type. The following unlock types\n * are supported: `pin`, `pinWithKeyEvent`, `password`, `pattern` and `fingerprint`.\n * @property {?string} strategy Either 'locksettings' (default) or 'uiautomator'.\n * Setting it to 'uiautomator' will enforce the driver to avoid using special\n * ADB shortcuts in order to speed up the unlock procedure.\n * @property {?number} timeoutMs [2000] The maximum time in milliseconds\n * to wait until the screen gets unlocked\n */\n\n/**\n * Unlocks the device if it is locked. Noop if the device's screen is not locked.\n *\n * @param {?UnlockOptions} opts\n * @throws {Error} if unlock operation fails or the provided\n * arguments are not valid\n */\ncommands.mobileUnlock = async function mobileUnlock (opts = {}) {\n  const { key, type, strategy, timeoutMs } = opts;\n  await androidHelpers.unlock(this, this.adb, {\n    unlockKey: key,\n    unlockType: type,\n    unlockStrategy: strategy,\n    unlockSuccessTimeout: timeoutMs,\n  });\n};\n\nObject.assign(extensions, commands, helpers);\nexport { commands, helpers };\nexport default extensions;\n"],"mappings":"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"}