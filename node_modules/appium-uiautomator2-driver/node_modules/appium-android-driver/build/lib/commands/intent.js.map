{"version":3,"file":"intent.js","names":["NO_VALUE_ARG_TYPE","SUPPORTED_EXTRA_TYPES","API_LEVEL_ANDROID_8","commands","parseIntentSpec","opts","intent","action","uri","mimeType","identifier","categories","component","extras","flags","resultArgs","push","_","isNil","isArray","flatMap","map","cName","package","errors","InvalidArgumentError","item","type","key","value","includes","isEmpty","isString","trim","JSON","stringify","isUndefined","mobileStartActivity","user","wait","stop","windowingMode","activityType","display","cmd","adb","getApiLevel","shell","mobileBroadcast","receiverPermission","allowBackgroundActivityStarts","mobileStartService","foreground","mobileStopService"],"sources":["../../../lib/commands/intent.js"],"sourcesContent":["import _ from 'lodash';\nimport { errors } from 'appium/driver';\n\nconst NO_VALUE_ARG_TYPE = 'sn';\nconst SUPPORTED_EXTRA_TYPES = [\n  's', NO_VALUE_ARG_TYPE, 'z', 'i', 'l', 'f', 'u', 'cn',\n  'ia', 'ial', 'la', 'lal', 'fa', 'fal', 'sa', 'sal',\n];\nconst API_LEVEL_ANDROID_8 = 26;\n\nconst commands = {};\n\nfunction parseIntentSpec (opts = {}) {\n  const {\n    intent,\n    action,\n    uri,\n    mimeType,\n    identifier,\n    categories,\n    component,\n    extras,\n    flags,\n  } = opts;\n  const resultArgs = [];\n  if (intent) {\n    resultArgs.push(intent);\n  }\n  if (action) {\n    resultArgs.push('-a', action);\n  }\n  if (uri) {\n    resultArgs.push('-d', uri);\n  }\n  if (mimeType) {\n    resultArgs.push('-t', mimeType);\n  }\n  if (!_.isNil(identifier)) {\n    resultArgs.push('-i', identifier);\n  }\n  if (categories) {\n    if (_.isArray(categories)) {\n      resultArgs.push(...(_.flatMap(categories.map((cName) => ['-c', cName]))));\n    } else {\n      resultArgs.push('-c', categories);\n    }\n  }\n  if (component) {\n    resultArgs.push('-n', component);\n  }\n  if (opts.package) {\n    resultArgs.push('-p', opts.package);\n  }\n  if (extras) {\n    if (!_.isArray(extras)) {\n      throw new errors.InvalidArgumentError(`'extras' must be an array`);\n    }\n    for (const item of extras) {\n      if (!_.isArray(item)) {\n        throw new errors.InvalidArgumentError(`Extra argument '${item}' must be an array`);\n      }\n      const [type, key, value] = item;\n      if (!_.includes(SUPPORTED_EXTRA_TYPES, type)) {\n        throw new errors.InvalidArgumentError(\n          `Extra argument type '${type}' is not known. ` +\n          `Supported intent argument types are: ${SUPPORTED_EXTRA_TYPES}`\n        );\n      }\n      if (_.isEmpty(key) || (_.isString(key) && _.trim(key) === '')) {\n        throw new errors.InvalidArgumentError(\n          `Extra argument's key in '${JSON.stringify(item)}' must be a valid string identifier`\n        );\n      }\n      if (type === NO_VALUE_ARG_TYPE) {\n        resultArgs.push(`--e${type}`, key);\n      } else if (_.isUndefined(value)) {\n        throw new errors.InvalidArgumentError(\n          `Intent argument type '${type}' in '${JSON.stringify(item)}' requires a ` +\n          `valid value to be provided`\n        );\n      } else {\n        resultArgs.push(`--e${type}`, key, value);\n      }\n    }\n  }\n  if (flags) {\n    resultArgs.push('-f', flags);\n  }\n  return resultArgs;\n}\n\n/**\n * @typedef {Object} StartActivityOptions\n * @property {?string|number} user ['current'] - The user ID for which the service is started.\n * The `current` user id is used by default\n * @property {?boolean} wait [false] - Set it to `true` if you want to block the method call\n * until the activity manager's process returns the control to the system.\n * @property {?boolean} stop [false] - Set it to `true` to force stop the target\n * app before starting the activity\n * @property {?number|string} windowingMode - The windowing mode to launch the activity into.\n * Check https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java\n * for more details on possible windowing modes (constants starting with `WINDOWING_MODE_`).\n * @property {?number|string} activityType - The activity type to launch the activity as.\n * Check https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java\n * for more details on possible activity types (constants starting with `ACTIVITY_TYPE_`).\n * @property {?number|string} display - The display identifier to launch the activity into.\n * @property {?string} intent - The name of the activity intent to start, for example\n * `com.some.package.name/.YourServiceSubClassName`\n * @property {?string} action - Action name\n * @property {?string} package - Package name\n * @property {?string} uri - Unified resource identifier\n * @property {?string} mimeType - Mime type\n * @property {?string} identifier - Optional identifier\n * @property {?string|Array<string>} categories - One or more category names\n * @property {?string} component - Component name\n * @property {Array<string|Array<string>>} extras - Optional intent arguments. Must be represented\n * as array of arrays, where each subarray item contains two or three string items:\n * value type, key name and the value itself.\n * Supported value types are:\n * - s: string. Value must be a valid string\n * - sn: null. Value is ignored for this type\n * - z: boolean. Value must be either `true` or `false`\n * - i: integer. Value must be a valid 4-byte integer number\n * - l: long. Value must be a valid 8-byte long number\n * - f: float: Value must be a valid float number\n * - u: uri. Value must be a valid uniform resource identifier string\n * - cn: component name. Value must be a valid component name string\n * - ia: Integer[]. Value must be a string of comma-separated integers\n * - ial: List<Integer>. Value must be a string of comma-separated integers\n * - la: Long[]. Value must be a string of comma-separated long numbers\n * - lal: List<Long>. Value must be a string of comma-separated long numbers\n * - fa: Float[]. Value must be a string of comma-separated float numbers\n * - fal: List<Float>. Value must be a string of comma-separated float numbers\n * - sa: String[]. Value must be comma-separated strings. To embed a comma into a string,\n * escape it using \"\\,\"\n * - sal: List<String>. Value must be comma-separated strings. To embed a comma into a string,\n * escape it using \"\\,\"\n * For example: [['s', 'varName1', 'My String1'], ['s', 'varName2', 'My String2'], ['ia', 'arrName', '1,2,3,4']]\n * @property {?string} flags - Intent startup-specific flags as a hexadecimal string.\n * See https://developer.android.com/reference/android/content/Intent.html\n * for the list of available flag values (constants starting with FLAG_ACTIVITY_).\n * Flag values could be merged using the logical 'or' operation.\n * For example, 0x10200000 is the combination of two flags:\n * 0x10000000 `FLAG_ACTIVITY_NEW_TASK` | 0x00200000 `FLAG_ACTIVITY_RESET_TASK_IF_NEEDED`\n */\n\n/**\n * Starts the given activity intent.\n *\n * @param {StartActivityOptions} opts\n * @returns {string} The command output\n * @throws {Error} If there was a failure while starting the activity\n * or required options are missing\n */\ncommands.mobileStartActivity = async function mobileStartActivity (opts = {}) {\n  const {\n    user,\n    wait,\n    stop,\n    windowingMode,\n    activityType,\n    display,\n  } = opts;\n  const cmd = [\n    'am', (await this.adb.getApiLevel() < API_LEVEL_ANDROID_8) ? 'start' : 'start-activity',\n  ];\n  if (!_.isNil(user)) {\n    cmd.push('--user', user);\n  }\n  if (wait) {\n    cmd.push('-W');\n  }\n  if (stop) {\n    cmd.push('-S');\n  }\n  if (!_.isNil(windowingMode)) {\n    cmd.push('--windowingMode', windowingMode);\n  }\n  if (!_.isNil(activityType)) {\n    cmd.push('--activityType', activityType);\n  }\n  if (!_.isNil(display)) {\n    cmd.push('--display', display);\n  }\n  cmd.push(...(parseIntentSpec(opts)));\n  return await this.adb.shell(cmd);\n};\n\n/**\n * @typedef {Object} BroadcastOptions\n * @property {?string|number} user ['all'] - The user ID for which the broadcast is sent.\n * The `current` alias assumes the current user ID.\n * @property {?string} receiverPermission - Require receiver to hold the given permission.\n * @property {?boolean} allowBackgroundActivityStarts [false] - Whether the receiver may\n * start activities even if in the background.\n * @property {?string} intent - The name of the intent to broadcast to, for example\n * `com.some.package.name/.YourServiceSubClassName`.\n * @property {?string} action - Action name\n * @property {?string} uri - Unified resource identifier\n * @property {?string} mimeType - Mime type\n * @property {?string} identifier - Optional identifier\n * @property {?string|Array<string>} categories - One or more category names\n * @property {?string} component - Component name\n * @property {?string} package - Package name\n * @property {Array<Array<string>>} extras - Optional intent arguments.\n * See above for the detailed description.\n * @property {?string} flags - Intent startup-specific flags as a hexadecimal string.\n * See above for the detailed description.\n */\n\n\n/**\n * Send a broadcast intent.\n *\n * @param {BroadcastOptions} opts\n * @returns {string} The command output\n * @throws {Error} If there was a failure while starting the activity\n * or required options are missing\n */\ncommands.mobileBroadcast = async function mobileBroadcast (opts = {}) {\n  const {\n    user,\n    receiverPermission,\n    allowBackgroundActivityStarts,\n  } = opts;\n  const cmd = ['am', 'broadcast'];\n  if (!_.isNil(user)) {\n    cmd.push('--user', user);\n  }\n  if (receiverPermission) {\n    cmd.push('--receiver-permission', receiverPermission);\n  }\n  if (allowBackgroundActivityStarts) {\n    cmd.push('--allow-background-activity-starts');\n  }\n  cmd.push(...(parseIntentSpec(opts)));\n  return await this.adb.shell(cmd);\n};\n\n/**\n * @typedef {Object} StartServiceOptions\n * @property {?string|number} user ['current'] - The user ID for which the service is started.\n * The `current` user id is used by default\n * @property {?boolean} foreground [false] - Set it to `true` if your service must be\n * started as foreground service. This option is ignored if the API level of the\n * device under test is below 26 (Android 8).\n * @property {?string} intent - The name of the service intent to start, for example\n * `com.some.package.name/.YourServiceSubClassName`.\n * @property {?string} action - Action name\n * @property {?string} uri - Unified resource identifier\n * @property {?string} mimeType - Mime type\n * @property {?string} identifier - Optional identifier\n * @property {?string|Array<string>} categories - One or more category names\n * @property {?string} component - Component name\n * @property {?string} package - Package name\n * @property {Array<Array<string>>} extras - Optional intent arguments.\n * See above for the detailed description.\n * @property {?string} flags - Intent startup-specific flags as a hexadecimal string.\n * See above for the detailed description.\n */\n\n/**\n * Starts the given service intent.\n *\n * @param {StartServiceOptions} opts\n * @returns {string} The command output\n * @throws {Error} If there was a failure while starting the service\n * or required options are missing\n */\ncommands.mobileStartService = async function mobileStartService (opts = {}) {\n  const {\n    user,\n    foreground,\n  } = opts;\n  const cmd = ['am'];\n  if (await this.adb.getApiLevel() < API_LEVEL_ANDROID_8) {\n    cmd.push('startservice');\n  } else {\n    cmd.push(foreground ? 'start-foreground-service' : 'start-service');\n  }\n  if (!_.isNil(user)) {\n    cmd.push('--user', user);\n  }\n  cmd.push(...(parseIntentSpec(opts)));\n  return await this.adb.shell(cmd);\n};\n\n/**\n * @typedef {Object} StopServiceOptions\n * @property {string|number} user ['current'] - The user ID for which the service is running.\n * The `current` user id is used by default\n * @property {?string} intent - The name of the service intent to stop, for example\n * `com.some.package.name/.YourServiceSubClassName`.\n * @property {?string} action - Action name\n * @property {?string} uri - Unified resource identifier\n * @property {?string} mimeType - Mime type\n * @property {?string} identifier - Optional identifier\n * @property {?string|Array<string>} categories - One or more category names\n * @property {?string} component - Component name\n * @property {?string} package - Package name\n * @property {Array<Array<string>>} extras - Optional intent arguments.\n * See above for the detailed description.\n * @property {?string} flags - See above for the detailed description.\n */\n\n/**\n * Stops the given service intent.\n *\n * @param {StopServiceOptions} opts\n * @returns {string} The command output\n * @throws {Error} If there was a failure while stopping the service\n * or required options are missing\n */\ncommands.mobileStopService = async function mobileStopService (opts = {}) {\n  const {\n    user,\n  } = opts;\n  const cmd = [\n    'am',\n    (await this.adb.getApiLevel() < API_LEVEL_ANDROID_8) ? 'stopservice' : 'stop-service'\n  ];\n  if (!_.isNil(user)) {\n    cmd.push('--user', user);\n  }\n  cmd.push(...(parseIntentSpec(opts)));\n  return await this.adb.shell(cmd);\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}