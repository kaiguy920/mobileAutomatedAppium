{"version":3,"file":"app-management.js","names":["APP_EXTENSIONS","RESOLVER_ACTIVITY_NAME","commands","isAppInstalled","appId","adb","mobileIsAppInstalled","opts","requireArgs","queryAppState","log","info","APP_STATE","NOT_INSTALLED","processExists","NOT_RUNNING","appIdRe","RegExp","_","escapeRegExp","line","dumpWindows","split","test","some","x","includes","RUNNING_IN_FOREGROUND","RUNNING_IN_BACKGROUND","mobileQueryAppState","activateApp","debug","apiLevel","getApiLevel","cmd","output","shell","e","errorAndThrow","message","activityName","resolveLaunchableActivity","preferCmd","stdout","Error","mobileActivateApp","removeApp","options","uninstallApk","mobileRemoveApp","terminateApp","forceStop","timeout","util","hasValue","isNaN","parseInt","waitForCondition","waitMs","intervalMs","mobileTerminateApp","installApp","appPath","localPath","helpers","configureApp","install","mobileInstallApp","mobileClearApp","errors","InvalidArgumentError","clear"],"sources":["../../../lib/commands/app-management.js"],"sourcesContent":["import _ from 'lodash';\nimport { waitForCondition } from 'asyncbox';\nimport { util } from 'appium/support';\nimport { APP_STATE } from '../android-helpers';\nimport { errors } from 'appium/driver';\nimport { requireArgs } from '../utils';\n\nconst APP_EXTENSIONS = ['.apk', '.apks'];\nconst RESOLVER_ACTIVITY_NAME = 'android/com.android.internal.app.ResolverActivity';\n\nconst commands = {};\n\n/**\n * Verify whether an application is installed or not\n *\n * @param {string} appId - Application package identifier\n * @returns {boolean} true if the app is installed\n */\ncommands.isAppInstalled = async function isAppInstalled (appId) {\n  return await this.adb.isAppInstalled(appId);\n};\n\n/**\n * @typedef {Object} MobileAppInstalledOptions\n * @property {string} appId - Application package identifier. Must be always provided.\n */\n\n/**\n * Verify whether an application is installed or not\n *\n * @param {MobileAppInstalledOptions} opts\n * @returns {boolean} Same as in `isAppInstalled`\n */\ncommands.mobileIsAppInstalled = async function mobileIsAppInstalled (opts = {}) {\n  const { appId } = requireArgs('appId', opts);\n  return await this.isAppInstalled(appId);\n};\n\n/**\n * Queries the current state of the app.\n *\n * @param {string} appId - Application package identifier\n * @returns {number} The corresponding constant, which describes\n *                   the current application state:\n * 0 - is the app is not installed\n * 1 - if the app is installed, but is not running\n * 3 - if the app is running in the background\n * 4 - if the app is running in the foreground\n */\ncommands.queryAppState = async function queryAppState (appId) {\n  this.log.info(`Querying the state of '${appId}'`);\n  if (!await this.adb.isAppInstalled(appId)) {\n    return APP_STATE.NOT_INSTALLED;\n  }\n  if (!await this.adb.processExists(appId)) {\n    return APP_STATE.NOT_RUNNING;\n  }\n  const appIdRe = new RegExp(`\\\\b${_.escapeRegExp(appId)}/`);\n  for (const line of (await this.adb.dumpWindows()).split('\\n')) {\n    if (appIdRe.test(line) && ['mCurrentFocus', 'mFocusedApp'].some((x) => line.includes(x))) {\n      return APP_STATE.RUNNING_IN_FOREGROUND;\n    }\n  }\n  return APP_STATE.RUNNING_IN_BACKGROUND;\n};\n\n/**\n * @typedef {Object} MobileQueryAppStateOptions\n * @property {string} appId - Application package identifier. Must be always provided.\n */\n\n/**\n * Queries the current state of the app.\n *\n * @param {MobileQueryAppStateOptions} opts\n * @returns {number} Same as in `queryAppState`\n */\ncommands.mobileQueryAppState = async function mobileQueryAppState (opts = {}) {\n  const { appId } = requireArgs('appId', opts);\n  return await this.queryAppState(appId);\n};\n\n/**\n * Activates the given application or launches it if necessary.\n * The action literally simulates\n * clicking the corresponding application icon on the dashboard.\n *\n * @param {string} appId - Application package identifier\n * @throws {Error} If the app cannot be activated\n */\ncommands.activateApp = async function activateApp (appId) {\n  this.log.debug(`Activating '${appId}'`);\n  const apiLevel = await this.adb.getApiLevel();\n  // Fallback to Monkey in older APIs\n  if (apiLevel < 24) {\n    // The monkey command could raise an issue as https://stackoverflow.com/questions/44860475/how-to-use-the-monkey-command-with-an-android-system-that-doesnt-have-physical\n    // but '--pct-syskeys 0' could cause another background process issue. https://github.com/appium/appium/issues/16941#issuecomment-1129837285\n    const cmd = ['monkey',\n      '-p', appId,\n      '-c', 'android.intent.category.LAUNCHER',\n      '1'];\n    let output = '';\n    try {\n      output = await this.adb.shell(cmd);\n      this.log.debug(`Command stdout: ${output}`);\n    } catch (e) {\n      this.log.errorAndThrow(`Cannot activate '${appId}'. Original error: ${e.message}`);\n    }\n    if (output.includes('monkey aborted')) {\n      this.log.errorAndThrow(`Cannot activate '${appId}'. Are you sure it is installed?`);\n    }\n    return;\n  }\n\n  let activityName = await this.adb.resolveLaunchableActivity(appId);\n  if (activityName === RESOLVER_ACTIVITY_NAME) {\n    // https://github.com/appium/appium/issues/17128\n    this.log.debug(\n      `The launchable activity name of '${appId}' was resolved to '${activityName}'. ` +\n      `Switching the resolver to not use cmd`\n    );\n    activityName = await this.adb.resolveLaunchableActivity(appId, {preferCmd: false});\n  }\n\n  const stdout = await this.adb.shell([\n    'am', (apiLevel < 26) ? 'start' : 'start-activity',\n    '-a', 'android.intent.action.MAIN',\n    '-c', 'android.intent.category.LAUNCHER',\n    // FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_RESET_TASK_IF_NEEDED\n    // https://developer.android.com/reference/android/content/Intent#FLAG_ACTIVITY_NEW_TASK\n    // https://developer.android.com/reference/android/content/Intent#FLAG_ACTIVITY_RESET_TASK_IF_NEEDED\n    '-f', '0x10200000',\n    '-n', activityName,\n  ]);\n  this.log.debug(stdout);\n  if (/^error:/mi.test(stdout)) {\n    throw new Error(`Cannot activate '${appId}'. Original error: ${stdout}`);\n  }\n};\n\n/**\n * @typedef {Object} MobileActivateAppOptions\n * @property {string} appId - Application package identifier. Must be always provided.\n */\n\n/**\n * Activates the given application or launches it if necessary.\n * The action literally simulates\n * clicking the corresponding application icon on the dashboard.\n *\n * @param {MobileActivateAppOptions} opts\n * @throws {Error} If the app cannot be activated\n */\ncommands.mobileActivateApp = async function mobileActivateApp (opts = {}) {\n  const { appId } = requireArgs('appId', opts);\n  return await this.activateApp(appId);\n};\n\n/**\n * @typedef {Object} UninstallOptions\n * @property {number} timeout [20000] - The count of milliseconds to wait until the\n *                                      app is uninstalled.\n * @property {boolean} keepData [false] - Set to true in order to keep the\n *                                        application data and cache folders after uninstall.\n */\n\n/**\n * Remove the corresponding application if is installed.\n * The call is ignored if the app is not installed.\n *\n * @param {string} appId - Application package identifier\n * @param {?UninstallOptions} options - The set of removal options\n * @returns {boolean} True if the package was found on the device and\n *                    successfully uninstalled.\n */\ncommands.removeApp = async function removeApp (appId, options = {}) {\n  return await this.adb.uninstallApk(appId, options);\n};\n\n/**\n * @typedef {Object} MobileRemoveAppOptions\n * @property {string} appId - Application package identifier. Must be always provided.\n */\n\n/**\n * Remove the corresponding application if is installed.\n * The call is ignored if the app is not installed.\n *\n * @param {MobileRemoveAppOptions} opts\n * @returns {boolean} Same as in `removeApp`\n */\ncommands.mobileRemoveApp = async function mobileRemoveApp (opts = {}) {\n  const { appId } = requireArgs('appId', opts);\n  return await this.removeApp(appId, opts);\n};\n\n/**\n * @typedef {Object} TerminateOptions\n * @property {number|string} timeout [500] - The count of milliseconds to wait until the\n *                                           app is terminated.\n */\n\n/**\n * Terminates the app if it is running.\n *\n * @param {string} appId - Application package identifier\n * @param {?TerminateOptions} options - The set of application termination options\n * @returns {boolean} True if the app has been successfully terminated.\n * @throws {Error} if the app has not been terminated within the given timeout.\n */\ncommands.terminateApp = async function terminateApp (appId, options = {}) {\n  this.log.info(`Terminating '${appId}'`);\n  if (!(await this.adb.processExists(appId))) {\n    this.log.info(`The app '${appId}' is not running`);\n    return false;\n  }\n  await this.adb.forceStop(appId);\n  const timeout = util.hasValue(options.timeout) && !isNaN(options.timeout) ? parseInt(options.timeout, 10) : 500;\n  try {\n    await waitForCondition(async () => await this.queryAppState(appId) <= APP_STATE.NOT_RUNNING,\n      {waitMs: timeout, intervalMs: 100});\n  } catch (e) {\n    this.log.errorAndThrow(`'${appId}' is still running after ${timeout}ms timeout`);\n  }\n  this.log.info(`'${appId}' has been successfully terminated`);\n  return true;\n};\n\n/**\n * @typedef {Object} MobileTerminateAppOptions\n * @property {string} appId - Application package identifier. Must be always provided.\n * @property {number|string} timeout [500] - The count of milliseconds to wait until the\n *                                           app is terminated.\n */\n\n/**\n * Terminates the app if it is running.\n *\n * @param {MobileTerminateAppOptions} opts\n * @returns {boolean} Same as in `terminateApp`\n * @throws {Error} if the app has not been terminated within the given timeout.\n */\ncommands.mobileTerminateApp = async function mobileTerminateApp (opts = {}) {\n  const { appId } = requireArgs('appId', opts);\n  return await this.terminateApp(appId, opts);\n};\n\n/**\n * @typedef {Object} InstallOptions\n * @property {number} timeout [60000] - The count of milliseconds to wait until the\n *                                      app is installed.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} replace [true] - Set it to false if you don't want\n *                                      the application to be upgraded/reinstalled\n *                                      if it is already present on the device.\n */\n\n/**\n * Installs the given application to the device under test\n *\n * @param {string} appPath - The local apk path or a remote url\n * @param {?InstallOptions} options - The set of installation options\n * @throws {Error} if the given apk does not exist or is not reachable\n */\ncommands.installApp = async function installApp (appPath, options = {}) {\n  const localPath = await this.helpers.configureApp(appPath, APP_EXTENSIONS);\n  await this.adb.install(localPath, options);\n};\n\n/**\n * @typedef {Object} MobileInstallAppOptions\n * @property {string} appPath - The local apk path or a remote url. Must be always provided.\n * @property {number} timeout [60000] - The count of milliseconds to wait until the\n *                                      app is installed.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} replace [true] - Set it to false if you don't want\n *                                      the application to be upgraded/reinstalled\n *                                      if it is already present on the device.\n */\n\n/**\n * Installs the given application to the device under test\n *\n * @param {MobileInstallAppOptions} opts\n * @throws {Error} if the given apk does not exist or is not reachable\n */\ncommands.mobileInstallApp = async function mobileInstallApp (opts = {}) {\n  const { appPath } = requireArgs('appPath', opts);\n  return await this.installApp(appPath, opts);\n};\n\n/**\n * @typedef {Object} ClearAppOptions\n * @property {!string} appId The identifier of the application package to be cleared\n */\n\n/**\n * Deletes all data associated with a package.\n *\n * @param {ClearAppOptions} opts\n * @throws {Error} If cleaning of the app data fails\n */\ncommands.mobileClearApp = async function mobileClearApp (opts = {}) {\n  const {appId} = opts;\n  if (!appId) {\n    throw new errors.InvalidArgumentError(`The 'appId' argument is required`);\n  }\n  await this.adb.clear(appId);\n};\n\nexport { commands };\nexport default commands;\n"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,CAAvB;AACA,MAAMC,sBAAsB,GAAG,mDAA/B;AAEA,MAAMC,QAAQ,GAAG,EAAjB;;;AAQAA,QAAQ,CAACC,cAAT,GAA0B,eAAeA,cAAf,CAA+BC,KAA/B,EAAsC;EAC9D,OAAO,MAAM,KAAKC,GAAL,CAASF,cAAT,CAAwBC,KAAxB,CAAb;AACD,CAFD;;AAeAF,QAAQ,CAACI,oBAAT,GAAgC,eAAeA,oBAAf,CAAqCC,IAAI,GAAG,EAA5C,EAAgD;EAC9E,MAAM;IAAEH;EAAF,IAAY,IAAAI,kBAAA,EAAY,OAAZ,EAAqBD,IAArB,CAAlB;EACA,OAAO,MAAM,KAAKJ,cAAL,CAAoBC,KAApB,CAAb;AACD,CAHD;;AAgBAF,QAAQ,CAACO,aAAT,GAAyB,eAAeA,aAAf,CAA8BL,KAA9B,EAAqC;EAC5D,KAAKM,GAAL,CAASC,IAAT,CAAe,0BAAyBP,KAAM,GAA9C;;EACA,IAAI,EAAC,MAAM,KAAKC,GAAL,CAASF,cAAT,CAAwBC,KAAxB,CAAP,CAAJ,EAA2C;IACzC,OAAOQ,yBAAA,CAAUC,aAAjB;EACD;;EACD,IAAI,EAAC,MAAM,KAAKR,GAAL,CAASS,aAAT,CAAuBV,KAAvB,CAAP,CAAJ,EAA0C;IACxC,OAAOQ,yBAAA,CAAUG,WAAjB;EACD;;EACD,MAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAY,MAAKC,eAAA,CAAEC,YAAF,CAAef,KAAf,CAAsB,GAAvC,CAAhB;;EACA,KAAK,MAAMgB,IAAX,IAAmB,CAAC,MAAM,KAAKf,GAAL,CAASgB,WAAT,EAAP,EAA+BC,KAA/B,CAAqC,IAArC,CAAnB,EAA+D;IAC7D,IAAIN,OAAO,CAACO,IAAR,CAAaH,IAAb,KAAsB,CAAC,eAAD,EAAkB,aAAlB,EAAiCI,IAAjC,CAAuCC,CAAD,IAAOL,IAAI,CAACM,QAAL,CAAcD,CAAd,CAA7C,CAA1B,EAA0F;MACxF,OAAOb,yBAAA,CAAUe,qBAAjB;IACD;EACF;;EACD,OAAOf,yBAAA,CAAUgB,qBAAjB;AACD,CAfD;;AA4BA1B,QAAQ,CAAC2B,mBAAT,GAA+B,eAAeA,mBAAf,CAAoCtB,IAAI,GAAG,EAA3C,EAA+C;EAC5E,MAAM;IAAEH;EAAF,IAAY,IAAAI,kBAAA,EAAY,OAAZ,EAAqBD,IAArB,CAAlB;EACA,OAAO,MAAM,KAAKE,aAAL,CAAmBL,KAAnB,CAAb;AACD,CAHD;;AAaAF,QAAQ,CAAC4B,WAAT,GAAuB,eAAeA,WAAf,CAA4B1B,KAA5B,EAAmC;EACxD,KAAKM,GAAL,CAASqB,KAAT,CAAgB,eAAc3B,KAAM,GAApC;EACA,MAAM4B,QAAQ,GAAG,MAAM,KAAK3B,GAAL,CAAS4B,WAAT,EAAvB;;EAEA,IAAID,QAAQ,GAAG,EAAf,EAAmB;IAGjB,MAAME,GAAG,GAAG,CAAC,QAAD,EACV,IADU,EACJ9B,KADI,EAEV,IAFU,EAEJ,kCAFI,EAGV,GAHU,CAAZ;IAIA,IAAI+B,MAAM,GAAG,EAAb;;IACA,IAAI;MACFA,MAAM,GAAG,MAAM,KAAK9B,GAAL,CAAS+B,KAAT,CAAeF,GAAf,CAAf;MACA,KAAKxB,GAAL,CAASqB,KAAT,CAAgB,mBAAkBI,MAAO,EAAzC;IACD,CAHD,CAGE,OAAOE,CAAP,EAAU;MACV,KAAK3B,GAAL,CAAS4B,aAAT,CAAwB,oBAAmBlC,KAAM,sBAAqBiC,CAAC,CAACE,OAAQ,EAAhF;IACD;;IACD,IAAIJ,MAAM,CAACT,QAAP,CAAgB,gBAAhB,CAAJ,EAAuC;MACrC,KAAKhB,GAAL,CAAS4B,aAAT,CAAwB,oBAAmBlC,KAAM,kCAAjD;IACD;;IACD;EACD;;EAED,IAAIoC,YAAY,GAAG,MAAM,KAAKnC,GAAL,CAASoC,yBAAT,CAAmCrC,KAAnC,CAAzB;;EACA,IAAIoC,YAAY,KAAKvC,sBAArB,EAA6C;IAE3C,KAAKS,GAAL,CAASqB,KAAT,CACG,oCAAmC3B,KAAM,sBAAqBoC,YAAa,KAA5E,GACC,uCAFH;IAIAA,YAAY,GAAG,MAAM,KAAKnC,GAAL,CAASoC,yBAAT,CAAmCrC,KAAnC,EAA0C;MAACsC,SAAS,EAAE;IAAZ,CAA1C,CAArB;EACD;;EAED,MAAMC,MAAM,GAAG,MAAM,KAAKtC,GAAL,CAAS+B,KAAT,CAAe,CAClC,IADkC,EAC3BJ,QAAQ,GAAG,EAAZ,GAAkB,OAAlB,GAA4B,gBADA,EAElC,IAFkC,EAE5B,4BAF4B,EAGlC,IAHkC,EAG5B,kCAH4B,EAOlC,IAPkC,EAO5B,YAP4B,EAQlC,IARkC,EAQ5BQ,YAR4B,CAAf,CAArB;EAUA,KAAK9B,GAAL,CAASqB,KAAT,CAAeY,MAAf;;EACA,IAAI,YAAYpB,IAAZ,CAAiBoB,MAAjB,CAAJ,EAA8B;IAC5B,MAAM,IAAIC,KAAJ,CAAW,oBAAmBxC,KAAM,sBAAqBuC,MAAO,EAAhE,CAAN;EACD;AACF,CAhDD;;AA+DAzC,QAAQ,CAAC2C,iBAAT,GAA6B,eAAeA,iBAAf,CAAkCtC,IAAI,GAAG,EAAzC,EAA6C;EACxE,MAAM;IAAEH;EAAF,IAAY,IAAAI,kBAAA,EAAY,OAAZ,EAAqBD,IAArB,CAAlB;EACA,OAAO,MAAM,KAAKuB,WAAL,CAAiB1B,KAAjB,CAAb;AACD,CAHD;;AAsBAF,QAAQ,CAAC4C,SAAT,GAAqB,eAAeA,SAAf,CAA0B1C,KAA1B,EAAiC2C,OAAO,GAAG,EAA3C,EAA+C;EAClE,OAAO,MAAM,KAAK1C,GAAL,CAAS2C,YAAT,CAAsB5C,KAAtB,EAA6B2C,OAA7B,CAAb;AACD,CAFD;;AAgBA7C,QAAQ,CAAC+C,eAAT,GAA2B,eAAeA,eAAf,CAAgC1C,IAAI,GAAG,EAAvC,EAA2C;EACpE,MAAM;IAAEH;EAAF,IAAY,IAAAI,kBAAA,EAAY,OAAZ,EAAqBD,IAArB,CAAlB;EACA,OAAO,MAAM,KAAKuC,SAAL,CAAe1C,KAAf,EAAsBG,IAAtB,CAAb;AACD,CAHD;;AAmBAL,QAAQ,CAACgD,YAAT,GAAwB,eAAeA,YAAf,CAA6B9C,KAA7B,EAAoC2C,OAAO,GAAG,EAA9C,EAAkD;EACxE,KAAKrC,GAAL,CAASC,IAAT,CAAe,gBAAeP,KAAM,GAApC;;EACA,IAAI,EAAE,MAAM,KAAKC,GAAL,CAASS,aAAT,CAAuBV,KAAvB,CAAR,CAAJ,EAA4C;IAC1C,KAAKM,GAAL,CAASC,IAAT,CAAe,YAAWP,KAAM,kBAAhC;IACA,OAAO,KAAP;EACD;;EACD,MAAM,KAAKC,GAAL,CAAS8C,SAAT,CAAmB/C,KAAnB,CAAN;EACA,MAAMgD,OAAO,GAAGC,aAAA,CAAKC,QAAL,CAAcP,OAAO,CAACK,OAAtB,KAAkC,CAACG,KAAK,CAACR,OAAO,CAACK,OAAT,CAAxC,GAA4DI,QAAQ,CAACT,OAAO,CAACK,OAAT,EAAkB,EAAlB,CAApE,GAA4F,GAA5G;;EACA,IAAI;IACF,MAAM,IAAAK,0BAAA,EAAiB,YAAY,OAAM,KAAKhD,aAAL,CAAmBL,KAAnB,CAAN,KAAmCQ,yBAAA,CAAUG,WAA1E,EACJ;MAAC2C,MAAM,EAAEN,OAAT;MAAkBO,UAAU,EAAE;IAA9B,CADI,CAAN;EAED,CAHD,CAGE,OAAOtB,CAAP,EAAU;IACV,KAAK3B,GAAL,CAAS4B,aAAT,CAAwB,IAAGlC,KAAM,4BAA2BgD,OAAQ,YAApE;EACD;;EACD,KAAK1C,GAAL,CAASC,IAAT,CAAe,IAAGP,KAAM,oCAAxB;EACA,OAAO,IAAP;AACD,CAhBD;;AAgCAF,QAAQ,CAAC0D,kBAAT,GAA8B,eAAeA,kBAAf,CAAmCrD,IAAI,GAAG,EAA1C,EAA8C;EAC1E,MAAM;IAAEH;EAAF,IAAY,IAAAI,kBAAA,EAAY,OAAZ,EAAqBD,IAArB,CAAlB;EACA,OAAO,MAAM,KAAK2C,YAAL,CAAkB9C,KAAlB,EAAyBG,IAAzB,CAAb;AACD,CAHD;;AA6BAL,QAAQ,CAAC2D,UAAT,GAAsB,eAAeA,UAAf,CAA2BC,OAA3B,EAAoCf,OAAO,GAAG,EAA9C,EAAkD;EACtE,MAAMgB,SAAS,GAAG,MAAM,KAAKC,OAAL,CAAaC,YAAb,CAA0BH,OAA1B,EAAmC9D,cAAnC,CAAxB;EACA,MAAM,KAAKK,GAAL,CAAS6D,OAAT,CAAiBH,SAAjB,EAA4BhB,OAA5B,CAAN;AACD,CAHD;;AA6BA7C,QAAQ,CAACiE,gBAAT,GAA4B,eAAeA,gBAAf,CAAiC5D,IAAI,GAAG,EAAxC,EAA4C;EACtE,MAAM;IAAEuD;EAAF,IAAc,IAAAtD,kBAAA,EAAY,SAAZ,EAAuBD,IAAvB,CAApB;EACA,OAAO,MAAM,KAAKsD,UAAL,CAAgBC,OAAhB,EAAyBvD,IAAzB,CAAb;AACD,CAHD;;AAgBAL,QAAQ,CAACkE,cAAT,GAA0B,eAAeA,cAAf,CAA+B7D,IAAI,GAAG,EAAtC,EAA0C;EAClE,MAAM;IAACH;EAAD,IAAUG,IAAhB;;EACA,IAAI,CAACH,KAAL,EAAY;IACV,MAAM,IAAIiE,cAAA,CAAOC,oBAAX,CAAiC,kCAAjC,CAAN;EACD;;EACD,MAAM,KAAKjE,GAAL,CAASkE,KAAT,CAAenE,KAAf,CAAN;AACD,CAND;;eASeF,Q"}