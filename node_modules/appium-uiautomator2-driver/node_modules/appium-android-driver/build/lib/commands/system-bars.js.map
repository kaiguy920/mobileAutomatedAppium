{"version":3,"file":"system-bars.js","names":["WINDOW_TITLE_PATTERN","FRAME_PATTERN","VIEW_VISIBILITY_PATTERN","VIEW_VISIBLE","STATUS_BAR_WINDOW_NAME_PREFIX","NAVIGATION_BAR_WINDOW_NAME_PREFIX","DEFAULT_WINDOW_PROPERTIES","visible","x","y","width","height","commands","parseWindowProperties","name","props","log","result","_","cloneDeep","propLines","join","frameMatch","exec","debug","Error","parseFloat","visibilityMatch","parseInt","parseWindows","lines","windows","currentWindowName","line","split","map","trimEnd","match","trim","length","isArray","push","isEmpty","statusBar","navigationBar","toPairs","startsWith","unmatchedWindows","filter","isNil","window","namePrefix","info","keys","getSystemBars","stdout","adb","shell","e","message"],"sources":["../../../lib/commands/system-bars.js"],"sourcesContent":["import _ from 'lodash';\n\nconst WINDOW_TITLE_PATTERN = /^\\s+Window\\s#\\d+\\sWindow\\{[0-9a-f]+\\s\\w+\\s([\\w-]+)\\}:$/;\nconst FRAME_PATTERN = /\\bm?[Ff]rame=\\[([0-9.-]+),([0-9.-]+)\\]\\[([0-9.-]+),([0-9.-]+)\\]/;\nconst VIEW_VISIBILITY_PATTERN = /\\bmViewVisibility=(0x[0-9a-fA-F]+)/;\n// https://developer.android.com/reference/android/view/View#VISIBLE\nconst VIEW_VISIBLE = 0x0;\nconst STATUS_BAR_WINDOW_NAME_PREFIX = 'StatusBar';\nconst NAVIGATION_BAR_WINDOW_NAME_PREFIX = 'NavigationBar';\nconst DEFAULT_WINDOW_PROPERTIES = {\n  visible: false,\n  x: 0, y: 0, width: 0, height: 0,\n};\n\nconst commands = {};\n\n/**\n * @typedef {Object} WindowProperties\n * @property {boolean} visible Whether the window is visible\n * @property {number} x Window x coordinate\n * @property {number} y Window y coordinate\n * @property {number} width Window width\n * @property {number} height Window height\n */\n\n/**\n * Parses window properties from adb dumpsys output\n *\n * @param {string} name The name of the window whose properties are being parsed\n * @param {Array<string>} props The list of particular window property lines.\n * Check the corresponding unit tests for more details on the input format.\n * @param {Object?} log Logger instance\n * @returns {WindowProperties} Parsed properties object\n * @throws {Error} If there was an issue while parsing the properties string\n */\nfunction parseWindowProperties (name, props, log = null) {\n  const result = _.cloneDeep(DEFAULT_WINDOW_PROPERTIES);\n  const propLines = props.join('\\n');\n  const frameMatch = FRAME_PATTERN.exec(propLines);\n  if (!frameMatch) {\n    log?.debug(propLines);\n    throw new Error(`Cannot parse the frame size from '${name}' window properties`);\n  }\n  result.x = parseFloat(frameMatch[1]);\n  result.y = parseFloat(frameMatch[2]);\n  result.width = parseFloat(frameMatch[3]) - result.x;\n  result.height = parseFloat(frameMatch[4]) - result.y;\n  const visibilityMatch = VIEW_VISIBILITY_PATTERN.exec(propLines);\n  if (!visibilityMatch) {\n    log?.debug(propLines);\n    throw new Error(`Cannot parse the visibility value from '${name}' window properties`);\n  }\n  result.visible = parseInt(visibilityMatch[1], 16) === VIEW_VISIBLE;\n  return result;\n}\n\n/**\n * Extracts status and navigation bar information from the window manager output.\n *\n * @param {Array<string>} lines Output from dumpsys command.\n * Check the corresponding unit tests for more details on the input format.\n * @param {Object?} log Logger instance\n * @return {Object} An object containing two items where keys are statusBar and navigationBar,\n * and values are corresponding WindowProperties objects\n * @throws {Error} If no window properties could be parsed\n */\nfunction parseWindows (lines, log = null) {\n  const windows = {};\n  let currentWindowName = null;\n  for (const line of lines.split('\\n').map(_.trimEnd)) {\n    const match = WINDOW_TITLE_PATTERN.exec(line);\n    if (match) {\n      currentWindowName = match[1];\n      windows[currentWindowName] = [];\n      continue;\n    }\n    if (_.trim(line).length === 0) {\n      currentWindowName = null;\n      continue;\n    }\n\n    if (currentWindowName && _.isArray(windows[currentWindowName])) {\n      windows[currentWindowName].push(line);\n    }\n  }\n  if (_.isEmpty(windows)) {\n    log?.debug(lines.join('\\n'));\n    throw new Error('Cannot parse any window information from the dumpsys output');\n  }\n\n  const result = {statusBar: null, navigationBar: null};\n  for (const [name, props] of _.toPairs(windows)) {\n    if (name.startsWith(STATUS_BAR_WINDOW_NAME_PREFIX)) {\n      result.statusBar = parseWindowProperties(name, props, log);\n    } else if (name.startsWith(NAVIGATION_BAR_WINDOW_NAME_PREFIX)) {\n      result.navigationBar = parseWindowProperties(name, props, log);\n    }\n  }\n  const unmatchedWindows = [\n    ['statusBar', STATUS_BAR_WINDOW_NAME_PREFIX],\n    ['navigationBar', NAVIGATION_BAR_WINDOW_NAME_PREFIX]\n  ].filter(([name]) => _.isNil(result[name]));\n  for (const [window, namePrefix] of unmatchedWindows) {\n    log?.info(`No windows have been found whose title matches to ` +\n      `'${namePrefix}'. Assuming it is invisible. ` +\n      `Only the following windows are available: ${_.keys(windows)}`);\n    result[window] = _.cloneDeep(DEFAULT_WINDOW_PROPERTIES);\n  }\n  return result;\n}\n\ncommands.getSystemBars = async function getSystemBars () {\n  let stdout;\n  try {\n    stdout = await this.adb.shell(['dumpsys', 'window', 'windows']);\n  } catch (e) {\n    throw new Error(`Cannot retrieve system bars details. Original error: ${e.message}`);\n  }\n  return parseWindows(stdout, this.log);\n};\n\n// for unit tests\nexport { parseWindows, parseWindowProperties };\nexport default commands;\n"],"mappings":"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"}