{"version":3,"file":"log.js","names":["GET_SERVER_LOGS_FEATURE","commands","helpers","extensions","WEBSOCKET_ENDPOINT","sessionId","DEFAULT_WS_PATHNAME_PREFIX","toLogRecord","timestamp","level","message","supportedLogTypes","logcat","description","getter","self","adb","getLogcatLogs","bugreport","output","Date","now","split","os","EOL","map","x","server","ensureFeatureEnabled","log","unwrap","record","_","isEmpty","prefix","mobileStartLogsBroadcast","pathname","getWebSocketHandlers","debug","info","wss","WebSocket","Server","noServer","on","ws","req","remoteIp","headers","connection","remoteAddress","_logcatWebsocketListener","logRecord","readyState","OPEN","send","setLogcatListener","code","reason","removeLogcatListener","ign","closeMsg","toString","addWebSocketHandler","mobileStopLogsBroadcast","removeWebSocketHandler","getLogTypes","nativeLogTypes","BaseDriver","prototype","call","isWebContext","webLogTypes","chromedriver","jwproxy","command","getLog","logType","keys","includes","type","Object","assign"],"sources":["../../../lib/commands/log.js"],"sourcesContent":["import log from '../logger';\nimport os from 'os';\nimport _ from 'lodash';\nimport WebSocket from 'ws';\nimport { DEFAULT_WS_PATHNAME_PREFIX, BaseDriver } from 'appium/driver';\n\nconst GET_SERVER_LOGS_FEATURE = 'get_server_logs';\n\nlet commands = {}, helpers = {}, extensions = {};\n\nconst WEBSOCKET_ENDPOINT = (sessionId) => `${DEFAULT_WS_PATHNAME_PREFIX}/session/${sessionId}/appium/device/logcat`;\n\n// https://github.com/SeleniumHQ/selenium/blob/0d425676b3c9df261dd641917f867d4d5ce7774d/java/client/src/org/openqa/selenium/logging/LogEntry.java\nfunction toLogRecord (timestamp, level, message) {\n  return {\n    timestamp,\n    level,\n    message,\n  };\n}\n\nextensions.supportedLogTypes = {\n  logcat: {\n    description: 'Logs for Android applications on real device and emulators via ADB',\n    getter: async (self) => await self.adb.getLogcatLogs(),\n  },\n  bugreport: {\n    description: `'adb bugreport' output for advanced issues diagnostic`,\n    getter: async (self) => {\n      const output = await self.adb.bugreport();\n      const timestamp = Date.now();\n      return output.split(os.EOL)\n        .map((x) => toLogRecord(timestamp, 'ALL', x));\n    },\n  },\n  server: {\n    description: 'Appium server logs',\n    getter: (self) => {\n      self.ensureFeatureEnabled(GET_SERVER_LOGS_FEATURE);\n      const timestamp = Date.now();\n      return log.unwrap().record\n        .map((x) => toLogRecord(timestamp,\n                                'ALL',\n                                _.isEmpty(x.prefix) ? x.message : `[${x.prefix}] ${x.message}`)\n        );\n    },\n  },\n};\n\n/**\n * Starts Android logcat broadcast websocket on the same host and port\n * where Appium server is running at `/ws/session/:sessionId:/appium/logcat` endpoint. The method\n * will return immediately if the web socket is already listening.\n *\n * Each connected websocket listener will receive logcat log lines\n * as soon as they are visible to Appium.\n */\ncommands.mobileStartLogsBroadcast = async function mobileStartLogsBroadcast () {\n  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);\n  if (!_.isEmpty(await this.server.getWebSocketHandlers(pathname))) {\n    log.debug(`The logcat broadcasting web socket server is already listening at ${pathname}`);\n    return;\n  }\n\n  log.info(`Assigning logcat broadcasting web socket server to ${pathname}`);\n  // https://github.com/websockets/ws/blob/master/doc/ws.md\n  const wss = new WebSocket.Server({\n    noServer: true,\n  });\n  wss.on('connection', (ws, req) => {\n    if (req) {\n      const remoteIp = _.isEmpty(req.headers['x-forwarded-for'])\n        ? req.connection?.remoteAddress\n        : req.headers['x-forwarded-for'];\n      log.debug(`Established a new logcat listener web socket connection from ${remoteIp}`);\n    } else {\n      log.debug('Established a new logcat listener web socket connection');\n    }\n\n    if (_.isEmpty(this._logcatWebsocketListener)) {\n      this._logcatWebsocketListener = (logRecord) => {\n        if (ws?.readyState === WebSocket.OPEN) {\n          ws.send(logRecord.message);\n        }\n      };\n    }\n    this.adb.setLogcatListener(this._logcatWebsocketListener);\n\n    ws.on('close', (code, reason) => {\n      if (!_.isEmpty(this._logcatWebsocketListener)) {\n        try {\n          this.adb.removeLogcatListener(this._logcatWebsocketListener);\n        } catch (ign) {}\n        this._logcatWebsocketListener = null;\n      }\n\n      let closeMsg = 'Logcat listener web socket is closed.';\n      if (!_.isEmpty(code)) {\n        closeMsg += ` Code: ${code}.`;\n      }\n      if (!_.isEmpty(reason)) {\n        closeMsg += ` Reason: ${reason.toString()}.`;\n      }\n      log.debug(closeMsg);\n    });\n  });\n  await this.server.addWebSocketHandler(pathname, wss);\n};\n\n/**\n * Stops the previously started logcat broadcasting wesocket server.\n * This method will return immediately if no server is running.\n */\ncommands.mobileStopLogsBroadcast = async function mobileStopLogsBroadcast () {\n  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);\n  if (_.isEmpty(await this.server.getWebSocketHandlers(pathname))) {\n    return;\n  }\n\n  log.debug('Stopping the logcat broadcasting web socket server');\n  await this.server.removeWebSocketHandler(pathname);\n};\n\ncommands.getLogTypes = async function getLogTypes () {\n  const nativeLogTypes = await BaseDriver.prototype.getLogTypes.call(this);\n  if (this.isWebContext()) {\n    const webLogTypes = await this.chromedriver.jwproxy.command('/log/types', 'GET');\n    return [...nativeLogTypes, ...webLogTypes];\n  }\n  return nativeLogTypes;\n};\n\ncommands.getLog = async function getLog (logType) {\n  if (this.isWebContext() && !_.keys(this.supportedLogTypes).includes(logType)) {\n    return await this.chromedriver.jwproxy.command('/log', 'POST', {type: logType});\n  }\n  return await BaseDriver.prototype.getLog.call(this, logType);\n};\n\nObject.assign(extensions, commands, helpers);\nexport { commands, helpers };\nexport default extensions;\n"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,uBAAuB,GAAG,iBAAhC;AAEA,IAAIC,QAAQ,GAAG,EAAf;AAAA,IAAmBC,OAAO,GAAG,EAA7B;AAAA,IAAiCC,UAAU,GAAG,EAA9C;;;;AAEA,MAAMC,kBAAkB,GAAIC,SAAD,IAAgB,GAAEC,kCAA2B,YAAWD,SAAU,uBAA7F;;AAGA,SAASE,WAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCC,OAAxC,EAAiD;EAC/C,OAAO;IACLF,SADK;IAELC,KAFK;IAGLC;EAHK,CAAP;AAKD;;AAEDP,UAAU,CAACQ,iBAAX,GAA+B;EAC7BC,MAAM,EAAE;IACNC,WAAW,EAAE,oEADP;IAENC,MAAM,EAAE,MAAOC,IAAP,IAAgB,MAAMA,IAAI,CAACC,GAAL,CAASC,aAAT;EAFxB,CADqB;EAK7BC,SAAS,EAAE;IACTL,WAAW,EAAG,uDADL;IAETC,MAAM,EAAE,MAAOC,IAAP,IAAgB;MACtB,MAAMI,MAAM,GAAG,MAAMJ,IAAI,CAACC,GAAL,CAASE,SAAT,EAArB;MACA,MAAMV,SAAS,GAAGY,IAAI,CAACC,GAAL,EAAlB;MACA,OAAOF,MAAM,CAACG,KAAP,CAAaC,WAAA,CAAGC,GAAhB,EACJC,GADI,CACCC,CAAD,IAAOnB,WAAW,CAACC,SAAD,EAAY,KAAZ,EAAmBkB,CAAnB,CADlB,CAAP;IAED;EAPQ,CALkB;EAc7BC,MAAM,EAAE;IACNd,WAAW,EAAE,oBADP;IAENC,MAAM,EAAGC,IAAD,IAAU;MAChBA,IAAI,CAACa,oBAAL,CAA0B5B,uBAA1B;MACA,MAAMQ,SAAS,GAAGY,IAAI,CAACC,GAAL,EAAlB;MACA,OAAOQ,eAAA,CAAIC,MAAJ,GAAaC,MAAb,CACJN,GADI,CACCC,CAAD,IAAOnB,WAAW,CAACC,SAAD,EACC,KADD,EAECwB,eAAA,CAAEC,OAAF,CAAUP,CAAC,CAACQ,MAAZ,IAAsBR,CAAC,CAAChB,OAAxB,GAAmC,IAAGgB,CAAC,CAACQ,MAAO,KAAIR,CAAC,CAAChB,OAAQ,EAF9D,CADlB,CAAP;IAKD;EAVK;AAdqB,CAA/B;;AAoCAT,QAAQ,CAACkC,wBAAT,GAAoC,eAAeA,wBAAf,GAA2C;EAC7E,MAAMC,QAAQ,GAAGhC,kBAAkB,CAAC,KAAKC,SAAN,CAAnC;;EACA,IAAI,CAAC2B,eAAA,CAAEC,OAAF,CAAU,MAAM,KAAKN,MAAL,CAAYU,oBAAZ,CAAiCD,QAAjC,CAAhB,CAAL,EAAkE;IAChEP,eAAA,CAAIS,KAAJ,CAAW,qEAAoEF,QAAS,EAAxF;;IACA;EACD;;EAEDP,eAAA,CAAIU,IAAJ,CAAU,sDAAqDH,QAAS,EAAxE;;EAEA,MAAMI,GAAG,GAAG,IAAIC,WAAA,CAAUC,MAAd,CAAqB;IAC/BC,QAAQ,EAAE;EADqB,CAArB,CAAZ;EAGAH,GAAG,CAACI,EAAJ,CAAO,YAAP,EAAqB,CAACC,EAAD,EAAKC,GAAL,KAAa;IAChC,IAAIA,GAAJ,EAAS;MAAA;;MACP,MAAMC,QAAQ,GAAGf,eAAA,CAAEC,OAAF,CAAUa,GAAG,CAACE,OAAJ,CAAY,iBAAZ,CAAV,uBACbF,GAAG,CAACG,UADS,oDACb,gBAAgBC,aADH,GAEbJ,GAAG,CAACE,OAAJ,CAAY,iBAAZ,CAFJ;;MAGAnB,eAAA,CAAIS,KAAJ,CAAW,gEAA+DS,QAAS,EAAnF;IACD,CALD,MAKO;MACLlB,eAAA,CAAIS,KAAJ,CAAU,yDAAV;IACD;;IAED,IAAIN,eAAA,CAAEC,OAAF,CAAU,KAAKkB,wBAAf,CAAJ,EAA8C;MAC5C,KAAKA,wBAAL,GAAiCC,SAAD,IAAe;QAC7C,IAAI,CAAAP,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEQ,UAAJ,MAAmBZ,WAAA,CAAUa,IAAjC,EAAuC;UACrCT,EAAE,CAACU,IAAH,CAAQH,SAAS,CAAC1C,OAAlB;QACD;MACF,CAJD;IAKD;;IACD,KAAKM,GAAL,CAASwC,iBAAT,CAA2B,KAAKL,wBAAhC;IAEAN,EAAE,CAACD,EAAH,CAAM,OAAN,EAAe,CAACa,IAAD,EAAOC,MAAP,KAAkB;MAC/B,IAAI,CAAC1B,eAAA,CAAEC,OAAF,CAAU,KAAKkB,wBAAf,CAAL,EAA+C;QAC7C,IAAI;UACF,KAAKnC,GAAL,CAAS2C,oBAAT,CAA8B,KAAKR,wBAAnC;QACD,CAFD,CAEE,OAAOS,GAAP,EAAY,CAAE;;QAChB,KAAKT,wBAAL,GAAgC,IAAhC;MACD;;MAED,IAAIU,QAAQ,GAAG,uCAAf;;MACA,IAAI,CAAC7B,eAAA,CAAEC,OAAF,CAAUwB,IAAV,CAAL,EAAsB;QACpBI,QAAQ,IAAK,UAASJ,IAAK,GAA3B;MACD;;MACD,IAAI,CAACzB,eAAA,CAAEC,OAAF,CAAUyB,MAAV,CAAL,EAAwB;QACtBG,QAAQ,IAAK,YAAWH,MAAM,CAACI,QAAP,EAAkB,GAA1C;MACD;;MACDjC,eAAA,CAAIS,KAAJ,CAAUuB,QAAV;IACD,CAhBD;EAiBD,CApCD;EAqCA,MAAM,KAAKlC,MAAL,CAAYoC,mBAAZ,CAAgC3B,QAAhC,EAA0CI,GAA1C,CAAN;AACD,CAlDD;;AAwDAvC,QAAQ,CAAC+D,uBAAT,GAAmC,eAAeA,uBAAf,GAA0C;EAC3E,MAAM5B,QAAQ,GAAGhC,kBAAkB,CAAC,KAAKC,SAAN,CAAnC;;EACA,IAAI2B,eAAA,CAAEC,OAAF,CAAU,MAAM,KAAKN,MAAL,CAAYU,oBAAZ,CAAiCD,QAAjC,CAAhB,CAAJ,EAAiE;IAC/D;EACD;;EAEDP,eAAA,CAAIS,KAAJ,CAAU,oDAAV;;EACA,MAAM,KAAKX,MAAL,CAAYsC,sBAAZ,CAAmC7B,QAAnC,CAAN;AACD,CARD;;AAUAnC,QAAQ,CAACiE,WAAT,GAAuB,eAAeA,WAAf,GAA8B;EACnD,MAAMC,cAAc,GAAG,MAAMC,kBAAA,CAAWC,SAAX,CAAqBH,WAArB,CAAiCI,IAAjC,CAAsC,IAAtC,CAA7B;;EACA,IAAI,KAAKC,YAAL,EAAJ,EAAyB;IACvB,MAAMC,WAAW,GAAG,MAAM,KAAKC,YAAL,CAAkBC,OAAlB,CAA0BC,OAA1B,CAAkC,YAAlC,EAAgD,KAAhD,CAA1B;IACA,OAAO,CAAC,GAAGR,cAAJ,EAAoB,GAAGK,WAAvB,CAAP;EACD;;EACD,OAAOL,cAAP;AACD,CAPD;;AASAlE,QAAQ,CAAC2E,MAAT,GAAkB,eAAeA,MAAf,CAAuBC,OAAvB,EAAgC;EAChD,IAAI,KAAKN,YAAL,MAAuB,CAACvC,eAAA,CAAE8C,IAAF,CAAO,KAAKnE,iBAAZ,EAA+BoE,QAA/B,CAAwCF,OAAxC,CAA5B,EAA8E;IAC5E,OAAO,MAAM,KAAKJ,YAAL,CAAkBC,OAAlB,CAA0BC,OAA1B,CAAkC,MAAlC,EAA0C,MAA1C,EAAkD;MAACK,IAAI,EAAEH;IAAP,CAAlD,CAAb;EACD;;EACD,OAAO,MAAMT,kBAAA,CAAWC,SAAX,CAAqBO,MAArB,CAA4BN,IAA5B,CAAiC,IAAjC,EAAuCO,OAAvC,CAAb;AACD,CALD;;AAOAI,MAAM,CAACC,MAAP,CAAc/E,UAAd,EAA0BF,QAA1B,EAAoCC,OAApC;eAEeC,U"}