{"version":3,"file":"streamscreen.js","names":["commands","RECORDING_INTERVAL_SEC","STREAMING_STARTUP_TIMEOUT_MS","GSTREAMER_BINARY","system","isWindows","GST_INSPECT_BINARY","REQUIRED_GST_PLUGINS","avdec_h264","h264parse","jpegenc","tcpserversink","multipartmux","SCREENRECORD_BINARY","GST_TUTORIAL_URL","DEFAULT_HOST","TCP_HOST","DEFAULT_PORT","DEFAULT_QUALITY","DEFAULT_BITRATE","BOUNDARY_STRING","ADB_SCREEN_STREAMING_FEATURE","createStreamingLogger","streamName","udid","logger","getLogger","_","truncate","length","omission","verifyStreamingRequirements","adb","trim","shell","Error","gstreamerCheckPromises","binaryName","push","fs","which","e","B","all","moduleCheckPromises","name","modName","toPairs","stdout","exec","includes","getDeviceInfo","log","output","result","key","pattern","match","debug","parseInt","curDeviceId","initDeviceStreamingProc","deviceInfo","opts","width","height","bitRate","adjustedWidth","adjustedHeight","adjustedBitrate","screenRecordCmd","adbArgs","executable","defaultArgs","deviceStreaming","spawn","path","on","code","signal","isStarted","deviceStreamingLogger","errorsListener","chunk","stderr","toString","startupListener","isEmpty","info","util","quote","waitForCondition","waitMs","intervalMs","errorAndThrow","message","removeListener","initGstreamerPipeline","deviceStreamingProc","quality","tcpPort","considerRotation","logPipelineDetails","gstreamerPipeline","SubProcess","Math","max","fps","stdio","gstreamerLogger","gstOutputListener","didFail","rep","start","checkPortStatus","ign","extractRemoteAddress","req","headers","socket","remoteAddress","connection","mobileStartScreenStreaming","options","ensureFeatureEnabled","host","port","pathname","isUndefined","_screenStreamingProps","kill","mjpegSocket","mjpegServer","resolve","reject","net","createConnection","http","createServer","res","currentPathname","url","parse","writeHead","Connection","write","end","Pragma","pipe","warn","listen","error","timeout","isRunning","stop","destroy","listening","close","mobileStopScreenStreaming","e1"],"sources":["../../../lib/commands/streamscreen.js"],"sourcesContent":["import _ from 'lodash';\nimport { fs, system, logger, util } from 'appium/support';\nimport { exec, SubProcess } from 'teen_process';\nimport { checkPortStatus } from 'portscanner';\nimport http from 'http';\nimport net from 'net';\nimport B from 'bluebird';\nimport { waitForCondition } from 'asyncbox';\nimport { spawn } from 'child_process';\nimport url from 'url';\n\nconst commands = {};\n\nconst RECORDING_INTERVAL_SEC = 5;\nconst STREAMING_STARTUP_TIMEOUT_MS = 5000;\nconst GSTREAMER_BINARY = `gst-launch-1.0${system.isWindows() ? '.exe' : ''}`;\nconst GST_INSPECT_BINARY = `gst-inspect-1.0${system.isWindows() ? '.exe' : ''}`;\nconst REQUIRED_GST_PLUGINS = {\n  avdec_h264: 'gst-libav',\n  h264parse: 'gst-plugins-bad',\n  jpegenc: 'gst-plugins-good',\n  tcpserversink: 'gst-plugins-base',\n  multipartmux: 'gst-plugins-good',\n};\nconst SCREENRECORD_BINARY = 'screenrecord';\nconst GST_TUTORIAL_URL = 'https://gstreamer.freedesktop.org/documentation/installing/index.html';\nconst DEFAULT_HOST = '127.0.0.1';\nconst TCP_HOST = '127.0.0.1';\nconst DEFAULT_PORT = 8093;\nconst DEFAULT_QUALITY = 70;\nconst DEFAULT_BITRATE = 4000000; // 4 Mbps\nconst BOUNDARY_STRING = '--2ae9746887f170b8cf7c271047ce314c';\n\nconst ADB_SCREEN_STREAMING_FEATURE = 'adb_screen_streaming';\n\nfunction createStreamingLogger (streamName, udid) {\n  return logger.getLogger(`${streamName}@` + _.truncate(udid, {\n    length: 8,\n    omission: '',\n  }));\n}\n\nasync function verifyStreamingRequirements (adb) {\n  if (!_.trim(await adb.shell(['which', SCREENRECORD_BINARY]))) {\n    throw new Error(\n      `The required '${SCREENRECORD_BINARY}' binary is not available on the device under test`);\n  }\n\n  const gstreamerCheckPromises = [];\n  for (const binaryName of [GSTREAMER_BINARY, GST_INSPECT_BINARY]) {\n    gstreamerCheckPromises.push((async () => {\n      try {\n        await fs.which(binaryName);\n      } catch (e) {\n        throw new Error(`The '${binaryName}' binary is not available in the PATH on the host system. ` +\n          `See ${GST_TUTORIAL_URL} for more details on how to install it.`);\n      }\n    })());\n  }\n  await B.all(gstreamerCheckPromises);\n\n  const moduleCheckPromises = [];\n  for (const [name, modName] of _.toPairs(REQUIRED_GST_PLUGINS)) {\n    moduleCheckPromises.push((async () => {\n      const {stdout} = await exec(GST_INSPECT_BINARY, [name]);\n      if (!_.includes(stdout, modName)) {\n        throw new Error(\n          `The required GStreamer plugin '${name}' from '${modName}' module is not installed. ` +\n          `See ${GST_TUTORIAL_URL} for more details on how to install it.`);\n      }\n    })());\n  }\n  await B.all(moduleCheckPromises);\n}\n\nasync function getDeviceInfo (adb, log = null) {\n  const output = await adb.shell(['dumpsys', 'display']);\n  const result = {};\n  for (const [key, pattern] of [\n    ['width', /\\bdeviceWidth=(\\d+)/],\n    ['height', /\\bdeviceHeight=(\\d+)/],\n    ['fps', /\\bfps=(\\d+)/],\n  ]) {\n    const match = pattern.exec(output);\n    if (!match) {\n      log?.debug(output);\n      throw new Error(`Cannot parse the device ${key} from the adb command output. ` +\n        `Check the server log for more details.`);\n    }\n    result[key] = parseInt(match[1], 10);\n  }\n  result.udid = adb.curDeviceId;\n  return result;\n}\n\nasync function initDeviceStreamingProc (adb, log, deviceInfo, opts = {}) {\n  const {\n    width,\n    height,\n    bitRate,\n  } = opts;\n  const adjustedWidth = parseInt(width, 10) || deviceInfo.width;\n  const adjustedHeight = parseInt(height, 10) || deviceInfo.height;\n  const adjustedBitrate = parseInt(bitRate, 10) || DEFAULT_BITRATE;\n  let screenRecordCmd = SCREENRECORD_BINARY +\n    ` --output-format=h264` +\n    // 5 seconds is fine to detect rotation changes\n    ` --time-limit=${RECORDING_INTERVAL_SEC}`;\n  if (width || height) {\n    screenRecordCmd += ` --size=${adjustedWidth}x${adjustedHeight}`;\n  }\n  if (bitRate) {\n    screenRecordCmd += ` --bit-rate=${adjustedBitrate}`;\n  }\n  const adbArgs = [\n    ...adb.executable.defaultArgs,\n    'exec-out',\n    // The loop is required, because by default the maximum record duration\n    // for screenrecord is always limited\n    `while true; do ${screenRecordCmd} -; done`,\n  ];\n  const deviceStreaming = spawn(adb.executable.path, adbArgs);\n  deviceStreaming.on('exit', (code, signal) => {\n    log.debug(`Device streaming process exited with code ${code}, signal ${signal}`);\n  });\n\n  let isStarted = false;\n  const deviceStreamingLogger = createStreamingLogger(SCREENRECORD_BINARY, deviceInfo.udid);\n  const errorsListener = (chunk) => {\n    const stderr = chunk.toString();\n    if (_.trim(stderr)) {\n      deviceStreamingLogger.debug(stderr);\n    }\n  };\n  deviceStreaming.stderr.on('data', errorsListener);\n\n  const startupListener = (chunk) => {\n    if (!isStarted) {\n      isStarted = !_.isEmpty(chunk);\n    }\n  };\n  deviceStreaming.stdout.on('data', startupListener);\n\n  try {\n    log.info(`Starting device streaming: ${util.quote([adb.executable.path, ...adbArgs])}`);\n    await waitForCondition(() => isStarted, {\n      waitMs: STREAMING_STARTUP_TIMEOUT_MS,\n      intervalMs: 300,\n    });\n  } catch (e) {\n    log.errorAndThrow(\n      `Cannot start the screen streaming process. Original error: ${e.message}`);\n  } finally {\n    deviceStreaming.stderr.removeListener('data', errorsListener);\n    deviceStreaming.stdout.removeListener('data', startupListener);\n  }\n  return deviceStreaming;\n}\n\nasync function initGstreamerPipeline (deviceStreamingProc, deviceInfo, log, opts = {}) {\n  const {\n    width,\n    height,\n    quality,\n    tcpPort,\n    considerRotation,\n    logPipelineDetails,\n  } = opts;\n  const adjustedWidth = parseInt(width, 10) || deviceInfo.width;\n  const adjustedHeight = parseInt(height, 10) || deviceInfo.height;\n  const gstreamerPipeline = new SubProcess(GSTREAMER_BINARY, [\n    '-v',\n    'fdsrc', 'fd=0',\n    '!', 'video/x-h264,' +\n      `width=${considerRotation ? Math.max(adjustedWidth, adjustedHeight) : adjustedWidth},` +\n      `height=${considerRotation ? Math.max(adjustedWidth, adjustedHeight) : adjustedHeight},` +\n      `framerate=${deviceInfo.fps}/1,` +\n      'byte-stream=true',\n    '!', 'h264parse',\n    '!', 'queue', 'leaky=downstream',\n    '!', 'avdec_h264',\n    '!', 'queue', 'leaky=downstream',\n    '!', 'jpegenc', `quality=${quality}`,\n    '!', 'multipartmux', `boundary=${BOUNDARY_STRING}`,\n    '!', 'tcpserversink', `host=${TCP_HOST}`, `port=${tcpPort}`,\n  ], {\n    stdio: [deviceStreamingProc.stdout, 'pipe', 'pipe']\n  });\n  gstreamerPipeline.on('exit', (code, signal) => {\n    log.debug(`Pipeline streaming process exited with code ${code}, signal ${signal}`);\n  });\n  const gstreamerLogger = createStreamingLogger('gst', deviceInfo.udid);\n  const gstOutputListener = (stdout, stderr) => {\n    if (_.trim(stderr || stdout)) {\n      gstreamerLogger.debug(stderr || stdout);\n    }\n  };\n  gstreamerPipeline.on('output', gstOutputListener);\n  let didFail = false;\n  try {\n    log.info(`Starting GStreamer pipeline: ${gstreamerPipeline.rep}`);\n    await gstreamerPipeline.start(0);\n    await waitForCondition(async () => {\n      try {\n        return (await checkPortStatus(tcpPort, TCP_HOST)) === 'open';\n      } catch (ign) {\n        return false;\n      }\n    }, {\n      waitMs: STREAMING_STARTUP_TIMEOUT_MS,\n      intervalMs: 300,\n    });\n  } catch (e) {\n    didFail = true;\n    log.errorAndThrow(\n      `Cannot start the screen streaming pipeline. Original error: ${e.message}`);\n  } finally {\n    if (!logPipelineDetails || didFail) {\n      gstreamerPipeline.removeListener('output', gstOutputListener);\n    }\n  }\n  return gstreamerPipeline;\n}\n\nfunction extractRemoteAddress (req) {\n  return req.headers['x-forwarded-for']\n    || req.socket.remoteAddress\n    || req.connection.remoteAddress\n    || req.connection.socket.remoteAddress;\n}\n\n\n/**\n * @typedef {Object} StartScreenStreamingOptions\n *\n * @property {?number} width - The scaled width of the device's screen. If unset then the script will assign it\n * to the actual screen width measured in pixels.\n * @property {?number} height - The scaled height of the device's screen. If unset then the script will assign it\n * to the actual screen height measured in pixels.\n * @property {?number} bitRate - The video bit rate for the video, in bits per second.\n * The default value is 4000000 (4 Mb/s). You can increase the bit rate to improve video quality,\n * but doing so results in larger movie files.\n * @property {?string} host [127.0.0.1] - The IP address/host name to start the MJPEG server on.\n * You can set it to `0.0.0.0` to trigger the broadcast on all available network interfaces.\n * @property {?string} pathname - The HTTP request path the MJPEG server should be available on.\n * If unset then any pathname on the given `host`/`port` combination will work. Note that the value\n * should always start with a single slash: `/`\n * @property {?number} tcpPort [8094] - The port number to start the internal TCP MJPEG broadcast on.\n * This type of broadcast always starts on the loopback interface (`127.0.0.1`).\n * @property {?number} port [8093] - The port number to start the MJPEG server on.\n * @property {?number} quality [70] - The quality value for the streamed JPEG images.\n * This number should be in range [1, 100], where 100 is the best quality.\n * @property {?boolean} considerRotation [false] - If set to `true` then GStreamer pipeline will\n * increase the dimensions of the resulting images to properly fit images in both landscape and\n * portrait orientations. Set it to `true` if the device rotation is not going to be the same during the\n * broadcasting session.\n * @property {?boolean} logPipelineDetails [false] - Whether to log GStreamer pipeline events into\n * the standard log output. Might be useful for debugging purposes.\n */\n\n/**\n * Starts device screen broadcast by creating MJPEG server.\n * Multiple calls to this method have no effect unless the previous streaming\n * session is stopped.\n * This method only works if the `adb_screen_streaming` feature is\n * enabled on the server side.\n *\n * @param {?StartScreenStreamingOptions} options - The available options.\n * @throws {Error} If screen streaming has failed to start or\n * is not supported on the host system or\n * the corresponding server feature is not enabled.\n */\ncommands.mobileStartScreenStreaming = async function mobileStartScreenStreaming (options = {}) {\n  this.ensureFeatureEnabled(ADB_SCREEN_STREAMING_FEATURE);\n\n  const {\n    width,\n    height,\n    bitRate,\n    host = DEFAULT_HOST,\n    port = DEFAULT_PORT,\n    pathname,\n    tcpPort = DEFAULT_PORT + 1,\n    quality = DEFAULT_QUALITY,\n    considerRotation = false,\n    logPipelineDetails = false,\n  } = options;\n\n  if (_.isUndefined(this._screenStreamingProps)) {\n    await verifyStreamingRequirements(this.adb);\n  }\n  if (!_.isEmpty(this._screenStreamingProps)) {\n    this.log.info(`The screen streaming session is already running. ` +\n      `Stop it first in order to start a new one.`);\n    return;\n  }\n  if ((await checkPortStatus(port, host)) === 'open') {\n    this.log.info(`The port #${port} at ${host} is busy. ` +\n      `Assuming the screen streaming is already running`);\n    return;\n  }\n  if ((await checkPortStatus(tcpPort, TCP_HOST)) === 'open') {\n    this.log.errorAndThrow(`The port #${tcpPort} at ${TCP_HOST} is busy. ` +\n      `Make sure there are no leftovers from previous sessions.`);\n  }\n  this._screenStreamingProps = null;\n\n  const deviceInfo = await getDeviceInfo(this.adb, this.log);\n  const deviceStreamingProc = await initDeviceStreamingProc(this.adb, this.log, deviceInfo, {\n    width,\n    height,\n    bitRate,\n  });\n  let gstreamerPipeline;\n  try {\n    gstreamerPipeline = await initGstreamerPipeline(deviceStreamingProc, deviceInfo, this.log, {\n      width,\n      height,\n      quality,\n      tcpPort,\n      considerRotation,\n      logPipelineDetails,\n    });\n  } catch (e) {\n    if (deviceStreamingProc.kill(0)) {\n      deviceStreamingProc.kill();\n    }\n    throw e;\n  }\n\n  let mjpegSocket;\n  let mjpegServer;\n  try {\n    await new B((resolve, reject) => {\n      mjpegSocket = net.createConnection(tcpPort, TCP_HOST, () => {\n        this.log.info(`Successfully connected to MJPEG stream at tcp://${TCP_HOST}:${tcpPort}`);\n        mjpegServer = http.createServer((req, res) => {\n          const remoteAddress = extractRemoteAddress(req);\n          const currentPathname = url.parse(req.url).pathname;\n          this.log.info(`Got an incoming screen bradcasting request from ${remoteAddress} ` +\n            `(${req.headers['user-agent'] || 'User Agent unknown'}) at ${currentPathname}`);\n\n          if (pathname && currentPathname !== pathname) {\n            this.log.info('Rejecting the broadcast request since it does not match the given pathname');\n            res.writeHead(404, {\n              Connection: 'close',\n              'Content-Type': 'text/plain; charset=utf-8',\n            });\n            res.write(`'${currentPathname}' did not match any known endpoints`);\n            res.end();\n            return;\n          }\n\n          this.log.info('Starting MJPEG broadcast');\n          res.writeHead(200, {\n            'Cache-Control': 'no-store, no-cache, must-revalidate, pre-check=0, post-check=0, max-age=0',\n            Pragma: 'no-cache',\n            Connection: 'close',\n            'Content-Type': `multipart/x-mixed-replace; boundary=${BOUNDARY_STRING}`\n          });\n\n          mjpegSocket.pipe(res);\n        });\n        mjpegServer.on('error', (e) => {\n          this.log.warn(e);\n          reject(e);\n        });\n        mjpegServer.on('close', () => {\n          this.log.debug(`MJPEG server at http://${host}:${port} has been closed`);\n        });\n        mjpegServer.on('listening', () => {\n          this.log.info(`Successfully started MJPEG server at http://${host}:${port}`);\n          resolve();\n        });\n        mjpegServer.listen(port, host);\n      });\n      mjpegSocket.on('error', (e) => {\n        this.log.error(e);\n        reject(e);\n      });\n    }).timeout(STREAMING_STARTUP_TIMEOUT_MS,\n      `Cannot connect to the streaming server within ${STREAMING_STARTUP_TIMEOUT_MS}ms`);\n  } catch (e) {\n    if (deviceStreamingProc.kill(0)) {\n      deviceStreamingProc.kill();\n    }\n    if (gstreamerPipeline.isRunning) {\n      await gstreamerPipeline.stop();\n    }\n    if (mjpegSocket) {\n      mjpegSocket.destroy();\n    }\n    if (mjpegServer && mjpegServer.listening) {\n      mjpegServer.close();\n    }\n    throw e;\n  }\n\n  this._screenStreamingProps = {\n    deviceStreamingProc,\n    gstreamerPipeline,\n    mjpegSocket,\n    mjpegServer,\n  };\n};\n\n/**\n * Stop screen streaming.\n * If no screen streaming server has been started then nothing is done.\n */\ncommands.mobileStopScreenStreaming = async function mobileStopScreenStreaming (/* options = {} */) {\n  if (_.isEmpty(this._screenStreamingProps)) {\n    if (!_.isUndefined(this._screenStreamingProps)) {\n      this.log.debug(`Screen streaming is not running. There is nothing to stop`);\n    }\n    return;\n  }\n\n  const {\n    deviceStreamingProc,\n    gstreamerPipeline,\n    mjpegSocket,\n    mjpegServer,\n  } = this._screenStreamingProps;\n\n  try {\n    mjpegSocket.end();\n    if (mjpegServer.listening) {\n      mjpegServer.close();\n    }\n    if (deviceStreamingProc.kill(0)) {\n      deviceStreamingProc.kill('SIGINT');\n    }\n    if (gstreamerPipeline.isRunning) {\n      try {\n        await gstreamerPipeline.stop('SIGINT');\n      } catch (e) {\n        this.log.warn(e);\n        try {\n          await gstreamerPipeline.stop('SIGKILL');\n        } catch (e1) {\n          this.log.error(e1);\n        }\n      }\n    }\n    this.log.info(`Successfully terminated the screen streaming MJPEG server`);\n  } finally {\n    this._screenStreamingProps = null;\n  }\n};\n\n\nexport default commands;\n"],"mappings":"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"}