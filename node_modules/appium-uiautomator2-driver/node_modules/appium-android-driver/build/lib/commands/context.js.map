{"version":3,"file":"context.js","names":["CHROMEDRIVER_AUTODOWNLOAD_FEATURE","commands","helpers","extensions","getCurrentContext","curContext","defaultContextName","getContexts","webviewsMapping","webviewHelpers","getWebViewsMapping","adb","opts","assignContexts","setContext","name","util","hasValue","WEBVIEW_WIN","defaultWebviewName","contexts","_","includes","errors","NoSuchContextError","switchContext","mobileGetContexts","androidDeviceSocket","ensureWebviewsHavePages","webviewDevtoolsPort","enableWebviewDetailsCollection","Object","assign","isChromeSession","webviews","parseWebviewNames","NATIVE_WIN","log","debug","JSON","stringify","isChromedriverContext","startChromedriverProxy","recreateChromeDriverSessions","stopChromedriverProxies","suspendChromedriverProxy","Error","WEBVIEW_BASE","appPackage","isWebContext","context","cd","sessionChromedrivers","setupExistingChromedriver","cloneDeep","chromeUseRunningApp","extractChromeAndroidPackageFromContextName","androidPackage","match","length","chromeAndroidPackage","has","map","wm","webviewName","knownPackage","KNOWN_CHROME_PACKAGE_NAMES","appState","queryAppState","APP_STATE","RUNNING_IN_BACKGROUND","RUNNING_IN_FOREGROUND","info","setupNewChromedriver","curDeviceId","on","Chromedriver","EVENT_CHANGED","msg","state","STATE_STOPPED","onChromedriverStop","chromedriver","proxyReqRes","proxyReq","bind","proxyCommand","jwproxy","command","jwpProxyActive","warn","err","startUnexpectedShutdown","keys","removeAllListeners","stop","message","viewName","CHROMIUM_WIN","shouldDismissChromeWelcome","chromeOptions","isArray","args","dismissChromeWelcome","activity","getCurrentActivity","el","findElOrEls","click","ELEMENT","e","startChromeSession","knownPackages","chromeBundleId","chromeAndroidActivity","appActivity","hasWorkingWebview","restart","getChromedriverPort","portSpec","getPort","B","promisify","PortFinder","port","foundPort","potentialPort","stopPort","parseInt","isChromedriverAutodownloadEnabled","isFeatureEnabled","chromeDriverPort","chromedriverPort","chromedriverPorts","details","getWebviewDetails","undefined","isEmpty","executable","chromedriverExecutable","cmdArgs","chromedriverArgs","verbose","showChromedriverLog","executableDir","chromedriverExecutableDir","mappingPath","chromedriverChromeMappingFile","bundleId","useSystemExecutable","chromedriverUseSystemExecutable","disableBuildCheck","chromedriverDisableBuildCheck","isAutodownloadEnabled","opt","endsWith","merge","caps","createChromedriverCaps","start"],"sources":["../../../lib/commands/context.js"],"sourcesContent":["import _ from 'lodash';\nimport Chromedriver from 'appium-chromedriver';\nimport PortFinder from 'portfinder';\nimport B from 'bluebird';\nimport { util } from 'appium/support';\nimport { errors } from 'appium/driver';\nimport {\n  default as webviewHelpers,\n  NATIVE_WIN, WEBVIEW_BASE, WEBVIEW_WIN, CHROMIUM_WIN, KNOWN_CHROME_PACKAGE_NAMES\n} from '../webview-helpers';\nimport { APP_STATE } from '../android-helpers';\n\nconst CHROMEDRIVER_AUTODOWNLOAD_FEATURE = 'chromedriver_autodownload';\n\nlet commands = {}, helpers = {}, extensions = {};\n\n\n/* -------------------------------\n * Actual MJSONWP command handlers\n * ------------------------------- */\ncommands.getCurrentContext = async function getCurrentContext () { // eslint-disable-line require-await\n  // if the current context is `null`, indicating no context\n  // explicitly set, it is the default context\n  return this.curContext || this.defaultContextName();\n};\n\ncommands.getContexts = async function getContexts () {\n  const webviewsMapping = await webviewHelpers.getWebViewsMapping(this.adb, this.opts);\n  return this.assignContexts(webviewsMapping);\n};\n\ncommands.setContext = async function setContext (name) {\n  if (!util.hasValue(name)) {\n    name = this.defaultContextName();\n  } else if (name === WEBVIEW_WIN) {\n    // handle setContext \"WEBVIEW\"\n    name = this.defaultWebviewName();\n  }\n  // if we're already in the context we want, do nothing\n  if (name === this.curContext) {\n    return;\n  }\n\n  const webviewsMapping = await webviewHelpers.getWebViewsMapping(this.adb, this.opts);\n  const contexts = this.assignContexts(webviewsMapping);\n  // if the context we want doesn't exist, fail\n  if (!_.includes(contexts, name)) {\n    throw new errors.NoSuchContextError();\n  }\n\n  await this.switchContext(name, webviewsMapping);\n  this.curContext = name;\n};\n\n/**\n * @typedef {Object} WebviewsMapping\n * @property {string} proc The name of the Devtools Unix socket\n * @property {string} webview The web view alias. Looks like `WEBVIEW_`\n * prefix plus PID or package name\n * @property {?Object} info Webview information as it is retrieved by\n * /json/version CDP endpoint\n * @property {?Array<Object>} pages Webview pages list as it is retrieved by\n * /json/list CDP endpoint\n * @propery {?string} webviewName An actual webview name for switching context.\n * This value becomes null when failing to find a PID for a webview.\n *\n * The following json demonstrates the example of WebviewsMapping object.\n * Note that `description` in `page` can be an empty string most likely when it comes to Mobile Chrome)\n * {\n *   \"proc\": \"@webview_devtools_remote_22138\",\n *   \"webview\": \"WEBVIEW_22138\",\n *   \"info\": {\n *     \"Android-Package\": \"io.appium.settings\",\n *     \"Browser\": \"Chrome/74.0.3729.185\",\n *     \"Protocol-Version\": \"1.3\",\n *     \"User-Agent\": \"Mozilla/5.0 (Linux; Android 10; Android SDK built for x86 Build/QSR1.190920.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.185 Mobile Safari/537.36\",\n *     \"V8-Version\": \"7.4.288.28\",\n *     \"WebKit-Version\": \"537.36 (@22955682f94ce09336197bfb8dffea991fa32f0d)\",\n *     \"webSocketDebuggerUrl\": \"ws://127.0.0.1:10900/devtools/browser\"\n *   },\n *   \"pages\": [\n *     {\n *       \"description\": \"{\\\"attached\\\":true,\\\"empty\\\":false,\\\"height\\\":1458,\\\"screenX\\\":0,\\\"screenY\\\":336,\\\"visible\\\":true,\\\"width\\\":1080}\",\n *       \"devtoolsFrontendUrl\": \"http://chrome-devtools-frontend.appspot.com/serve_rev/@22955682f94ce09336197bfb8dffea991fa32f0d/inspector.html?ws=127.0.0.1:10900/devtools/page/27325CC50B600D31B233F45E09487B1F\",\n *       \"id\": \"27325CC50B600D31B233F45E09487B1F\",\n *       \"title\": \"Releases · appium/appium · GitHub\",\n *       \"type\": \"page\",\n *       \"url\": \"https://github.com/appium/appium/releases\",\n *       \"webSocketDebuggerUrl\": \"ws://127.0.0.1:10900/devtools/page/27325CC50B600D31B233F45E09487B1F\"\n *     }\n *   ],\n *   \"webviewName\": \"WEBVIEW_com.io.appium.setting\"\n * }\n */\n\n/**\n * Returns a webviewsMapping based on CDP endpoints\n *\n * @return {Array<WebviewsMapping>} webviewsMapping\n */\ncommands.mobileGetContexts = async function mobileGetContexts () {\n  const opts = {\n    androidDeviceSocket: this.opts.androidDeviceSocket,\n    ensureWebviewsHavePages: true,\n    webviewDevtoolsPort: this.opts.webviewDevtoolsPort,\n    enableWebviewDetailsCollection: true\n  };\n  return await webviewHelpers.getWebViewsMapping(this.adb, opts);\n};\n\nhelpers.assignContexts = function assignContexts (webviewsMapping) {\n  const opts = Object.assign({isChromeSession: this.isChromeSession}, this.opts);\n  const webviews = webviewHelpers.parseWebviewNames(webviewsMapping, opts);\n  this.contexts = [NATIVE_WIN, ...webviews];\n  this.log.debug(`Available contexts: ${JSON.stringify(this.contexts)}`);\n  return this.contexts;\n};\n\nhelpers.switchContext = async function switchContext (name, webviewsMapping) {\n  // We have some options when it comes to webviews. If we want a\n  // Chromedriver webview, we can only control one at a time.\n  if (this.isChromedriverContext(name)) {\n    // start proxying commands directly to chromedriver\n    await this.startChromedriverProxy(name, webviewsMapping);\n  } else if (this.isChromedriverContext(this.curContext)) {\n    // if we're moving to a non-chromedriver webview, and our current context\n    // _is_ a chromedriver webview, if caps recreateChromeDriverSessions is set\n    // to true then kill chromedriver session using stopChromedriverProxies or\n    // else simply suspend proxying to the latter\n    if (this.opts.recreateChromeDriverSessions) {\n      this.log.debug('recreateChromeDriverSessions set to true; killing existing chromedrivers');\n      await this.stopChromedriverProxies();\n    } else {\n      await this.suspendChromedriverProxy();\n    }\n  } else {\n    throw new Error(`Didn't know how to handle switching to context '${name}'`);\n  }\n};\n\n\n/* ---------------------------------\n * On-object context-related helpers\n * --------------------------------- */\n\n// The reason this is a function and not just a constant is that both android-\n// driver and selendroid-driver use this logic, and each one returns\n// a different default context name\nhelpers.defaultContextName = function defaultContextName () {\n  return NATIVE_WIN;\n};\n\nhelpers.defaultWebviewName = function defaultWebviewName () {\n  return WEBVIEW_BASE + this.opts.appPackage;\n};\n\nhelpers.isWebContext = function isWebContext () {\n  return this.curContext !== null && this.curContext !== NATIVE_WIN;\n};\n\n// Turn on proxying to an existing Chromedriver session or a new one\nhelpers.startChromedriverProxy = async function startChromedriverProxy (context, webviewsMapping) {\n  this.log.debug(`Connecting to chrome-backed webview context '${context}'`);\n\n  let cd;\n  if (this.sessionChromedrivers[context]) {\n    // in the case where we've already set up a chromedriver for a context,\n    // we want to reconnect to it, not create a whole new one\n    this.log.debug(`Found existing Chromedriver for context '${context}'. Using it.`);\n    cd = this.sessionChromedrivers[context];\n    await setupExistingChromedriver(this.log, cd);\n  } else {\n    let opts = _.cloneDeep(this.opts);\n    opts.chromeUseRunningApp = true;\n\n    // if requested, tell chromedriver to attach to the android package we have\n    // associated with the context name, rather than the package of the AUT.\n    // And turn this on by default for chrome--if chrome pops up with a webview\n    // and someone wants to switch to it, we should let chromedriver connect to\n    // chrome rather than staying stuck on the AUT\n    if (opts.extractChromeAndroidPackageFromContextName || context === `${WEBVIEW_BASE}chrome`) {\n      let androidPackage = context.match(`${WEBVIEW_BASE}(.+)`);\n      if (androidPackage && androidPackage.length > 0) {\n        opts.chromeAndroidPackage = androidPackage[1];\n      }\n      if (!opts.extractChromeAndroidPackageFromContextName) {\n        if (_.has(this.opts, 'enableWebviewDetailsCollection') && !this.opts.enableWebviewDetailsCollection) {\n          // When enableWebviewDetailsCollection capability is explicitly disabled, try to identify\n          // chromeAndroidPackage based on contexts, known chrome variant packages and queryAppState result\n          // since webviewsMapping does not have info object\n          const contexts = webviewsMapping.map((wm) => wm.webviewName);\n          for (const knownPackage of KNOWN_CHROME_PACKAGE_NAMES) {\n            if (_.includes(contexts, `${WEBVIEW_BASE}${knownPackage}`)) {\n              continue;\n            }\n            const appState = await this.queryAppState(knownPackage);\n            if (_.includes([APP_STATE.RUNNING_IN_BACKGROUND, APP_STATE.RUNNING_IN_FOREGROUND], appState)) {\n              opts.chromeAndroidPackage = knownPackage;\n              this.log.debug(`Identified chromeAndroidPackage as '${opts.chromeAndroidPackage}' ` +\n                `for context '${context}' by querying states of Chrome app packages`);\n              break;\n            }\n          }\n        } else {\n          for (const wm of webviewsMapping) {\n            if (wm.webviewName === context && _.has(wm?.info, 'Android-Package')) {\n              opts.chromeAndroidPackage = wm.info['Android-Package'];\n              this.log.debug(`Identified chromeAndroidPackage as '${opts.chromeAndroidPackage}' ` +\n                `for context '${context}' by CDP`);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    cd = await this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb, context);\n    // bind our stop/exit handler, passing in context so we know which\n    // one stopped unexpectedly\n    cd.on(Chromedriver.EVENT_CHANGED, (msg) => {\n      if (msg.state === Chromedriver.STATE_STOPPED) {\n        this.onChromedriverStop(context);\n      }\n    });\n    // save the chromedriver object under the context\n    this.sessionChromedrivers[context] = cd;\n  }\n  // hook up the local variables so we can proxy this biz\n  this.chromedriver = cd;\n  this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);\n  this.proxyCommand = this.chromedriver.jwproxy.command.bind(this.chromedriver.jwproxy);\n  this.jwpProxyActive = true;\n};\n\n// Stop proxying to any Chromedriver\nhelpers.suspendChromedriverProxy = function suspendChromedriverProxy () {\n  this.chromedriver = null;\n  this.proxyReqRes = null;\n  this.proxyCommand = null;\n  this.jwpProxyActive = false;\n};\n\n// Handle an out-of-band Chromedriver stop event\nhelpers.onChromedriverStop = async function onChromedriverStop (context) {\n  this.log.warn(`Chromedriver for context ${context} stopped unexpectedly`);\n  if (context === this.curContext) {\n    // we exited unexpectedly while automating the current context and so want\n    // to shut down the session and respond with an error\n    let err = new Error('Chromedriver quit unexpectedly during session');\n    await this.startUnexpectedShutdown(err);\n  } else {\n    // if a Chromedriver in the non-active context barfs, we don't really\n    // care, we'll just make a new one next time we need the context.\n    this.log.warn(\"Chromedriver quit unexpectedly, but it wasn't the active \" +\n      'context, ignoring');\n    delete this.sessionChromedrivers[context];\n  }\n};\n\n// Intentionally stop all the chromedrivers currently active, and ignore\n// their exit events\nhelpers.stopChromedriverProxies = async function stopChromedriverProxies () {\n  this.suspendChromedriverProxy(); // make sure we turn off the proxy flag\n  for (let context of _.keys(this.sessionChromedrivers)) {\n    let cd = this.sessionChromedrivers[context];\n    this.log.debug(`Stopping chromedriver for context ${context}`);\n    // stop listening for the stopped state event\n    cd.removeAllListeners(Chromedriver.EVENT_CHANGED);\n    try {\n      await cd.stop();\n    } catch (err) {\n      this.log.warn(`Error stopping Chromedriver: ${err.message}`);\n    }\n    delete this.sessionChromedrivers[context];\n  }\n};\n\nhelpers.isChromedriverContext = function isChromedriverContext (viewName) {\n  return _.includes(viewName, WEBVIEW_WIN) || viewName === CHROMIUM_WIN;\n};\n\nhelpers.shouldDismissChromeWelcome = function shouldDismissChromeWelcome () {\n  return !!this.opts.chromeOptions &&\n         _.isArray(this.opts.chromeOptions.args) &&\n         this.opts.chromeOptions.args.includes('--no-first-run');\n};\n\nhelpers.dismissChromeWelcome = async function dismissChromeWelcome () {\n  this.log.info('Trying to dismiss Chrome welcome');\n  let activity = await this.getCurrentActivity();\n  if (activity !== 'org.chromium.chrome.browser.firstrun.FirstRunActivity') {\n    this.log.info('Chrome welcome dialog never showed up! Continuing');\n    return;\n  }\n  let el = await this.findElOrEls('id', 'com.android.chrome:id/terms_accept', false);\n  await this.click(el.ELEMENT);\n  try {\n    let el = await this.findElOrEls('id', 'com.android.chrome:id/negative_button', false);\n    await this.click(el.ELEMENT);\n  } catch (e) {\n    // DO NOTHING, THIS DEVICE DIDNT LAUNCH THE SIGNIN DIALOG\n    // IT MUST BE A NON GMS DEVICE\n    this.log.warn(`This device did not show Chrome SignIn dialog, ${e.message}`);\n  }\n};\n\nhelpers.startChromeSession = async function startChromeSession () {\n  this.log.info('Starting a chrome-based browser session');\n  let opts = _.cloneDeep(this.opts);\n\n  const knownPackages = [\n    'org.chromium.chrome.shell',\n    'com.android.chrome',\n    'com.chrome.beta',\n    'org.chromium.chrome',\n    'org.chromium.webview_shell',\n  ];\n\n  if (_.includes(knownPackages, this.opts.appPackage)) {\n    opts.chromeBundleId = this.opts.appPackage;\n  } else {\n    opts.chromeAndroidActivity = this.opts.appActivity;\n  }\n  this.chromedriver = await this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb);\n  this.chromedriver.on(Chromedriver.EVENT_CHANGED, (msg) => {\n    if (msg.state === Chromedriver.STATE_STOPPED) {\n      this.onChromedriverStop(CHROMIUM_WIN);\n    }\n  });\n\n  // Now that we have a Chrome session, we ensure that the context is\n  // appropriately set and that this chromedriver is added to the list\n  // of session chromedrivers so we can switch back and forth\n  this.curContext = CHROMIUM_WIN;\n  this.sessionChromedrivers[CHROMIUM_WIN] = this.chromedriver;\n  this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);\n  this.proxyCommand = this.chromedriver.jwproxy.command.bind(this.chromedriver.jwproxy);\n  this.jwpProxyActive = true;\n\n  if (this.shouldDismissChromeWelcome()) {\n    // dismiss Chrome welcome dialog\n    await this.dismissChromeWelcome();\n  }\n};\n\n\n/* --------------------------\n * Internal library functions\n * -------------------------- */\n\nasync function setupExistingChromedriver (log, chromedriver) {\n  // check the status by sending a simple window-based command to ChromeDriver\n  // if there is an error, we want to recreate the ChromeDriver session\n  if (!await chromedriver.hasWorkingWebview()) {\n    log.debug('ChromeDriver is not associated with a window. ' +\n                 'Re-initializing the session.');\n    await chromedriver.restart();\n  }\n  return chromedriver;\n}\n\n/**\n * Find a free port to have Chromedriver listen on.\n *\n * @param {array} portSpec - Array which is a list of ports. A list item may\n * also itself be an array of length 2 specifying a start and end port of\n * a range. Some valid port specs:\n *    - [8000, 8001, 8002]\n *    - [[8000, 8005]]\n *    - [8000, [9000, 9100]]\n * @param {Object?} log Logger instance\n *\n * @return {number} A free port\n */\nasync function getChromedriverPort (portSpec, log = null) {\n  const getPort = B.promisify(PortFinder.getPort, {context: PortFinder});\n\n  // if the user didn't give us any specific information about chromedriver\n  // port ranges, just find any free port\n  if (!portSpec) {\n    const port = await getPort();\n    log?.debug(`A port was not given, using random free port: ${port}`);\n    return port;\n  }\n\n  // otherwise find the free port based on a list or range provided by the user\n  log?.debug(`Finding a free port for chromedriver using spec ${JSON.stringify(portSpec)}`);\n  let foundPort = null;\n  for (const potentialPort of portSpec) {\n    let port, stopPort;\n    if (_.isArray(potentialPort)) {\n      ([port, stopPort] = potentialPort);\n    } else {\n      port = parseInt(potentialPort, 10); // ensure we have a number and not a string\n      stopPort = port;\n    }\n    try {\n      log?.debug(`Checking port range ${port}:${stopPort}`);\n      foundPort = await getPort({port, stopPort});\n      break;\n    } catch (e) {\n      log?.debug(`Nothing in port range ${port}:${stopPort} was available`);\n    }\n  }\n\n  if (foundPort === null) {\n    throw new Error(`Could not find a free port for chromedriver using ` +\n                    `chromedriverPorts spec ${JSON.stringify(portSpec)}`);\n  }\n\n  log?.debug(`Using free port ${foundPort} for chromedriver`);\n  return foundPort;\n}\n\nhelpers.isChromedriverAutodownloadEnabled = function isChromedriverAutodownloadEnabled () {\n  if (this.isFeatureEnabled(CHROMEDRIVER_AUTODOWNLOAD_FEATURE)) {\n    return true;\n  }\n  this?.log?.debug(`Automated Chromedriver download is disabled. ` +\n    `Use '${CHROMEDRIVER_AUTODOWNLOAD_FEATURE}' server feature to enable it`);\n  return false;\n};\n\nhelpers.setupNewChromedriver = async function setupNewChromedriver (opts, curDeviceId, adb, context = null) {\n  if (opts.chromeDriverPort) {\n    this?.log?.warn(`The 'chromeDriverPort' capability is deprecated. Please use 'chromedriverPort' instead`);\n    opts.chromedriverPort = opts.chromeDriverPort;\n  }\n\n  if (opts.chromedriverPort) {\n    this?.log?.debug(`Using user-specified port ${opts.chromedriverPort} for chromedriver`);\n  } else {\n    // if a single port wasn't given, we'll look for a free one\n    opts.chromedriverPort = await getChromedriverPort(opts.chromedriverPorts, this?.log);\n  }\n\n  const details = context ? webviewHelpers.getWebviewDetails(adb, context) : undefined;\n  if (!_.isEmpty(details)) {\n    this?.log?.debug('Passing web view details to the Chromedriver constructor: ' +\n      JSON.stringify(details, null, 2));\n  }\n\n  const chromedriver = new Chromedriver({\n    port: opts.chromedriverPort,\n    executable: opts.chromedriverExecutable,\n    adb,\n    cmdArgs: opts.chromedriverArgs,\n    verbose: !!opts.showChromedriverLog,\n    executableDir: opts.chromedriverExecutableDir,\n    mappingPath: opts.chromedriverChromeMappingFile,\n    bundleId: opts.chromeBundleId,\n    useSystemExecutable: opts.chromedriverUseSystemExecutable,\n    disableBuildCheck: opts.chromedriverDisableBuildCheck,\n    details,\n    isAutodownloadEnabled: this?.isChromedriverAutodownloadEnabled?.()\n  });\n\n  // make sure there are chromeOptions\n  opts.chromeOptions = opts.chromeOptions || {};\n  // try out any prefixed chromeOptions,\n  // and strip the prefix\n  for (const opt of _.keys(opts)) {\n    if (opt.endsWith(':chromeOptions')) {\n      this?.log?.warn(`Merging '${opt}' into 'chromeOptions'. This may cause unexpected behavior`);\n      _.merge(opts.chromeOptions, opts[opt]);\n    }\n  }\n\n  const caps = webviewHelpers.createChromedriverCaps(opts, curDeviceId, details);\n  this?.log?.debug(`Before starting chromedriver, androidPackage is '${caps.chromeOptions.androidPackage}'`);\n  await chromedriver.start(caps);\n  return chromedriver;\n};\nconst setupNewChromedriver = helpers.setupNewChromedriver;\n\n\nObject.assign(extensions, commands, helpers);\nexport { commands, helpers, setupNewChromedriver };\nexport default extensions;\n"],"mappings":"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"}