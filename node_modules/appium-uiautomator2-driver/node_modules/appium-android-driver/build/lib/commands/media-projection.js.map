{"version":3,"file":"media-projection.js","names":["commands","DEFAULT_EXT","RECORDING_STARTUP_TIMEOUT_MS","RECORDING_STOP_TIMEOUT_MS","MIN_API_LEVEL","RECORDING_SERVICE_NAME","SETTINGS_HELPER_PKG_ID","RECORDING_ACTIVITY_NAME","RECORDING_ACTION_START","RECORDING_ACTION_STOP","RECORDINGS_ROOT","DEFAULT_FILENAME_FORMAT","uploadRecordedMedia","localFile","remotePath","uploadOptions","_","isEmpty","util","toInMemoryBase64","toString","user","pass","method","headers","fileFieldName","formFields","options","auth","net","uploadFile","adjustMediaExtension","name","toLower","endsWith","verifyMediaProjectionRecordingIsSupported","adb","apiLevel","getApiLevel","Error","MediaProjectionRecorder","constructor","isRunning","stdout","shell","includes","start","opts","cleanup","filename","maxDurationSec","priority","resolution","args","push","B","resolve","reject","setTimeout","pullRecent","recordings","ls","dstPath","path","join","tempDir","openDir","pull","stop","waitForCondition","waitMs","intervalMs","e","mobileStartMediaProjectionRecording","recorder","fname","moment","format","didStart","log","info","mobileIsMediaProjectionRecordingRunning","mobileStopMediaProjectionRecording","recentRecordingPath","size","fs","stat","debug","toReadableSizeString","rimraf","dirname"],"sources":["../../../lib/commands/media-projection.js"],"sourcesContent":["import _ from 'lodash';\nimport { waitForCondition } from 'asyncbox';\nimport { util, fs, net, tempDir } from 'appium/support';\nimport path from 'path';\nimport B from 'bluebird';\nimport { SETTINGS_HELPER_PKG_ID } from '../android-helpers';\nimport moment from 'moment';\n\n\nconst commands = {};\n\n// https://github.com/appium/io.appium.settings#internal-audio--video-recording\nconst DEFAULT_EXT = '.mp4';\nconst RECORDING_STARTUP_TIMEOUT_MS = 3 * 1000;\nconst RECORDING_STOP_TIMEOUT_MS = 3 * 1000;\nconst MIN_API_LEVEL = 29;\nconst RECORDING_SERVICE_NAME = `${SETTINGS_HELPER_PKG_ID}/.recorder.RecorderService`;\nconst RECORDING_ACTIVITY_NAME = `${SETTINGS_HELPER_PKG_ID}/io.appium.settings.Settings`;\nconst RECORDING_ACTION_START = `${SETTINGS_HELPER_PKG_ID}.recording.ACTION_START`;\nconst RECORDING_ACTION_STOP = `${SETTINGS_HELPER_PKG_ID}.recording.ACTION_STOP`;\nconst RECORDINGS_ROOT = `/storage/emulated/0/Android/data/${SETTINGS_HELPER_PKG_ID}/files`;\nconst DEFAULT_FILENAME_FORMAT = 'YYYY-MM-DDTHH-mm-ss';\n\n\nasync function uploadRecordedMedia (localFile, remotePath = null, uploadOptions = {}) {\n  if (_.isEmpty(remotePath)) {\n    return (await util.toInMemoryBase64(localFile)).toString();\n  }\n\n  const {user, pass, method, headers, fileFieldName, formFields} = uploadOptions;\n  const options = {\n    method: method || 'PUT',\n    headers,\n    fileFieldName,\n    formFields,\n  };\n  if (user && pass) {\n    options.auth = {user, pass};\n  }\n  await net.uploadFile(localFile, remotePath, options);\n  return '';\n}\n\nfunction adjustMediaExtension (name) {\n  return _.toLower(name).endsWith(DEFAULT_EXT) ? name : `${name}${DEFAULT_EXT}`;\n}\n\nasync function verifyMediaProjectionRecordingIsSupported (adb) {\n  const apiLevel = await adb.getApiLevel();\n  if (apiLevel < MIN_API_LEVEL) {\n    throw new Error(`Media projection-based recording is not available on API Level ${apiLevel}. ` +\n      `Minimum required API Level is ${MIN_API_LEVEL}.`);\n  }\n}\n\n\nclass MediaProjectionRecorder {\n  constructor (adb) {\n    this.adb = adb;\n  }\n\n  async isRunning () {\n    const stdout = await this.adb.shell([\n      'dumpsys', 'activity', 'services', RECORDING_SERVICE_NAME\n    ]);\n    return stdout.includes(RECORDING_SERVICE_NAME);\n  }\n\n  async start (opts = {}) {\n    if (await this.isRunning()) {\n      return false;\n    }\n\n    await this.cleanup();\n    const {\n      filename,\n      maxDurationSec,\n      priority,\n      resolution,\n    } = opts;\n    const args = [\n      'am', 'start',\n      '-n', RECORDING_ACTIVITY_NAME,\n      '-a', RECORDING_ACTION_START,\n    ];\n    if (filename) {\n      args.push('--es', 'filename', filename);\n    }\n    if (maxDurationSec) {\n      args.push('--es', 'max_duration_sec', `${maxDurationSec}`);\n    }\n    if (priority) {\n      args.push('--es', 'priority', priority);\n    }\n    if (resolution) {\n      args.push('--es', 'resolution', resolution);\n    }\n    await this.adb.shell(args);\n    await new B((resolve, reject) => {\n      setTimeout(async () => {\n        if (!await this.isRunning()) {\n          return reject(new Error(\n            `The media projection recording is not running after ${RECORDING_STARTUP_TIMEOUT_MS}ms. ` +\n            `Please check the logcat output for more details.`\n          ));\n        }\n        resolve();\n      }, RECORDING_STARTUP_TIMEOUT_MS);\n    });\n    return true;\n  }\n\n  async cleanup () {\n    await this.adb.shell([`rm -f ${RECORDINGS_ROOT}/*`]);\n  }\n\n  async pullRecent () {\n    const recordings = await this.adb.ls(RECORDINGS_ROOT, ['-tr']);\n    if (_.isEmpty(recordings)) {\n      return null;\n    }\n\n    const dstPath = path.join(await tempDir.openDir(), recordings[0]);\n    await this.adb.pull(`${RECORDINGS_ROOT}/${recordings[0]}`, dstPath);\n    return dstPath;\n  }\n\n  async stop () {\n    if (!await this.isRunning()) {\n      return false;\n    }\n\n    await this.adb.shell([\n      'am', 'start',\n      '-n', RECORDING_ACTIVITY_NAME,\n      '-a', RECORDING_ACTION_STOP,\n    ]);\n    try {\n      await waitForCondition(async () => !(await this.isRunning()), {\n        waitMs: RECORDING_STOP_TIMEOUT_MS,\n        intervalMs: 500,\n      });\n    } catch (e) {\n      throw new Error(\n        `The attempt to stop the current media projection recording timed out after ` +\n        `${RECORDING_STOP_TIMEOUT_MS}ms`\n      );\n    }\n    return true;\n  }\n}\n\n\n/**\n * @typedef {Object} StartRecordingOptions\n *\n * @property {string?} resolution Maximum supported resolution on-device (Detected\n * automatically by the app itself), which usually equals to Full HD 1920x1080 on most\n * phones however you can change it to following supported resolutions\n * as well: \"1920x1080\", \"1280x720\", \"720x480\", \"320x240\", \"176x144\".\n * @property {number?} maxDurationSec [900] Default value: 900 seconds which means\n * maximum allowed duration is 15 minute, you can increase it if your test takes\n * longer than that.\n * @property {string?} priority [high] Means recording thread priority is maximum\n * however if you face performance drops during testing with recording enabled, you\n * can reduce recording priority to \"normal\" or \"low\".\n * @property {string?} filename You can type recording video file name as you want,\n * but recording currently supports only \"mp4\" format so your filename must end with \".mp4\".\n * An invalid file name will fail to start the recording.\n * If not provided then the current timestamp will be used as file name.\n */\n\n/**\n * Record the display of a real devices running Android 10 (API level 29) and higher.\n * The screen activity is recorded to a MPEG-4 file. Audio is also recorded by default\n * (only for apps that allow it in their manifests).\n * If another recording has been already started then the command will exit silently.\n * The previously recorded video file is deleted when a new recording session is started.\n * Recording continues it is stopped explicitly or until the timeout happens.\n *\n * @param {?StartRecordingOptions} options Available options.\n * @returns {boolean} True if a new recording has successfully started.\n * @throws {Error} If recording has failed to start or is not supported on the device under test.\n */\ncommands.mobileStartMediaProjectionRecording = async function mobileStartMediaProjectionRecording (options = {}) {\n  await verifyMediaProjectionRecordingIsSupported(this.adb);\n\n  const {resolution, priority, maxDurationSec, filename} = options;\n  const recorder = new MediaProjectionRecorder(this.adb);\n  const fname = adjustMediaExtension(filename || moment().format(DEFAULT_FILENAME_FORMAT));\n  const didStart = await recorder.start({\n    resolution,\n    priority,\n    maxDurationSec,\n    filename: fname,\n  });\n  if (didStart) {\n    this.log.info(`A new media projection recording '${fname}' has been successfully started`);\n  } else {\n    this.log.info('Another media projection recording is already in progress. There is nothing to start');\n  }\n  return didStart;\n};\n\n/**\n * Checks if a media projection-based recording is currently running.\n *\n * @returns {boolean} True if a recording is in progress.\n * @throws {Error} If a recording is not supported on the device under test.\n */\ncommands.mobileIsMediaProjectionRecordingRunning = async function mobileIsMediaProjectionRecordingRunning () {\n  await verifyMediaProjectionRecordingIsSupported(this.adb);\n\n  const recorder = new MediaProjectionRecorder(this.adb);\n  return await recorder.isRunning();\n};\n\n/**\n * @typedef {Object} StopRecordingOptions\n *\n * @property {string?} remotePath The path to the remote location, where the resulting video should be uploaded.\n * The following protocols are supported: http/https, ftp.\n * Null or empty string value (the default setting) means the content of resulting\n * file should be encoded as Base64 and passed as the endpoont response value.\n * An exception will be thrown if the generated media file is too big to\n * fit into the available process memory.\n * @property {string?} user The name of the user for the remote authentication.\n * @property {string?} pass The password for the remote authentication.\n * @property {string?} method The http multipart upload method name. The 'PUT' one is used by default.\n * @property {Object?} headers Additional headers mapping for multipart http(s) uploads\n * @property {string?} fileFieldName [file] The name of the form field, where the file content BLOB should be stored for\n * http(s) uploads\n * @property {Object|Array<Pair>?} formFields Additional form fields for multipart http(s) uploads\n */\n\n/**\n * Stop a media projection-based recording.\n * If no recording has been started before then an error is thrown.\n * If the recording has been already finished before this API has been called\n * then the most recent recorded file is returned.\n *\n * @param {?StopRecordingOptions} options Available options.\n * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'\n * parameter is falsy or an empty string.\n * @throws {Error} If there was an error while stopping a recording,\n * fetching the content of the remote media file,\n * or if a recording is not supported on the device under test.\n */\ncommands.mobileStopMediaProjectionRecording = async function mobileStopMediaProjectionRecording (options = {}) {\n  await verifyMediaProjectionRecordingIsSupported(this.adb);\n\n  const recorder = new MediaProjectionRecorder(this.adb);\n  if (await recorder.stop()) {\n    this.log.info('Successfully stopped a media projection recording. Pulling the recorded media');\n  } else {\n    this.log.info('Media projection recording is not running. There is nothing to stop');\n  }\n  const recentRecordingPath = await recorder.pullRecent();\n  if (!recentRecordingPath) {\n    throw new Error(`No recent media projection recording have been found. Did you start any?`);\n  }\n\n  const {remotePath} = options;\n  if (_.isEmpty(remotePath)) {\n    const {size} = await fs.stat(recentRecordingPath);\n    this.log.debug(`The size of the resulting media projection recording is ${util.toReadableSizeString(size)}`);\n  }\n  try {\n    return await uploadRecordedMedia(recentRecordingPath, remotePath, options);\n  } finally {\n    await fs.rimraf(path.dirname(recentRecordingPath));\n  }\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}