{"version":3,"file":"recordscreen.js","names":["commands","RETRY_PAUSE","RETRY_TIMEOUT","MAX_RECORDING_TIME_SEC","MAX_TIME_SEC","DEFAULT_RECORDING_TIME_SEC","PROCESS_SHUTDOWN_TIMEOUT","SCREENRECORD_BINARY","DEFAULT_EXT","MIN_EMULATOR_API_LEVEL","FFMPEG_BINARY","system","isWindows","uploadRecordedMedia","localFile","remotePath","uploadOptions","_","isEmpty","util","toInMemoryBase64","toString","user","pass","method","headers","fileFieldName","formFields","options","auth","net","uploadFile","verifyScreenRecordIsSupported","adb","isEmulator","apiLevel","getApiLevel","Error","scheduleScreenRecord","recordingProperties","log","stopped","timer","videoSize","bitRate","timeLimit","bugReport","currentTimeLimit","hasValue","currentTimeLimitInt","parseInt","isNaN","pathOnDevice","uuidV4","substring","recordingProc","screenrecord","on","currentDuration","getDuration","asSeconds","toFixed","debug","timeLimitInt","chunkDuration","e","error","stack","start","waitForCondition","fileExists","waitMs","intervalMs","records","push","recordingProcess","mergeScreenRecords","mediaFiles","fs","which","configContent","map","x","join","configFile","path","resolve","dirname","writeFile","result","Math","floor","Date","args","info","exec","terminateBackgroundScreenRecording","force","pids","getPIDsByName","p","shell","err","message","startRecordingScreen","forceRestart","stopRecordingScreen","warn","_screenRecordingProperties","record","rimraf","timeout","parseFloat","timing","Timer","isRunning","stop","errorAndThrow","tmpRoot","tempDir","openDir","localRecords","posix","basename","pull","last","resultFilePath","length","size","stat","toReadableSizeString"],"sources":["../../../lib/commands/recordscreen.js"],"sourcesContent":["import _ from 'lodash';\nimport { waitForCondition } from 'asyncbox';\nimport { util, fs, net, tempDir, system, timing } from 'appium/support';\nimport { exec } from 'teen_process';\nimport path from 'path';\n\n\nconst commands = {};\n\nconst RETRY_PAUSE = 300;\nconst RETRY_TIMEOUT = 5000;\nconst MAX_RECORDING_TIME_SEC = 60 * 3;\nconst MAX_TIME_SEC = 60 * 30;\nconst DEFAULT_RECORDING_TIME_SEC = MAX_RECORDING_TIME_SEC;\nconst PROCESS_SHUTDOWN_TIMEOUT = 10 * 1000;\nconst SCREENRECORD_BINARY = 'screenrecord';\nconst DEFAULT_EXT = '.mp4';\nconst MIN_EMULATOR_API_LEVEL = 27;\nconst FFMPEG_BINARY = `ffmpeg${system.isWindows() ? '.exe' : ''}`;\n\nasync function uploadRecordedMedia (localFile, remotePath = null, uploadOptions = {}) {\n  if (_.isEmpty(remotePath)) {\n    return (await util.toInMemoryBase64(localFile)).toString();\n  }\n\n  const {user, pass, method, headers, fileFieldName, formFields} = uploadOptions;\n  const options = {\n    method: method || 'PUT',\n    headers,\n    fileFieldName,\n    formFields,\n  };\n  if (user && pass) {\n    options.auth = {user, pass};\n  }\n  await net.uploadFile(localFile, remotePath, options);\n  return '';\n}\n\nasync function verifyScreenRecordIsSupported (adb, isEmulator) {\n  const apiLevel = await adb.getApiLevel();\n  if (isEmulator && apiLevel < MIN_EMULATOR_API_LEVEL) {\n    throw new Error(`Screen recording does not work on emulators running Android API level less than ${MIN_EMULATOR_API_LEVEL}`);\n  }\n  if (apiLevel < 19) {\n    throw new Error(`Screen recording not available on API Level ${apiLevel}. Minimum API Level is 19.`);\n  }\n}\n\nasync function scheduleScreenRecord (adb, recordingProperties, log = null) {\n  if (recordingProperties.stopped) {\n    return;\n  }\n\n  const {\n    timer,\n    videoSize,\n    bitRate,\n    timeLimit,\n    bugReport,\n  } = recordingProperties;\n\n  let currentTimeLimit = MAX_RECORDING_TIME_SEC;\n  if (util.hasValue(recordingProperties.currentTimeLimit)) {\n    const currentTimeLimitInt = parseInt(recordingProperties.currentTimeLimit, 10);\n    if (!isNaN(currentTimeLimitInt) && currentTimeLimitInt < MAX_RECORDING_TIME_SEC) {\n      currentTimeLimit = currentTimeLimitInt;\n    }\n  }\n  const pathOnDevice = `/sdcard/${util.uuidV4().substring(0, 8)}${DEFAULT_EXT}`;\n  const recordingProc = adb.screenrecord(pathOnDevice, {\n    videoSize,\n    bitRate,\n    timeLimit: currentTimeLimit,\n    bugReport,\n  });\n\n  recordingProc.on('end', () => {\n    if (recordingProperties.stopped || !util.hasValue(timeLimit)) {\n      return;\n    }\n    const currentDuration = timer.getDuration().asSeconds.toFixed(0);\n    log?.debug(`The overall screen recording duration is ${currentDuration}s so far`);\n    const timeLimitInt = parseInt(timeLimit, 10);\n    if (isNaN(timeLimitInt) || currentDuration >= timeLimitInt) {\n      log?.debug('There is no need to start the next recording chunk');\n      return;\n    }\n\n    recordingProperties.currentTimeLimit = timeLimitInt - currentDuration;\n    const chunkDuration = recordingProperties.currentTimeLimit < MAX_RECORDING_TIME_SEC\n      ? recordingProperties.currentTimeLimit\n      : MAX_RECORDING_TIME_SEC;\n    log?.debug(`Starting the next ${chunkDuration}s-chunk ` +\n      `of screen recording in order to achieve ${timeLimitInt}s total duration`);\n    (async () => {\n      try {\n        await scheduleScreenRecord(adb, recordingProperties, log);\n      } catch (e) {\n        log?.error(e.stack);\n        recordingProperties.stopped = true;\n      }\n    })();\n  });\n\n  await recordingProc.start(0);\n  try {\n    await waitForCondition(async () => await adb.fileExists(pathOnDevice),\n      {waitMs: RETRY_TIMEOUT, intervalMs: RETRY_PAUSE});\n  } catch (e) {\n    throw new Error(`The expected screen record file '${pathOnDevice}' does not exist after ${RETRY_TIMEOUT}ms. ` +\n      `Is ${SCREENRECORD_BINARY} utility available and operational on the device under test?`);\n  }\n\n  recordingProperties.records.push(pathOnDevice);\n  recordingProperties.recordingProcess = recordingProc;\n}\n\nasync function mergeScreenRecords (mediaFiles, log = null) {\n  try {\n    await fs.which(FFMPEG_BINARY);\n  } catch (e) {\n    throw new Error(`${FFMPEG_BINARY} utility is not available in PATH. Please install it from https://www.ffmpeg.org/`);\n  }\n  const configContent = mediaFiles\n    .map((x) => `file '${x}'`)\n    .join('\\n');\n  const configFile = path.resolve(path.dirname(mediaFiles[0]), 'config.txt');\n  await fs.writeFile(configFile, configContent, 'utf8');\n  log?.debug(`Generated ffmpeg merging config '${configFile}' with items:\\n${configContent}`);\n  const result = path.resolve(path.dirname(mediaFiles[0]), `merge_${Math.floor(new Date())}${DEFAULT_EXT}`);\n  const args = ['-safe', '0', '-f', 'concat', '-i', configFile, '-c', 'copy', result];\n  log?.info(`Initiating screen records merging using the command '${FFMPEG_BINARY} ${args.join(' ')}'`);\n  await exec(FFMPEG_BINARY, args);\n  return result;\n}\n\nasync function terminateBackgroundScreenRecording (adb, force = true) {\n  const pids = (await adb.getPIDsByName(SCREENRECORD_BINARY))\n    .map((p) => `${p}`);\n  if (_.isEmpty(pids)) {\n    return false;\n  }\n\n  try {\n    await adb.shell(['kill', force ? '-15' : '-2', ...pids]);\n    await waitForCondition(async () => _.isEmpty(await adb.getPIDsByName(SCREENRECORD_BINARY)), {\n      waitMs: PROCESS_SHUTDOWN_TIMEOUT,\n      intervalMs: 500,\n    });\n    return true;\n  } catch (err) {\n    throw new Error(`Unable to stop the background screen recording: ${err.message}`);\n  }\n}\n\n\n/**\n * @typedef {Object} StartRecordingOptions\n *\n * @property {?string} remotePath - The path to the remote location, where the captured video should be uploaded.\n *                                  The following protocols are supported: http/https, ftp.\n *                                  Null or empty string value (the default setting) means the content of resulting\n *                                  file should be encoded as Base64 and passed as the endpount response value.\n *                                  An exception will be thrown if the generated media file is too big to\n *                                  fit into the available process memory.\n *                                  This option only has an effect if there is screen recording process in progreess\n *                                  and `forceRestart` parameter is not set to `true`.\n * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} method [PUT] - The http multipart upload method name. Only works if `remotePath` is provided.\n * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads\n * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for\n *                                            http(s) uploads\n * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads\n * @property {?string} videoSize - The format is widthxheight.\n *                  The default value is the device's native display resolution (if supported),\n *                  1280x720 if not. For best results,\n *                  use a size supported by your device's Advanced Video Coding (AVC) encoder.\n *                  For example, \"1280x720\"\n * @property {?boolean} bugReport - Set it to `true` in order to display additional information on the video overlay,\n *                                  such as a timestamp, that is helpful in videos captured to illustrate bugs.\n *                                  This option is only supported since API level 27 (Android P).\n * @property {?string|number} timeLimit - The maximum recording time, in seconds. The default value is 180 (3 minutes).\n *                                        The maximum value is 1800 (30 minutes). If the passed value is greater than 180 then\n *                                        the algorithm will try to schedule multiple screen recording chunks and merge the\n *                                        resulting videos into a single media file using `ffmpeg` utility.\n *                                        If the utility is not available in PATH then the most recent screen recording chunk is\n *                                        going to be returned.\n * @property {?string|number} bitRate - The video bit rate for the video, in bits per second.\n *                The default value is 4000000 (4 Mbit/s). You can increase the bit rate to improve video quality,\n *                but doing so results in larger movie files.\n * @property {?boolean} forceRestart - Whether to try to catch and upload/return the currently running screen recording\n *                                     (`false`, the default setting) or ignore the result of it and start a new recording\n *                                     immediately (`true`).\n */\n\n/**\n * Record the display of a real devices running Android 4.4 (API level 19) and higher.\n * Emulators are supported since API level 27 (Android P).\n * It records screen activity to an MPEG-4 file. Audio is not recorded with the video file.\n * If screen recording has been already started then the command will stop it forcefully and start a new one.\n * The previously recorded video file will be deleted.\n *\n * @param {?StartRecordingOptions} options - The available options.\n * @returns {string} Base64-encoded content of the recorded media file if\n *                   any screen recording is currently running or an empty string.\n * @throws {Error} If screen recording has failed to start or is not supported on the device under test.\n */\ncommands.startRecordingScreen = async function startRecordingScreen (options = {}) {\n  await verifyScreenRecordIsSupported(this.adb, this.isEmulator());\n\n  let result = '';\n  const {videoSize, timeLimit = DEFAULT_RECORDING_TIME_SEC, bugReport, bitRate, forceRestart} = options;\n  if (!forceRestart) {\n    result = await this.stopRecordingScreen(options);\n  }\n\n  if (await terminateBackgroundScreenRecording(this.adb, true)) {\n    this.log.warn(`There were some ${SCREENRECORD_BINARY} process leftovers running ` +\n      `in the background. Make sure you stop screen recording each time after it is started, ` +\n      `otherwise the recorded media might quickly exceed all the free space on the device under test.`);\n  }\n\n  if (!_.isEmpty(this._screenRecordingProperties)) {\n    for (const record of (this._screenRecordingProperties.records || [])) {\n      await this.adb.rimraf(record);\n    }\n    this._screenRecordingProperties = null;\n  }\n\n  const timeout = parseFloat(timeLimit);\n  if (isNaN(timeout) || timeout > MAX_TIME_SEC || timeout <= 0) {\n    throw new Error(`The timeLimit value must be in range [1, ${MAX_TIME_SEC}] seconds. ` +\n      `The value of '${timeLimit}' has been passed instead.`);\n  }\n\n  this._screenRecordingProperties = {\n    timer: new timing.Timer().start(),\n    videoSize,\n    timeLimit,\n    currentTimeLimit: timeLimit,\n    bitRate,\n    bugReport,\n    records: [],\n    recordingProcess: null,\n    stopped: false,\n  };\n  await scheduleScreenRecord(this.adb, this._screenRecordingProperties, this.log);\n  return result;\n};\n\n/**\n * @typedef {Object} StopRecordingOptions\n *\n * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.\n *                                  The following protocols are supported: http/https, ftp.\n *                                  Null or empty string value (the default setting) means the content of resulting\n *                                  file should be encoded as Base64 and passed as the endpount response value.\n *                                  An exception will be thrown if the generated media file is too big to\n *                                  fit into the available process memory.\n * @property {?string} user - The name of the user for the remote authentication.\n * @property {?string} pass - The password for the remote authentication.\n * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.\n * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads\n * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for\n *                                            http(s) uploads\n * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads\n */\n\n/**\n * Stop recording the screen.\n * If no screen recording has been started before then the method returns an empty string.\n *\n * @param {?StopRecordingOptions} options - The available options.\n * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'\n *                   parameter is falsy or an empty string.\n * @throws {Error} If there was an error while getting the name of a media file\n *                 or the file content cannot be uploaded to the remote location\n *                 or screen recording is not supported on the device under test.\n */\ncommands.stopRecordingScreen = async function stopRecordingScreen (options = {}) {\n  await verifyScreenRecordIsSupported(this.adb, this.isEmulator());\n\n  if (!_.isEmpty(this._screenRecordingProperties)) {\n    this._screenRecordingProperties.stopped = true;\n  }\n\n  try {\n    await terminateBackgroundScreenRecording(this.adb, false);\n  } catch (err) {\n    this.log.warn(err.message);\n    if (!_.isEmpty(this._screenRecordingProperties)) {\n      this.log.warn('The resulting video might be corrupted');\n    }\n  }\n\n  if (_.isEmpty(this._screenRecordingProperties)) {\n    this.log.info(`Screen recording has not been previously started by Appium. There is nothing to stop`);\n    return '';\n  }\n\n  if (this._screenRecordingProperties.recordingProcess && this._screenRecordingProperties.recordingProcess.isRunning) {\n    try {\n      await this._screenRecordingProperties.recordingProcess.stop('SIGINT', PROCESS_SHUTDOWN_TIMEOUT);\n    } catch (e) {\n      this.log.errorAndThrow(`Unable to stop screen recording within ${PROCESS_SHUTDOWN_TIMEOUT}ms`);\n    }\n    this._screenRecordingProperties.recordingProcess = null;\n  }\n\n  if (_.isEmpty(this._screenRecordingProperties.records)) {\n    this.log.errorAndThrow(`No screen recordings have been stored on the device so far. ` +\n      `Are you sure the ${SCREENRECORD_BINARY} utility works as expected?`);\n  }\n\n  const tmpRoot = await tempDir.openDir();\n  try {\n    const localRecords = [];\n    for (const pathOnDevice of this._screenRecordingProperties.records) {\n      localRecords.push(path.resolve(tmpRoot, path.posix.basename(pathOnDevice)));\n      await this.adb.pull(pathOnDevice, _.last(localRecords));\n      await this.adb.rimraf(pathOnDevice);\n    }\n    let resultFilePath = _.last(localRecords);\n    if (localRecords.length > 1) {\n      this.log.info(`Got ${localRecords.length} screen recordings. Trying to merge them`);\n      try {\n        resultFilePath = await mergeScreenRecords(localRecords, this.log);\n      } catch (e) {\n        this.log.warn(`Cannot merge the recorded files. The most recent screen recording is going to be returned as the result. ` +\n          `Original error: ${e.message}`);\n      }\n    }\n    if (_.isEmpty(options.remotePath)) {\n      const {size} = await fs.stat(resultFilePath);\n      this.log.debug(`The size of the resulting screen recording is ${util.toReadableSizeString(size)}`);\n    }\n    return await uploadRecordedMedia(resultFilePath, options.remotePath, options);\n  } finally {\n    await fs.rimraf(tmpRoot);\n    this._screenRecordingProperties = null;\n  }\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}