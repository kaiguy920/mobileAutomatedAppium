{"version":3,"file":"webview-helpers.js","names":["NATIVE_WIN","WEBVIEW_WIN","CHROMIUM_WIN","WEBVIEW_BASE","WEBVIEW_PID_PATTERN","RegExp","WEBVIEW_PKG_PATTERN","DEVTOOLS_SOCKET_PATTERN","CROSSWALK_SOCKET_PATTERN","CHROMIUM_DEVTOOLS_SOCKET","CHROME_PACKAGE_NAME","KNOWN_CHROME_PACKAGE_NAMES","DEVTOOLS_PORTS_RANGE","WEBVIEWS_DETAILS_CACHE","LRU","max","updateAgeOnGet","CDP_REQ_TIMEOUT","DEVTOOLS_PORT_ALLOCATION_GUARD","util","getLockFileGuard","path","resolve","os","tmpdir","timeout","tryRecovery","helpers","toDetailsCacheKey","adb","webview","curDeviceId","getPotentialWebviewProcs","out","shell","names","allMatches","line","split","flags","st","sockPath","trim","startsWith","push","test","_","isEmpty","logger","debug","JSON","stringify","length","pluralize","uniq","webviewsFromProcs","deviceSocket","socketNames","webviews","socketName","proc","socketNameMatch","exec","crosswalkMatch","allocateDevtoolsPort","webviewDevtoolsPort","remotePort","replace","startPort","endPort","localPort","findAPortNotInUse","e","Error","adbExec","collectWebviewsDetails","webviewsMapping","opts","ensureWebviewsHavePages","enableWebviewDetailsCollection","info","detailCollectors","item","cdpInfo","pages","cdpList","removePortForward","B","all","axios","url","data","procFromWebview","pidMatch","pid","pkg","getNameByPid","parseWebviewNames","isChromeSession","result","webviewName","getWebViewsMapping","androidDeviceSocket","webviewMapping","wvName","process","undefined","pkgMatch","name","id","warn","message","key","set","has","delete","getWebviewDetails","get","createChromedriverCaps","deviceId","webViewDetails","caps","chromeOptions","androidPackage","appPackage","isBoolean","chromeUseRunningApp","androidUseRunningApp","chromeAndroidPackage","chromeAndroidActivity","androidActivity","chromeAndroidProcess","androidProcess","toLower","browserName","appActivity","pageLoadStrategy","isChrome","includes","androidDeviceSerial","isPlainObject","loggingPrefs","chromeLoggingPrefs","enablePerformanceLogging","newPref","performance","Object","assign","Arguments","args","protectedCapNames","opt","val","toPairs","isUndefined","optName"],"sources":["../../lib/webview-helpers.js"],"sourcesContent":["import _ from 'lodash';\nimport logger from './logger';\nimport axios from 'axios';\nimport { util } from 'appium/support';\nimport { findAPortNotInUse } from 'portscanner';\nimport LRU from 'lru-cache';\nimport B from 'bluebird';\nimport path from 'path';\nimport os from 'os';\n\nconst NATIVE_WIN = 'NATIVE_APP';\nconst WEBVIEW_WIN = 'WEBVIEW';\nconst CHROMIUM_WIN = 'CHROMIUM';\nconst WEBVIEW_BASE = `${WEBVIEW_WIN}_`;\nconst WEBVIEW_PID_PATTERN = new RegExp(`^${WEBVIEW_BASE}(\\\\d+)`);\nconst WEBVIEW_PKG_PATTERN = new RegExp(`^${WEBVIEW_BASE}([^\\\\d\\\\s][\\\\w.]*)`);\nconst DEVTOOLS_SOCKET_PATTERN = /@[\\w.]+_devtools_remote_?(\\d+)?\\b/;\nconst CROSSWALK_SOCKET_PATTERN = /@([\\w.]+)_devtools_remote\\b/;\nconst CHROMIUM_DEVTOOLS_SOCKET = 'chrome_devtools_remote';\nconst CHROME_PACKAGE_NAME = 'com.android.chrome';\nconst KNOWN_CHROME_PACKAGE_NAMES = [\n  CHROME_PACKAGE_NAME,\n  'com.chrome.beta',\n  'com.chrome.dev',\n  'com.chrome.canary',\n];\nconst DEVTOOLS_PORTS_RANGE = [10900, 11000];\nconst WEBVIEWS_DETAILS_CACHE = new LRU({\n  max: 100,\n  updateAgeOnGet: true,\n});\nconst CDP_REQ_TIMEOUT = 2000; // ms\nconst DEVTOOLS_PORT_ALLOCATION_GUARD = util.getLockFileGuard(\n  path.resolve(os.tmpdir(), 'android_devtools_port_guard'),\n  {timeout: 7, tryRecovery: true}\n);\n\nconst helpers = {};\n\nfunction toDetailsCacheKey (adb, webview) {\n  return `${adb?.curDeviceId}:${webview}`;\n}\n\n/**\n * This function gets a list of android system processes and returns ones\n * that look like webviews\n * See https://cs.chromium.org/chromium/src/chrome/browser/devtools/device/android_device_info_query.cc\n * for more details\n *\n * @param {object} adb - an ADB instance\n *\n * @return {Array.<string>} - a list of matching webview socket names (including the leading '@')\n */\nasync function getPotentialWebviewProcs (adb) {\n  const out = await adb.shell(['cat', '/proc/net/unix']);\n  const names = [];\n  const allMatches = [];\n  for (const line of out.split('\\n')) {\n    // Num RefCount Protocol Flags Type St Inode Path\n    const [,,, flags,, st,, sockPath] = line.trim().split(/\\s+/);\n    if (!sockPath) {\n      continue;\n    }\n    if (sockPath.startsWith('@')) {\n      allMatches.push(line.trim());\n    }\n    if (flags !== '00010000' || st !== '01') {\n      continue;\n    }\n    if (!DEVTOOLS_SOCKET_PATTERN.test(sockPath)) {\n      continue;\n    }\n\n    names.push(sockPath);\n  }\n  if (_.isEmpty(names)) {\n    logger.debug('Found no active devtools sockets');\n    if (!_.isEmpty(allMatches)) {\n      logger.debug(`Other sockets are: ${JSON.stringify(allMatches, null, 2)}`);\n    }\n  } else {\n    logger.debug(`Parsed ${names.length} active devtools ${util.pluralize('socket', names.length, false)}: ` +\n      JSON.stringify(names));\n  }\n  // sometimes the webview process shows up multiple times per app\n  return _.uniq(names);\n}\n\n/**\n * @typedef {Object} WebviewProc\n * @property {string} proc - The webview process name (as returned by\n * getPotentialWebviewProcs\n * @property {string} webview - The actual webview context name\n */\n/**\n * This function retrieves a list of system processes that look like webviews,\n * and returns them along with the webview context name appropriate for it.\n * If we pass in a deviceSocket, we only attempt to find webviews which match\n * that socket name (this is for apps which embed Chromium, which isn't the\n * same as chrome-backed webviews).\n *\n * @param {object} adb - an ADB instance\n * @param {?string} deviceSocket - the explictly-named device socket to use\n *\n * @return {Array.<WebviewProc>}\n */\nasync function webviewsFromProcs (adb, deviceSocket = null) {\n  const socketNames = await getPotentialWebviewProcs(adb);\n  const webviews = [];\n  for (const socketName of socketNames) {\n    if (deviceSocket === CHROMIUM_DEVTOOLS_SOCKET && socketName === `@${deviceSocket}`) {\n      webviews.push({\n        proc: socketName,\n        webview: CHROMIUM_WIN,\n      });\n      continue;\n    }\n\n    const socketNameMatch = DEVTOOLS_SOCKET_PATTERN.exec(socketName);\n    if (!socketNameMatch) {\n      continue;\n    }\n    const crosswalkMatch = CROSSWALK_SOCKET_PATTERN.exec(socketName);\n    if (!socketNameMatch[1] && !crosswalkMatch) {\n      continue;\n    }\n\n    if (deviceSocket && socketName === `@${deviceSocket}` || !deviceSocket) {\n      webviews.push({\n        proc: socketName,\n        webview: socketNameMatch[1]\n          ? `${WEBVIEW_BASE}${socketNameMatch[1]}`\n          : `${WEBVIEW_BASE}${crosswalkMatch[1]}`,\n      });\n    }\n  }\n  return webviews;\n}\n\n/**\n * Allocates a local port for devtools communication\n *\n * @param {ADB} adb ADB instance\n * @param {string} socketName The remote Unix socket name\n * @param {?number} webviewDevtoolsPort The local port number or null to apply\n * autodetection\n * @returns {number} The local port number if the remote socket has been forwarded\n * successfully or `null` otherwise\n * @throws {Error} If there was an error while allocating the local port\n */\nasync function allocateDevtoolsPort (adb, socketName, webviewDevtoolsPort = null) {\n  // socket names come with '@', but this should not be a part of the abstract\n  // remote port, so remove it\n  const remotePort = socketName.replace(/^@/, '');\n  let [startPort, endPort] = DEVTOOLS_PORTS_RANGE;\n  if (webviewDevtoolsPort) {\n    endPort = webviewDevtoolsPort + (endPort - startPort);\n    startPort = webviewDevtoolsPort;\n  }\n  logger.debug(`Forwarding remote port ${remotePort} to a local ` +\n    `port in range ${startPort}..${endPort}`);\n  if (!webviewDevtoolsPort) {\n    logger.debug(`You could use the 'webviewDevtoolsPort' capability to customize ` +\n      `the starting port number`);\n  }\n  return await DEVTOOLS_PORT_ALLOCATION_GUARD(async () => {\n    let localPort;\n    try {\n      localPort = await findAPortNotInUse(startPort, endPort);\n    } catch (e) {\n      throw new Error(`Cannot find any free port to forward the Devtools socket ` +\n        `in range ${startPort}..${endPort}. You could set the starting port number ` +\n        `manually by providing the 'webviewDevtoolsPort' capability`);\n    }\n    await adb.adbExec(['forward', `tcp:${localPort}`, `localabstract:${remotePort}`]);\n    return localPort;\n  });\n}\n\n/**\n * @typedef {Object} WebviewProps\n * @property {string} proc The name of the Devtools Unix socket\n * @property {string} webview The web view alias. Looks like `WEBVIEW_`\n * prefix plus PID or package name\n * @property {?Object} info Webview information as it is retrieved by\n * /json/version CDP endpoint\n * @property {?Array<Object>} pages Webview pages list as it is retrieved by\n * /json/list CDP endpoint\n */\n\n/**\n * @typedef {Object} DetailCollectionOptions\n * @property {?string|number} webviewDevtoolsPort The starting port to use for webview page\n * presence check (if not the default of 9222).\n * @property {?boolean} ensureWebviewsHavePages Whether to check for webview\n * pages presence\n * @property {boolean} enableWebviewDetailsCollection Whether to collect\n * web view details and send them to Chromedriver constructor, so it could\n * select a binary more precisely based on this info.\n */\n\n/**\n * This is a wrapper for Chrome Debugger Protocol data collection.\n * No error is thrown if CDP request fails - in such case no data will be\n * recorded into the corresponding `webviewsMapping` item.\n *\n * @param {ADB} adb The ADB instance\n * @param {Array<WebviewProps>} webviewsMapping The current webviews mapping\n * !!! Each item of this array gets mutated (`info`/`pages` properties get added\n * based on the provided `opts`) if the requested details have been\n * successfully retrieved for it !!!\n * @param {DetailCollectionOptions} opts If both `ensureWebviewsHavePages` and\n * `enableWebviewDetailsCollection` properties are falsy then no details collection\n * is performed\n */\nasync function collectWebviewsDetails (adb, webviewsMapping, opts = {}) {\n  if (_.isEmpty(webviewsMapping)) {\n    return;\n  }\n\n  const {\n    webviewDevtoolsPort = null,\n    ensureWebviewsHavePages = null,\n    enableWebviewDetailsCollection = null,\n  } = opts;\n\n  if (!ensureWebviewsHavePages) {\n    logger.info(`Not checking whether webviews have active pages; use the ` +\n      `'ensureWebviewsHavePages' cap to turn this check on`);\n  }\n\n  if (!enableWebviewDetailsCollection) {\n    logger.info(`Not collecting web view details. Details collection might help ` +\n      `to make Chromedriver initialization more precise. Use the 'enableWebviewDetailsCollection' ` +\n      `cap to turn it on`);\n  }\n\n  if (!ensureWebviewsHavePages && !enableWebviewDetailsCollection) {\n    return;\n  }\n\n  // Connect to each devtools socket and retrieve web view details\n  logger.debug(`Collecting CDP data of ${util.pluralize('webview', webviewsMapping.length, true)}`);\n  const detailCollectors = [];\n  for (const item of webviewsMapping) {\n    detailCollectors.push((async () => {\n      let localPort;\n      try {\n        localPort = await allocateDevtoolsPort(adb, item.proc, webviewDevtoolsPort);\n        if (enableWebviewDetailsCollection) {\n          item.info = await cdpInfo(localPort);\n        }\n        if (ensureWebviewsHavePages) {\n          item.pages = await cdpList(localPort);\n        }\n      } catch (e) {\n        logger.debug(e);\n      } finally {\n        if (localPort) {\n          await adb.removePortForward(localPort);\n        }\n      }\n    })());\n  }\n  await B.all(detailCollectors);\n  logger.debug(`CDP data collection completed`);\n}\n\n// https://chromedevtools.github.io/devtools-protocol/\nasync function cdpList (localPort) {\n  return (await axios({\n    url: `http://127.0.0.1:${localPort}/json/list`,\n    timeout: CDP_REQ_TIMEOUT,\n  })).data;\n}\n\n// https://chromedevtools.github.io/devtools-protocol/\nasync function cdpInfo (localPort) {\n  return (await axios({\n    url: `http://127.0.0.1:${localPort}/json/version`,\n    timeout: CDP_REQ_TIMEOUT,\n  })).data;\n}\n\n/**\n * Take a webview name like WEBVIEW_4296 and use 'adb shell ps' to figure out\n * which app package is associated with that webview. One of the reasons we\n * want to do this is to make sure we're listing webviews for the actual AUT,\n * not some other running app\n *\n * @param {object} adb - an ADB instance\n * @param {string} webview - a webview process name\n *\n * @returns {string} - the package name of the app running the webview\n * @throws {Error} If there was a failure while retrieving the process name\n */\nhelpers.procFromWebview = async function procFromWebview (adb, webview) {\n  const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);\n  if (!pidMatch) {\n    throw new Error(`Could not find PID for webview '${webview}'`);\n  }\n\n  const pid = pidMatch[1];\n  logger.debug(`${webview} mapped to pid ${pid}`);\n  logger.debug(`Getting process name for webview '${webview}'`);\n  const pkg = await adb.getNameByPid(pid);\n  logger.debug(`Got process name: '${pkg}'`);\n  return pkg;\n};\n\n/**\n * Parse webview names for getContexts\n *\n * @param {Array<WebviewsMapping>} webviewsMapping See note on getWebViewsMapping\n * @param {GetWebviewsOpts} opts See note on getWebViewsMapping\n * @return {Array.<string>} - a list of webview names\n */\nhelpers.parseWebviewNames = function parseWebviewNames (webviewsMapping, {\n  ensureWebviewsHavePages = true,\n  isChromeSession = false\n} = {}) {\n  if (isChromeSession) {\n    return [CHROMIUM_WIN];\n  }\n\n  const result = [];\n  for (const {webview, pages, proc, webviewName} of webviewsMapping) {\n    if (ensureWebviewsHavePages && pages?.length === 0) {\n      logger.info(`Skipping the webview '${webview}' at '${proc}' ` +\n        `since it has reported having zero pages`);\n      continue;\n    }\n    if (webviewName) {\n      result.push(webviewName);\n    }\n  }\n  logger.debug(`Found ${util.pluralize('webview', result.length, true)}: ${JSON.stringify(result)}`);\n  return result;\n};\n\n/**\n * @typedef {Object} GetWebviewsOpts\n * @property {string} androidDeviceSocket [null] - device socket name\n * @property {boolean} ensureWebviewsHavePages [true] - whether to check for webview\n * page presence\n * @property {number} webviewDevtoolsPort [9222] - port to use for webview page\n * presence check.\n * @property {boolean} enableWebviewDetailsCollection [true] - whether to collect\n * web view details and send them to Chromedriver constructor, so it could\n * select a binary more precisely based on this info.\n */\n\n/**\n * @typedef {Object} WebviewsMapping\n * @property {string} proc See note on WebviewProps\n * @property {string} webview See note on WebviewProps\n * @property {?Object} info See note on WebviewProps\n * @property {?Array<Object>} pages See note on WebviewProps\n * @propery {?string} webviewName An actual webview name for switching context\n */\n\n/**\n * Get a list of available webviews mapping by introspecting processes with adb,\n * where webviews are listed. It's possible to pass in a 'deviceSocket' arg, which\n * limits the webview possibilities to the one running on the Chromium devtools\n * socket we're interested in (see note on webviewsFromProcs). We can also\n * direct this method to verify whether a particular webview process actually\n * has any pages (if a process exists but no pages are found, Chromedriver will\n * not actually be able to connect to it, so this serves as a guard for that\n * strange failure mode). The strategy for checking whether any pages are\n * active involves sending a request to the remote debug server on the device,\n * hence it is also possible to specify the port on the host machine which\n * should be used for this communication.\n *\n * @param {object} adb - an ADB instance\n * @param {GetWebviewsOpts} opts\n *\n * @return {Array<WebviewsMapping>} webviewsMapping\n */\nhelpers.getWebViewsMapping = async function getWebViewsMapping (adb, {\n  androidDeviceSocket = null,\n  ensureWebviewsHavePages = true,\n  webviewDevtoolsPort = null,\n  enableWebviewDetailsCollection = true\n} = {}) {\n  logger.debug('Getting a list of available webviews');\n  const webviewsMapping = await webviewsFromProcs(adb, androidDeviceSocket);\n\n  await collectWebviewsDetails(adb, webviewsMapping, {\n    ensureWebviewsHavePages,\n    enableWebviewDetailsCollection,\n    webviewDevtoolsPort,\n  });\n\n  for (const webviewMapping of webviewsMapping) {\n    const {webview, info} = webviewMapping;\n    webviewMapping.webviewName = null;\n\n    let wvName = webview;\n    let process = undefined;\n    if (!androidDeviceSocket) {\n      const pkgMatch = WEBVIEW_PKG_PATTERN.exec(webview);\n      try {\n        // web view name could either be suffixed with PID or the package name\n        // package names could not start with a digit\n        const pkg = pkgMatch ? pkgMatch[1] : await helpers.procFromWebview(adb, webview);\n        wvName = `${WEBVIEW_BASE}${pkg}`;\n        const pidMatch = WEBVIEW_PID_PATTERN.exec(webview);\n        process = {\n          name: pkg,\n          id: pidMatch ? pidMatch[1] : null,\n        };\n      } catch (e) {\n        logger.warn(e.message);\n        continue;\n      }\n    }\n\n    webviewMapping.webviewName = wvName;\n    const key = toDetailsCacheKey(adb, wvName);\n    if (info || process) {\n      WEBVIEWS_DETAILS_CACHE.set(key, { info, process });\n    } else if (WEBVIEWS_DETAILS_CACHE.has(key)) {\n      WEBVIEWS_DETAILS_CACHE.delete(key);\n    }\n  }\n  return webviewsMapping;\n};\n\n/**\n * @typedef {Object} ProcessInfo\n * @property {string} name The process name\n * @property {?string} id The process id (if could be retrieved)\n */\n\n/**\n * @typedef {Object} WebViewDetails\n * @property {?ProcessInfo} process - Web view process details\n * @property {Object} info - Web view details as returned by /json/version CDP endpoint, for example:\n * {\n *  \"Browser\": \"Chrome/72.0.3601.0\",\n *  \"Protocol-Version\": \"1.3\",\n *  \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3601.0 Safari/537.36\",\n *  \"V8-Version\": \"7.2.233\",\n *  \"WebKit-Version\": \"537.36 (@cfede9db1d154de0468cb0538479f34c0755a0f4)\",\n *  \"webSocketDebuggerUrl\": \"ws://localhost:9222/devtools/browser/b0b8a4fb-bb17-4359-9533-a8d9f3908bd8\"\n * }\n */\n\n/**\n * Retrieves web view details previously cached by `getWebviews` call\n *\n * @param {ADB} adb ADB instance\n * @param {string} webview The name of the web view\n * @returns {?WebViewDetails} Either `undefined` or the recent web view details\n */\nhelpers.getWebviewDetails = function getWebviewDetails (adb, webview) {\n  const key = toDetailsCacheKey(adb, webview);\n  return WEBVIEWS_DETAILS_CACHE.get(key);\n};\n\n/**\n * Create Chrome driver capabilities based on the provided\n * Appium capabilities\n *\n * @param {Object} opts User-provided capabilities object\n * @param {string} deviceId The identifier of the Android device under test\n * @param {?WebViewDetails} webViewDetails\n * @returns {Object} The capabilities object.\n * See https://chromedriver.chromium.org/capabilities for more details.\n */\nhelpers.createChromedriverCaps = function createChromedriverCaps (opts, deviceId, webViewDetails) {\n  const caps = { chromeOptions: {} };\n\n  const androidPackage = opts.chromeOptions?.androidPackage\n    || opts.appPackage\n    || webViewDetails?.info?.['Android-Package'];\n  if (androidPackage) {\n    // chromedriver raises an invalid argument error when androidPackage is 'null'\n    caps.chromeOptions.androidPackage = androidPackage;\n  }\n  if (_.isBoolean(opts.chromeUseRunningApp)) {\n    caps.chromeOptions.androidUseRunningApp = opts.chromeUseRunningApp;\n  }\n  if (opts.chromeAndroidPackage) {\n    caps.chromeOptions.androidPackage = opts.chromeAndroidPackage;\n  }\n  if (opts.chromeAndroidActivity) {\n    caps.chromeOptions.androidActivity = opts.chromeAndroidActivity;\n  }\n  if (opts.chromeAndroidProcess) {\n    caps.chromeOptions.androidProcess = opts.chromeAndroidProcess;\n  } else if (webViewDetails?.process?.name && webViewDetails?.process?.id) {\n    caps.chromeOptions.androidProcess = webViewDetails.process.name;\n  }\n  if (_.toLower(opts.browserName) === 'chromium-webview') {\n    caps.chromeOptions.androidActivity = opts.appActivity;\n  }\n  if (opts.pageLoadStrategy) {\n    caps.pageLoadStrategy = opts.pageLoadStrategy;\n  }\n  const isChrome = _.toLower(caps.chromeOptions.androidPackage) === 'chrome';\n  if (_.includes(KNOWN_CHROME_PACKAGE_NAMES, caps.chromeOptions.androidPackage) || isChrome) {\n    // if we have extracted package from context name, it could come in as bare\n    // \"chrome\", and so we should make sure the details are correct, including\n    // not using an activity or process id\n    if (isChrome) {\n      caps.chromeOptions.androidPackage = CHROME_PACKAGE_NAME;\n    }\n    delete caps.chromeOptions.androidActivity;\n    delete caps.chromeOptions.androidProcess;\n  }\n  // add device id from adb\n  caps.chromeOptions.androidDeviceSerial = deviceId;\n\n  if (_.isPlainObject(opts.loggingPrefs) || _.isPlainObject(opts.chromeLoggingPrefs)) {\n    if (opts.loggingPrefs) {\n      logger.warn(`The 'loggingPrefs' cap is deprecated; use the 'chromeLoggingPrefs' cap instead`);\n    }\n    caps.loggingPrefs = opts.chromeLoggingPrefs || opts.loggingPrefs;\n  }\n  if (opts.enablePerformanceLogging) {\n    logger.warn(`The 'enablePerformanceLogging' cap is deprecated; simply use ` +\n      `the 'chromeLoggingPrefs' cap instead, with a 'performance' key set to 'ALL'`);\n    const newPref = {performance: 'ALL'};\n    // don't overwrite other logging prefs that have been sent in if they exist\n    caps.loggingPrefs = caps.loggingPrefs\n      ? Object.assign({}, caps.loggingPrefs, newPref)\n      : newPref;\n  }\n\n  if (opts.chromeOptions?.Arguments) {\n    // merge `Arguments` and `args`\n    opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];\n    delete opts.chromeOptions.Arguments;\n  }\n\n  logger.debug('Precalculated Chromedriver capabilities: ' +\n    JSON.stringify(caps.chromeOptions, null, 2));\n\n  const protectedCapNames = [];\n  for (const [opt, val] of _.toPairs(opts.chromeOptions)) {\n    if (_.isUndefined(caps.chromeOptions[opt])) {\n      caps.chromeOptions[opt] = val;\n    } else {\n      protectedCapNames.push(opt);\n    }\n  }\n  if (!_.isEmpty(protectedCapNames)) {\n    logger.info('The following Chromedriver capabilities cannot be overridden ' +\n      'by the provided chromeOptions:');\n    for (const optName of protectedCapNames) {\n      logger.info(`  ${optName} (${JSON.stringify(opts.chromeOptions[optName])})`);\n    }\n  }\n\n  return caps;\n};\n\nexport default helpers;\nexport { helpers, NATIVE_WIN, WEBVIEW_WIN, WEBVIEW_BASE, CHROMIUM_WIN, KNOWN_CHROME_PACKAGE_NAMES };\n"],"mappings":"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"}