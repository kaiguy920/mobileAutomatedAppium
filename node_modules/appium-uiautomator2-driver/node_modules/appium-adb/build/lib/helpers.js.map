{"version":3,"file":"helpers.js","names":["APKS_EXTENSION","APK_EXTENSION","APK_INSTALL_TIMEOUT","APKS_INSTALL_TIMEOUT","DEFAULT_ADB_EXEC_TIMEOUT","MAIN_ACTION","LAUNCHER_CATEGORY","MODULE_NAME","getModuleRoot","_","memoize","root","node","getModuleRootSync","__filename","Error","getSdkRootFromEnv","process","env","ANDROID_HOME","ANDROID_SDK_ROOT","requireSdkRoot","customRoot","sdkRoot","docMsg","isEmpty","fs","exists","stats","stat","isDirectory","getAndroidPlatformAndPath","propsPaths","glob","cwd","path","resolve","absolute","platformsMapping","propsPath","propsContent","readFile","platformPath","dirname","platform","basename","match","exec","log","warn","parseInt","recentSdkVersion","keys","sort","reverse","result","debug","JSON","stringify","unzipFile","zipPath","dstRoot","zip","assertValidZip","extractAllTo","unsignApk","apkPath","tmpRoot","tempDir","openDir","metaInfFolderName","hasMetaInf","readEntries","entry","fileName","startsWith","tmpZipRoot","rimraf","tmpResultPath","toArchive","unlink","mv","getIMEListFromOutput","stdout","engines","line","split","length","push","trim","replace","getJavaHome","JAVA_HOME","getJavaForOs","javaHome","errMsg","err","message","executableName","system","isWindows","resultPath","which","ign","getOpenSslForOs","binaryName","getApksignerForOs","sysHelpers","getBinaryFromSdkRoot","getApkanalyzerForOs","isShowingLockscreen","dumpsys","some","x","includes","every","test","isCurrentFocusOnKeyguard","m","getSurfaceOrientation","isScreenOnFully","buildStartCmd","startAppOptions","apiLevel","user","waitForLaunch","pkg","activity","action","category","stopApp","flags","cmd","util","hasValue","optionalIntentArguments","parseKeyValue","str","space","indexOf","substring","re","args","apply","flag","flagPos","prevArgs","getSdkToolsVersion","androidHome","propertiesPath","propertiesContent","versionMatcher","RegExp","major","minor","build","getBuildToolsDirs","buildToolsDirs","map","dir","a","b","semver","rcompare","pair","pairs","B","mtime","valueOf","info","extractMatchingPermissions","dumpsysOutput","groupNames","grantedState","groupPatternByName","groupName","escapeRegExp","indentPattern","permissionNamePattern","grantedStatePattern","groupMatch","lines","titleIndent","search","slice","currentIndent","permissionNameMatch","item","permission","grantedStateMatch","granted","filteredResult","filter","isBoolean","pluralize","buildInstallArgs","options","allowTestPackages","useSdcard","grantPermissions","partialInstall","parseManifest","manifest","package","versionCode","versionName","application","activities","activityAliases","enabled","intentFilters","actions","categories","isMainAction","name","isLauncherCategory","parseAaptStrings","rawOutput","configMarker","normalizeStringMatch","s","apkStrings","isInConfig","currentResourceId","isInPluralGroup","quotedStringPattern","os","EOL","trimmedLine","parseAapt2Strings","allLines","extractContent","startIdx","idx","startCharPos","terminationCharMatch","terminationCharPos","index","trimStart","isInCurrentConfig","lineIndex","content","isString","formatConfigMarker","configsGetter","desiredMarker","defaultMarker","configs","toLowerCase","parseJsonData","output","entityName","jsonStr","parse","e","toAvdLocaleArgs","language","country","toUpperCase","locale","getAndroidPrefsRoot","location","ANDROID_EMULATOR_HOME","dirExists","home","HOME","USERPROFILE","escapeShellArg","arg","parseLaunchableActivityNames","mainActivityNameRe","categoryNameRe","blocks","blockStartIndent","block","trimEnd","isNil","hasCategory","activityNameStr","Boolean","fqActivityName","matchComponentName","classString"],"sources":["../../lib/helpers.js"],"sourcesContent":["import path from 'path';\nimport { system, fs, zip, util, tempDir, node } from '@appium/support';\nimport log from './logger.js';\nimport _ from 'lodash';\nimport B from 'bluebird';\nimport semver from 'semver';\nimport os from 'os';\n\nconst APKS_EXTENSION = '.apks';\nconst APK_EXTENSION = '.apk';\nconst APK_INSTALL_TIMEOUT = 60000;\nconst APKS_INSTALL_TIMEOUT = APK_INSTALL_TIMEOUT * 2;\nconst DEFAULT_ADB_EXEC_TIMEOUT = 20000; // in milliseconds\nconst MAIN_ACTION = 'android.intent.action.MAIN';\nconst LAUNCHER_CATEGORY = 'android.intent.category.LAUNCHER';\nconst MODULE_NAME = 'appium-adb';\n\n/**\n * Calculates the path to the current module's root folder\n *\n * @returns {string} The full path to module root\n * @throws {Error} If the current module root folder cannot be determined\n */\nconst getModuleRoot = _.memoize(function getModuleRoot () {\n  const root = node.getModuleRootSync(MODULE_NAME, __filename);\n  if (!root) {\n    throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);\n  }\n  return root;\n});\n\n/**\n * Retrieves the actual path to SDK root folder from the system environment\n *\n * @return {?string} The full path to the SDK root folder\n */\nfunction getSdkRootFromEnv () {\n  return process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT;\n}\n\n/**\n * Retrieves the actual path to SDK root folder\n *\n * @return {string} The full path to the SDK root folder\n * @throws {Error} If either the corresponding env variable is unset or is\n * pointing to an invalid file system entry\n */\nasync function requireSdkRoot (customRoot = null) {\n  const sdkRoot = customRoot || getSdkRootFromEnv();\n  const docMsg = 'Read https://developer.android.com/studio/command-line/variables for more details';\n  if (_.isEmpty(sdkRoot)) {\n    throw new Error(`Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. ${docMsg}`);\n  }\n\n  if (!await fs.exists(sdkRoot)) {\n    throw new Error(`The Android SDK root folder '${sdkRoot}' does not exist on the local file system. ${docMsg}`);\n  }\n  const stats = await fs.stat(sdkRoot);\n  if (!stats.isDirectory()) {\n    throw new Error(`The Android SDK root '${sdkRoot}' must be a folder. ${docMsg}`);\n  }\n  return sdkRoot;\n}\n\n/**\n * @typedef {Object} PlatformInfo\n * @property {?string} platform - The platform name, for example `android-24`\n *                                or `null` if it cannot be found\n * @property {?string} platformPath - Full path to the platform SDK folder\n *                                    or `null` if it cannot be found\n */\n\n/**\n * Retrieve the path to the recent installed Android platform.\n *\n * @return {PlatformInfo} The resulting path to the newest installed platform.\n */\nasync function getAndroidPlatformAndPath (sdkRoot) {\n  const propsPaths = await fs.glob('*/build.prop', {\n    cwd: path.resolve(sdkRoot, 'platforms'),\n    absolute: true,\n  });\n  const platformsMapping = {};\n  for (const propsPath of propsPaths) {\n    const propsContent = await fs.readFile(propsPath, 'utf-8');\n    const platformPath = path.dirname(propsPath);\n    const platform = path.basename(platformPath);\n    const match = /ro\\.build\\.version\\.sdk=(\\d+)/.exec(propsContent);\n    if (!match) {\n      log.warn(`Cannot read the SDK version from '${propsPath}'. Skipping '${platform}'`);\n      continue;\n    }\n    platformsMapping[parseInt(match[1], 10)] = {\n      platform,\n      platformPath,\n    };\n  }\n  if (_.isEmpty(platformsMapping)) {\n    log.warn(`Found zero platform folders at '${path.resolve(sdkRoot, 'platforms')}'. ` +\n      `Do you have any Android SDKs installed?`);\n    return {\n      platform: null,\n      platformPath: null,\n    };\n  }\n\n  const recentSdkVersion = _.keys(platformsMapping).sort().reverse()[0];\n  const result = platformsMapping[recentSdkVersion];\n  log.debug(`Found the most recent Android platform: ${JSON.stringify(result)}`);\n  return result;\n}\n\nasync function unzipFile (zipPath, dstRoot = path.dirname(zipPath)) {\n  log.debug(`Unzipping '${zipPath}' to '${dstRoot}'`);\n  await zip.assertValidZip(zipPath);\n  await zip.extractAllTo(zipPath, dstRoot);\n  log.debug('Unzip successful');\n}\n\n/**\n * Unsigns the given apk by removing the\n * META-INF folder recursively from the archive.\n * !!! The function overwrites the given apk after successful unsigning !!!\n *\n * @param {string} apkPath The path to the apk\n * @returns {boolean} `true` if the apk has been successfully\n * unsigned and overwritten\n * @throws {Error} if there was an error during the unsign operation\n */\nasync function unsignApk (apkPath) {\n  const tmpRoot = await tempDir.openDir();\n  const metaInfFolderName = 'META-INF';\n  try {\n    let hasMetaInf = false;\n    await zip.readEntries(apkPath, ({entry}) => {\n      hasMetaInf = entry.fileName.startsWith(`${metaInfFolderName}/`);\n      // entries iteration stops after `false` is returned\n      return !hasMetaInf;\n    });\n    if (!hasMetaInf) {\n      return false;\n    }\n    const tmpZipRoot = path.resolve(tmpRoot, 'apk');\n    await zip.extractAllTo(apkPath, tmpZipRoot);\n    await fs.rimraf(path.resolve(tmpZipRoot, metaInfFolderName));\n    const tmpResultPath = path.resolve(tmpRoot, path.basename(apkPath));\n    await zip.toArchive(tmpResultPath, {\n      cwd: tmpZipRoot,\n    });\n    await fs.unlink(apkPath);\n    await fs.mv(tmpResultPath, apkPath);\n    return true;\n  } finally {\n    await fs.rimraf(tmpRoot);\n  }\n}\n\nfunction getIMEListFromOutput (stdout) {\n  let engines = [];\n  for (let line of stdout.split('\\n')) {\n    if (line.length > 0 && line[0] !== ' ') {\n      // remove newline and trailing colon, and add to the list\n      engines.push(line.trim().replace(/:$/, ''));\n    }\n  }\n  return engines;\n}\n\nconst getJavaHome = _.memoize(async function getJavaHome () {\n  const result = process.env.JAVA_HOME;\n  if (!result) {\n    throw new Error('The JAVA_HOME environment variable is not set for the current process');\n  }\n  if (!await fs.exists(result)) {\n    throw new Error(`The JAVA_HOME location '${result}' must exist`);\n  }\n  const stats = await fs.stat(result);\n  if (!stats.isDirectory()) {\n    throw new Error(`The JAVA_HOME location '${result}' must be a valid folder`);\n  }\n  return result;\n});\n\nconst getJavaForOs = _.memoize(async function getJavaForOs () {\n  let javaHome;\n  let errMsg;\n  try {\n    javaHome = await getJavaHome();\n  } catch (err) {\n    errMsg = err.message;\n  }\n  const executableName = `java${system.isWindows() ? '.exe' : ''}`;\n  if (javaHome) {\n    const resultPath = path.resolve(javaHome, 'bin', executableName);\n    if (await fs.exists(resultPath)) {\n      return resultPath;\n    }\n  }\n  try {\n    return await fs.which(executableName);\n  } catch (ign) {}\n  throw new Error(`The '${executableName}' binary could not be found ` +\n    `neither in PATH nor under JAVA_HOME (${errMsg || path.resolve(javaHome, 'bin')})`);\n});\n\nconst getOpenSslForOs = async function () {\n  const binaryName = `openssl${system.isWindows() ? '.exe' : ''}`;\n  try {\n    return await fs.which(binaryName);\n  } catch (err) {\n    throw new Error('The openssl tool must be installed on the system and available on the path');\n  }\n};\n\n/**\n * Get the absolute path to apksigner tool\n *\n * @param {Object} sysHelpers - An instance containing systemCallMethods helper methods\n * @returns {string} An absolute path to apksigner tool.\n * @throws {Error} If the tool is not present on the local file system.\n */\nasync function getApksignerForOs (sysHelpers) {\n  return await sysHelpers.getBinaryFromSdkRoot('apksigner.jar');\n}\n\n/**\n * Get the absolute path to apkanalyzer tool.\n * https://developer.android.com/studio/command-line/apkanalyzer.html\n *\n * @param {Object} sysHelpers - An instance containing systemCallMethods helper methods\n * @returns {string} An absolute path to apkanalyzer tool.\n * @throws {Error} If the tool is not present on the local file system.\n */\nasync function getApkanalyzerForOs (sysHelpers) {\n  return await sysHelpers.getBinaryFromSdkRoot('apkanalyzer');\n}\n\n/**\n * Checks mShowingLockscreen or mDreamingLockscreen in dumpsys output to determine\n * if lock screen is showing\n *\n * A note: `adb shell dumpsys trust` performs better while detecting the locked screen state\n * in comparison to `adb dumpsys window` output parsing.\n * But the trust command does not work for `Swipe` unlock pattern.\n *\n * In some Android devices (Probably around Android 10+), `mShowingLockscreen` and `mDreamingLockscreen`\n * do not work to detect lock status. Instead, keyguard preferences helps to detect the lock condition.\n * Some devices such as Android TV do not have keyguard, so we should keep\n * screen condition as this primary method.\n *\n * @param {string} dumpsys - The output of dumpsys window command.\n * @return {boolean} True if lock screen is showing.\n */\nfunction isShowingLockscreen (dumpsys) {\n  return _.some(['mShowingLockscreen=true', 'mDreamingLockscreen=true'], (x) => dumpsys.includes(x))\n    // `mIsShowing` and `mInputRestricted` are `true` in lock condition. `false` is unlock condition.\n    || _.every([/KeyguardStateMonitor[\\n\\s]+mIsShowing=true/, /\\s+mInputRestricted=true/], (x) => x.test(dumpsys));\n}\n\n/*\n * Checks mCurrentFocus in dumpsys output to determine if Keyguard is activated\n */\nfunction isCurrentFocusOnKeyguard (dumpsys) {\n  let m = /mCurrentFocus.+Keyguard/gi.exec(dumpsys);\n  return (m && m.length && m[0]) ? true : false;\n}\n\n/*\n * Reads SurfaceOrientation in dumpsys output\n */\nfunction getSurfaceOrientation (dumpsys) {\n  let m = /SurfaceOrientation: \\d/gi.exec(dumpsys);\n  return m && parseInt(m[0].split(':')[1], 10);\n}\n\n/*\n * Checks mScreenOnFully in dumpsys output to determine if screen is showing\n * Default is true\n */\nfunction isScreenOnFully (dumpsys) {\n  let m = /mScreenOnFully=\\w+/gi.exec(dumpsys);\n  return !m || // if information is missing we assume screen is fully on\n         (m && m.length > 0 && m[0].split('=')[1] === 'true') || false;\n}\n\n/**\n * Builds command line representation for the given\n * application startup options\n *\n * @param {StartAppOptions} startAppOptions - Application options mapping\n * @param {number} apiLevel - The actual OS API level\n * @returns {Array<String>} The actual command line array\n */\nfunction buildStartCmd (startAppOptions, apiLevel) {\n  const {\n    user,\n    waitForLaunch,\n    pkg,\n    activity,\n    action,\n    category,\n    stopApp,\n    flags,\n  } = startAppOptions;\n  const cmd = ['am', 'start'];\n  if (util.hasValue(user)) {\n    cmd.push('--user', user);\n  }\n  if (waitForLaunch) {\n    cmd.push('-W');\n  }\n  if (activity && pkg) {\n    cmd.push('-n', `${pkg}/${activity}`);\n  }\n  if (stopApp && apiLevel >= 15) {\n    cmd.push('-S');\n  }\n  if (action) {\n    cmd.push('-a', action);\n  }\n  if (category) {\n    cmd.push('-c', category);\n  }\n  if (flags) {\n    cmd.push('-f', flags);\n  }\n  if (startAppOptions.optionalIntentArguments) {\n    // expect optionalIntentArguments to be a single string of the form:\n    //     \"-flag key\"\n    //     \"-flag key value\"\n    // or a combination of these (e.g., \"-flag1 key1 -flag2 key2 value2\")\n\n    // take a string and parse out the part before any spaces, and anything after\n    // the first space\n    let parseKeyValue = function (str) {\n      str = str.trim();\n      let space = str.indexOf(' ');\n      if (space === -1) {\n        return str.length ? [str] : [];\n      } else {\n        return [str.substring(0, space).trim(), str.substring(space + 1).trim()];\n      }\n    };\n\n    // cycle through the optionalIntentArguments and pull out the arguments\n    // add a space initially so flags can be distinguished from arguments that\n    // have internal hyphens\n    let optionalIntentArguments = ` ${startAppOptions.optionalIntentArguments}`;\n    let re = / (-[^\\s]+) (.+)/;\n    while (true) { // eslint-disable-line no-constant-condition\n      let args = re.exec(optionalIntentArguments);\n      if (!args) {\n        if (optionalIntentArguments.length) {\n          // no more flags, so the remainder can be treated as 'key' or 'key value'\n          cmd.push.apply(cmd, parseKeyValue(optionalIntentArguments));\n        }\n        // we are done\n        break;\n      }\n\n      // take the flag and see if it is at the beginning of the string\n      // if it is not, then it means we have been through already, and\n      // what is before the flag is the argument for the previous flag\n      let flag = args[1];\n      let flagPos = optionalIntentArguments.indexOf(flag);\n      if (flagPos !== 0) {\n        let prevArgs = optionalIntentArguments.substring(0, flagPos);\n        cmd.push.apply(cmd, parseKeyValue(prevArgs));\n      }\n\n      // add the flag, as there are no more earlier arguments\n      cmd.push(flag);\n\n      // make optionalIntentArguments hold the remainder\n      optionalIntentArguments = args[2];\n    }\n  }\n  return cmd;\n}\n\nconst getSdkToolsVersion = _.memoize(async function getSdkToolsVersion () {\n  const androidHome = process.env.ANDROID_HOME;\n  if (!androidHome) {\n    throw new Error('ANDROID_HOME environment variable is expected to be set');\n  }\n  const propertiesPath = path.resolve(androidHome, 'tools', 'source.properties');\n  if (!await fs.exists(propertiesPath)) {\n    log.warn(`Cannot find ${propertiesPath} file to read SDK version from`);\n    return;\n  }\n  const propertiesContent = await fs.readFile(propertiesPath, 'utf8');\n  const versionMatcher = new RegExp(/Pkg\\.Revision=(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n  const match = versionMatcher.exec(propertiesContent);\n  if (match) {\n    return {\n      major: parseInt(match[1], 10),\n      minor: match[2] ? parseInt(match[2], 10) : 0,\n      build: match[3] ? parseInt(match[3], 10) : 0\n    };\n  }\n  log.warn(`Cannot parse \"Pkg.Revision\" value from ${propertiesPath}`);\n});\n\n/**\n * Retrieves full paths to all 'build-tools' subfolders under the particular\n * SDK root folder\n *\n * @param {string} sdkRoot - The full path to the Android SDK root folder\n * @returns {Array<string>} The full paths to the resulting folders sorted by\n * modification date (the newest comes first) or an empty list if no macthes were found\n */\nconst getBuildToolsDirs = _.memoize(async function getBuildToolsDirs (sdkRoot) {\n  let buildToolsDirs = await fs.glob('*/', {\n    cwd: path.resolve(sdkRoot, 'build-tools'),\n    absolute: true,\n  });\n  try {\n    buildToolsDirs = buildToolsDirs\n      .map((dir) => [path.basename(dir), dir])\n      .sort((a, b) => semver.rcompare(a[0], b[0]))\n      .map((pair) => pair[1]);\n  } catch (err) {\n    log.warn(`Cannot sort build-tools folders ${JSON.stringify(buildToolsDirs.map((dir) => path.basename(dir)))} ` +\n      `by semantic version names.`);\n    log.warn(`Falling back to sorting by modification date. Original error: ${err.message}`);\n    const pairs = await B.map(buildToolsDirs, async (dir) => [(await fs.stat(dir)).mtime.valueOf(), dir]);\n    buildToolsDirs = pairs\n      .sort((a, b) => a[0] < b[0])\n      .map((pair) => pair[1]);\n  }\n  log.info(`Found ${buildToolsDirs.length} 'build-tools' folders under '${sdkRoot}' (newest first):`);\n  for (let dir of buildToolsDirs) {\n    log.info(`    ${dir}`);\n  }\n  return buildToolsDirs;\n});\n\n/**\n * Retrieves the list of permission names encoded in `dumpsys package` command output.\n *\n * @param {string} dumpsysOutput - The actual command output.\n * @param {Array<string>} groupNames - The list of group names to list permissions for.\n * @param {?boolean} grantedState - The expected state of `granted` attribute to filter with.\n *                                  No filtering is done if the parameter is not set.\n * @returns {Array<string>} The list of matched permission names or an empty list if no matches were found.\n */\nconst extractMatchingPermissions = function (dumpsysOutput, groupNames, grantedState = null) {\n  const groupPatternByName = (groupName) => new RegExp(`^(\\\\s*${_.escapeRegExp(groupName)} permissions:[\\\\s\\\\S]+)`, 'm');\n  const indentPattern = /\\S|$/;\n  const permissionNamePattern = /android\\.\\w*\\.?permission\\.\\w+/;\n  const grantedStatePattern = /\\bgranted=(\\w+)/;\n  const result = [];\n  for (const groupName of groupNames) {\n    const groupMatch = groupPatternByName(groupName).exec(dumpsysOutput);\n    if (!groupMatch) {\n      continue;\n    }\n\n    const lines = groupMatch[1].split('\\n');\n    if (lines.length < 2) {\n      continue;\n    }\n\n    const titleIndent = lines[0].search(indentPattern);\n    for (const line of lines.slice(1)) {\n      const currentIndent = line.search(indentPattern);\n      if (currentIndent <= titleIndent) {\n        break;\n      }\n\n      const permissionNameMatch = permissionNamePattern.exec(line);\n      if (!permissionNameMatch) {\n        continue;\n      }\n      const item = {\n        permission: permissionNameMatch[0],\n      };\n      const grantedStateMatch = grantedStatePattern.exec(line);\n      if (grantedStateMatch) {\n        item.granted = grantedStateMatch[1] === 'true';\n      }\n      result.push(item);\n    }\n  }\n\n  const filteredResult = result\n    .filter((item) => !_.isBoolean(grantedState) || item.granted === grantedState)\n    .map((item) => item.permission);\n  log.debug(`Retrieved ${util.pluralize('permission', filteredResult.length, true)} ` +\n    `from ${groupNames} ${util.pluralize('group', groupNames.length, false)}`);\n  return filteredResult;\n};\n\n/**\n * @typedef {Object} InstallOptions\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} replace [true] - Set it to false if you don't want\n *                                      the application to be upgraded/reinstalled\n *                                      if it is already present on the device.\n * @property {boolean} partialInstall [false] - Install apks partially. It is used for 'install-multiple'.\n *                                             https://android.stackexchange.com/questions/111064/what-is-a-partial-application-install-via-adb\n */\n\n/**\n * Transforms given options into the list of `adb install.install-multiple` command arguments\n *\n * @param {number} apiLevel - The current API level\n * @param {?InstallOptions} options - The options mapping to transform\n * @returns {Array<String>} The array of arguments\n */\nfunction buildInstallArgs (apiLevel, options = {}) {\n  const result = [];\n\n  if (!util.hasValue(options.replace) || options.replace) {\n    result.push('-r');\n  }\n  if (options.allowTestPackages) {\n    result.push('-t');\n  }\n  if (options.useSdcard) {\n    result.push('-s');\n  }\n  if (options.grantPermissions) {\n    if (apiLevel < 23) {\n      log.debug(`Skipping permissions grant option, since ` +\n                `the current API level ${apiLevel} does not support applications ` +\n                `permissions customization`);\n    } else {\n      result.push('-g');\n    }\n  }\n  // For multiple-install\n  if (options.partialInstall) {\n    result.push('-p');\n  }\n\n  return result;\n}\n\n/**\n * @typedef {Object} ManifestInfo\n * @property {string} pkg - The application identifier\n * @property {string} activity - The name of the main package activity\n * @property {?number} versionCode - The version code number (might be `NaN`)\n * @property {?string} versionName - The version name (might be `null`)\n */\n\n/**\n * Perform parsing of the manifest object in order\n * to extract some vital values from it\n *\n * @param {object} manifest The manifest content formatted as JSON\n * See https://www.npmjs.com/package/adbkit-apkreader for detailed format description\n * @returns {ManifestInfo}\n */\nfunction parseManifest (manifest) {\n  const result = {\n    pkg: manifest.package,\n    versionCode: parseInt(manifest.versionCode, 10),\n    versionName: manifest.versionName || null,\n  };\n  if (!manifest.application) {\n    return result;\n  }\n\n  // Look for enabled activity or activity-alias with\n  // action == android.intent.action.MAIN and\n  // category == android.intent.category.LAUNCHER\n  for (const activity of [\n    ...manifest.application.activities,\n    ...manifest.application.activityAliases,\n  ]) {\n    if (activity.enabled === false || _.isEmpty(activity.intentFilters)) {\n      continue;\n    }\n\n    for (const {actions, categories} of activity.intentFilters) {\n      if (_.isEmpty(actions) || _.isEmpty(categories)) {\n        continue;\n      }\n\n      const isMainAction = actions.some(({name}) => name === MAIN_ACTION);\n      const isLauncherCategory = categories.some(({name}) => name === LAUNCHER_CATEGORY);\n      if (isMainAction && isLauncherCategory) {\n        result.activity = activity.name;\n        return result;\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Parses apk strings from aapt tool output\n *\n * @param {string} rawOutput The actual tool output\n * @param {string} configMarker The config marker. Usually\n * a language abbreviation or `(default)`\n * @returns {Object} Strings ids to values mapping. Plural\n * values are represented as arrays. If no config found for the\n * given marker then an empty mapping is returned.\n */\nfunction parseAaptStrings (rawOutput, configMarker) {\n  const normalizeStringMatch = function (s) {\n    return s.replace(/\"$/, '').replace(/^\"/, '').replace(/\\\\\"/g, '\"');\n  };\n\n  const apkStrings = {};\n  let isInConfig = false;\n  let currentResourceId = null;\n  let isInPluralGroup = false;\n  // The pattern matches any quoted content including escaped quotes\n  const quotedStringPattern = /\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"/;\n  for (const line of rawOutput.split(os.EOL)) {\n    const trimmedLine = line.trim();\n    if (_.isEmpty(trimmedLine)) {\n      continue;\n    }\n\n    if (['config', 'type', 'spec', 'Package'].some((x) => trimmedLine.startsWith(x))) {\n      isInConfig = trimmedLine.startsWith(`config ${configMarker}:`);\n      currentResourceId = null;\n      isInPluralGroup = false;\n      continue;\n    }\n\n    if (!isInConfig) {\n      continue;\n    }\n\n    if (trimmedLine.startsWith('resource')) {\n      isInPluralGroup = false;\n      currentResourceId = null;\n\n      if (trimmedLine.includes(':string/')) {\n        const match = /:string\\/(\\S+):/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n        }\n      } else if (trimmedLine.includes(':plurals/')) {\n        const match = /:plurals\\/(\\S+):/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n          isInPluralGroup = true;\n        }\n      }\n      continue;\n    }\n\n    if (currentResourceId && trimmedLine.startsWith('(string')) {\n      const match = quotedStringPattern.exec(trimmedLine);\n      if (match) {\n        apkStrings[currentResourceId] = normalizeStringMatch(match[0]);\n      }\n      currentResourceId = null;\n      continue;\n    }\n\n    if (currentResourceId && isInPluralGroup && trimmedLine.includes(': (string')) {\n      const match = quotedStringPattern.exec(trimmedLine);\n      if (match) {\n        apkStrings[currentResourceId] = [\n          ...(apkStrings[currentResourceId] || []),\n          normalizeStringMatch(match[0]),\n        ];\n      }\n      continue;\n    }\n  }\n  return apkStrings;\n}\n\n/**\n * Parses apk strings from aapt2 tool output\n *\n * @param {string} rawOutput The actual tool output\n * @param {string} configMarker The config marker. Usually\n * a language abbreviation or an empty string for the default one\n * @returns {Object} Strings ids to values mapping. Plural\n * values are represented as arrays. If no config found for the\n * given marker then an empty mapping is returned.\n */\nfunction parseAapt2Strings (rawOutput, configMarker) {\n  const allLines = rawOutput.split(os.EOL);\n  function extractContent (startIdx) {\n    let idx = startIdx;\n    const startCharPos = allLines[startIdx].indexOf('\"');\n    if (startCharPos < 0) {\n      return [null, idx];\n    }\n    let result = '';\n    while (idx < allLines.length) {\n      const terminationCharMatch = /\"$/.exec(allLines[idx]);\n      if (terminationCharMatch) {\n        const terminationCharPos = terminationCharMatch.index;\n        if (startIdx === idx) {\n          return [\n            allLines[idx].substring(startCharPos + 1, terminationCharPos),\n            idx\n          ];\n        }\n        return [\n          `${result}\\\\n${_.trimStart(allLines[idx].substring(0, terminationCharPos))}`,\n          idx,\n        ];\n      }\n      if (idx > startIdx) {\n        result += `\\\\n${_.trimStart(allLines[idx])}`;\n      } else {\n        result += allLines[idx].substring(startCharPos + 1);\n      }\n      ++idx;\n    }\n    return [result, idx];\n  }\n\n  const apkStrings = {};\n  let currentResourceId = null;\n  let isInPluralGroup = false;\n  let isInCurrentConfig = false;\n  let lineIndex = 0;\n  while (lineIndex < allLines.length) {\n    const trimmedLine = allLines[lineIndex].trim();\n    if (_.isEmpty(trimmedLine)) {\n      ++lineIndex;\n      continue;\n    }\n\n    if (['type', 'Package'].some((x) => trimmedLine.startsWith(x))) {\n      currentResourceId = null;\n      isInPluralGroup = false;\n      isInCurrentConfig = false;\n      ++lineIndex;\n      continue;\n    }\n\n    if (trimmedLine.startsWith('resource')) {\n      isInPluralGroup = false;\n      currentResourceId = null;\n      isInCurrentConfig = false;\n\n      if (trimmedLine.includes('string/')) {\n        const match = /string\\/(\\S+)/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n        }\n      } else if (trimmedLine.includes('plurals/')) {\n        const match = /plurals\\/(\\S+)/.exec(trimmedLine);\n        if (match) {\n          currentResourceId = match[1];\n          isInPluralGroup = true;\n        }\n      }\n      ++lineIndex;\n      continue;\n    }\n\n    if (currentResourceId) {\n      if (isInPluralGroup) {\n        if (trimmedLine.startsWith('(')) {\n          isInCurrentConfig = trimmedLine.startsWith(`(${configMarker})`);\n          ++lineIndex;\n          continue;\n        }\n        if (isInCurrentConfig) {\n          const [content, idx] = extractContent(lineIndex);\n          lineIndex = idx;\n          if (_.isString(content)) {\n            apkStrings[currentResourceId] = [\n              ...(apkStrings[currentResourceId] || []),\n              content,\n            ];\n          }\n        }\n      } else if (trimmedLine.startsWith(`(${configMarker})`)) {\n        const [content, idx] = extractContent(lineIndex);\n        lineIndex = idx;\n        if (_.isString(content)) {\n          apkStrings[currentResourceId] = content;\n        }\n        currentResourceId = null;\n      }\n    }\n    ++lineIndex;\n  }\n  return apkStrings;\n}\n\n/**\n * Formats the config marker, which is then passed to parse.. methods\n * to make it compatible with resource formats generated by aapt(2) tool\n *\n * @param {Function} configsGetter The function whose result is a list\n * of apk configs\n * @param {string} desiredMarker The desired config marker value\n * @param {string} defaultMarker The default config marker value\n * @return {string} The formatted config marker\n */\nasync function formatConfigMarker (configsGetter, desiredMarker, defaultMarker) {\n  let configMarker = desiredMarker || defaultMarker;\n  if (configMarker.includes('-') && !configMarker.includes('-r')) {\n    configMarker = configMarker.replace('-', '-r');\n  }\n  const configs = await configsGetter();\n  log.debug(`Resource configurations: ${JSON.stringify(configs)}`);\n  // Assume the 'en' configuration is the default one\n  if (configMarker.toLowerCase().startsWith('en')\n    && !configs.some((x) => x.trim() === configMarker)) {\n    log.debug(`Resource configuration name '${configMarker}' is unknown. ` +\n      `Replacing it with '${defaultMarker}'`);\n    configMarker = defaultMarker;\n  } else {\n    log.debug(`Selected configuration: '${configMarker}'`);\n  }\n  return configMarker;\n}\n\n/**\n * Parses the output in JSON format retrieved from\n * the corresponding Appium Settings broadcast calls\n *\n * @param {string} output The actual command output\n * @param {string} entityName The name of the entity which is\n * going to be parsed\n * @returns {Object} The parsed JSON object\n * @throws {Error} If the output cannot be parsed\n * as a valid JSON\n */\nfunction parseJsonData (output, entityName) {\n  if (!/\\bresult=-1\\b/.test(output) || !/\\bdata=\"/.test(output)) {\n    log.debug(output);\n    throw new Error(`Cannot retrieve ${entityName} from the device. ` +\n      'Check the server log for more details');\n  }\n  const match = /\\bdata=(\".+)/.exec(output);\n  if (!match) {\n    log.debug(output);\n    throw new Error(`Cannot parse ${entityName} from the command output. ` +\n      'Check the server log for more details');\n  }\n  const jsonStr = _.trim(match[1]).replace(/(^\")|(\"$)/g, '');\n  try {\n    return JSON.parse(jsonStr);\n  } catch (e) {\n    log.debug(jsonStr);\n    throw new Error(`Cannot parse ${entityName} from the resulting data string. ` +\n      'Check the server log for more details');\n  }\n}\n\n/**\n * Transforms the given language and country abbreviations\n * to AVD arguments array\n *\n * @param {?string} language Language name, for example 'fr'\n * @param {?string} country Country name, for example 'CA'\n * @returns {Array<string>} The generated arguments. The\n * resulting array might be empty if both arguments are empty\n */\nfunction toAvdLocaleArgs (language, country) {\n  const result = [];\n  if (language && _.isString(language)) {\n    result.push('-prop', `persist.sys.language=${language.toLowerCase()}`);\n  }\n  if (country && _.isString(country)) {\n    result.push('-prop', `persist.sys.country=${country.toUpperCase()}`);\n  }\n  let locale;\n  if (_.isString(language) && _.isString(country) && language && country) {\n    locale = language.toLowerCase() + '-' + country.toUpperCase();\n  } else if (language && _.isString(language)) {\n    locale = language.toLowerCase();\n  } else if (country && _.isString(country)) {\n    locale = country;\n  }\n  if (locale) {\n    result.push('-prop', `persist.sys.locale=${locale}`);\n  }\n  return result;\n}\n\n/**\n * Retrieves the full path to the Android preferences root\n *\n * @returns {?string} The full path to the folder or `null` if the folder cannot be found\n */\nasync function getAndroidPrefsRoot () {\n  let location = process.env.ANDROID_EMULATOR_HOME;\n  if (await dirExists(location)) {\n    return location;\n  }\n\n  if (location) {\n    log.warn(`The value of the ANDROID_EMULATOR_HOME environment variable '${location}' is not an existing directory`);\n  }\n\n  const home = process.env.HOME || process.env.USERPROFILE;\n  if (home) {\n    location = path.resolve(home, '.android');\n  }\n\n  if (!await dirExists(location)) {\n    log.debug(`Android config root '${location}' is not an existing directory`);\n    return null;\n  }\n\n  return location;\n}\n\n/**\n * Check if a path exists on the filesystem and is a directory\n *\n * @param {?string} location The full path to the directory\n * @returns {boolean}\n */\nasync function dirExists (location) {\n  return location\n    && await fs.exists(location)\n    && (await fs.stat(location)).isDirectory();\n}\n\n/**\n * Escapes special characters in command line arguments.\n * This is needed to avoid possible issues with how system `spawn`\n * call handles them.\n * See https://discuss.appium.io/t/how-to-modify-wd-proxy-and-uiautomator2-source-code-to-support-unicode/33466\n * for more details.\n *\n * @param {string} arg Non-escaped argument string\n * @returns The escaped argument\n */\nfunction escapeShellArg (arg) {\n  arg = `${arg}`;\n  if (system.isWindows()) {\n    return /[&|^\\s]/.test(arg) ? `\"${arg.replace(/\"/g, '\"\"')}\"` : arg;\n  }\n  return arg.replace(/&/g, '\\\\&');\n}\n\n/**\n * Parses the name of launchable package activity\n * from dumpsys output.\n *\n * @param {string} dumpsys the actual dumpsys output\n * @returns {string[]} Either the fully qualified\n * activity name as a single list item or an empty list if nothing could be parsed.\n * In Android 6 and older there is no reliable way to determine\n * the category name for the given activity, so this API just\n * returns all activity names belonging to 'android.intent.action.MAIN'\n * with the expectation that the app manifest could be parsed next\n * in order to determine category names for these.\n */\nfunction parseLaunchableActivityNames (dumpsys) {\n  const mainActivityNameRe = new RegExp(`^\\\\s*${_.escapeRegExp(MAIN_ACTION)}:$`);\n  const categoryNameRe = /^\\s*Category:\\s+\"([a-zA-Z0-9._/-]+)\"$/;\n  const blocks = [];\n  let blockStartIndent;\n  let block = [];\n  for (const line of dumpsys.split('\\n').map(_.trimEnd)) {\n    const currentIndent = line.length - _.trimStart(line).length;\n    if (mainActivityNameRe.test(line)) {\n      blockStartIndent = currentIndent;\n      if (!_.isEmpty(block)) {\n        blocks.push(block);\n        block = [];\n      }\n      continue;\n    }\n    if (_.isNil(blockStartIndent)) {\n      continue;\n    }\n\n    if (currentIndent > blockStartIndent) {\n      block.push(line);\n    } else {\n      if (!_.isEmpty(block)) {\n        blocks.push(block);\n        block = [];\n      }\n      blockStartIndent = null;\n    }\n  }\n  if (!_.isEmpty(block)) {\n    blocks.push(block);\n  }\n\n  const result = [];\n  for (const item of blocks) {\n    let hasCategory = false;\n    let isLauncherCategory = false;\n    for (const line of item) {\n      const match = categoryNameRe.exec(line);\n      if (!match) {\n        continue;\n      }\n\n      hasCategory = true;\n      isLauncherCategory = match[1] === LAUNCHER_CATEGORY;\n      break;\n    }\n    // On older Android versions the category name\n    // might not be listed, so we just try to fetch\n    // all matches instead\n    if (hasCategory && !isLauncherCategory) {\n      continue;\n    }\n\n    for (const activityNameStr of item.map(_.trim).filter(Boolean)) {\n      const fqActivityName = activityNameStr.split(/\\s+/)[1];\n      if (!matchComponentName(fqActivityName)) {\n        continue;\n      }\n\n      if (isLauncherCategory) {\n        return [fqActivityName];\n      }\n      result.push(fqActivityName);\n    }\n  }\n  return result;\n}\n\n/**\n * Check if the given string is a valid component name\n *\n * @param {string} classString The string to verify\n * @return {?Array<Match>} The result of Regexp.exec operation\n * or _null_ if no matches are found\n */\nfunction matchComponentName (classString) {\n  // some.package/some.package.Activity\n  return /^[a-z0-9./_]+$/i.exec(classString);\n}\n\nexport {\n  getAndroidPlatformAndPath, unzipFile,\n  getIMEListFromOutput, getJavaForOs, isShowingLockscreen, isCurrentFocusOnKeyguard,\n  getSurfaceOrientation, isScreenOnFully, buildStartCmd, getJavaHome,\n  getSdkToolsVersion, getApksignerForOs, getBuildToolsDirs,\n  getApkanalyzerForOs, getOpenSslForOs, extractMatchingPermissions, APKS_EXTENSION,\n  APK_INSTALL_TIMEOUT, APKS_INSTALL_TIMEOUT, buildInstallArgs, APK_EXTENSION,\n  DEFAULT_ADB_EXEC_TIMEOUT, parseManifest, parseAaptStrings, parseAapt2Strings,\n  formatConfigMarker, parseJsonData, unsignApk, toAvdLocaleArgs, requireSdkRoot,\n  getSdkRootFromEnv, getAndroidPrefsRoot, dirExists, escapeShellArg,\n  parseLaunchableActivityNames, matchComponentName, getModuleRoot\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,cAAc,GAAG,OAAvB;;AACA,MAAMC,aAAa,GAAG,MAAtB;;AACA,MAAMC,mBAAmB,GAAG,KAA5B;;AACA,MAAMC,oBAAoB,GAAGD,mBAAmB,GAAG,CAAnD;;AACA,MAAME,wBAAwB,GAAG,KAAjC;;AACA,MAAMC,WAAW,GAAG,4BAApB;AACA,MAAMC,iBAAiB,GAAG,kCAA1B;AACA,MAAMC,WAAW,GAAG,YAApB;;AAQA,MAAMC,aAAa,GAAGC,eAAA,CAAEC,OAAF,CAAU,SAASF,aAAT,GAA0B;EACxD,MAAMG,IAAI,GAAGC,aAAA,CAAKC,iBAAL,CAAuBN,WAAvB,EAAoCO,UAApC,CAAb;;EACA,IAAI,CAACH,IAAL,EAAW;IACT,MAAM,IAAII,KAAJ,CAAW,sCAAqCR,WAAY,iBAA5D,CAAN;EACD;;EACD,OAAOI,IAAP;AACD,CANqB,CAAtB;;;;AAaA,SAASK,iBAAT,GAA8B;EAC5B,OAAOC,OAAO,CAACC,GAAR,CAAYC,YAAZ,IAA4BF,OAAO,CAACC,GAAR,CAAYE,gBAA/C;AACD;;AASD,eAAeC,cAAf,CAA+BC,UAAU,GAAG,IAA5C,EAAkD;EAChD,MAAMC,OAAO,GAAGD,UAAU,IAAIN,iBAAiB,EAA/C;EACA,MAAMQ,MAAM,GAAG,mFAAf;;EACA,IAAIf,eAAA,CAAEgB,OAAF,CAAUF,OAAV,CAAJ,EAAwB;IACtB,MAAM,IAAIR,KAAJ,CAAW,gFAA+ES,MAAO,EAAjG,CAAN;EACD;;EAED,IAAI,EAAC,MAAME,WAAA,CAAGC,MAAH,CAAUJ,OAAV,CAAP,CAAJ,EAA+B;IAC7B,MAAM,IAAIR,KAAJ,CAAW,gCAA+BQ,OAAQ,8CAA6CC,MAAO,EAAtG,CAAN;EACD;;EACD,MAAMI,KAAK,GAAG,MAAMF,WAAA,CAAGG,IAAH,CAAQN,OAAR,CAApB;;EACA,IAAI,CAACK,KAAK,CAACE,WAAN,EAAL,EAA0B;IACxB,MAAM,IAAIf,KAAJ,CAAW,yBAAwBQ,OAAQ,uBAAsBC,MAAO,EAAxE,CAAN;EACD;;EACD,OAAOD,OAAP;AACD;;AAeD,eAAeQ,yBAAf,CAA0CR,OAA1C,EAAmD;EACjD,MAAMS,UAAU,GAAG,MAAMN,WAAA,CAAGO,IAAH,CAAQ,cAAR,EAAwB;IAC/CC,GAAG,EAAEC,aAAA,CAAKC,OAAL,CAAab,OAAb,EAAsB,WAAtB,CAD0C;IAE/Cc,QAAQ,EAAE;EAFqC,CAAxB,CAAzB;EAIA,MAAMC,gBAAgB,GAAG,EAAzB;;EACA,KAAK,MAAMC,SAAX,IAAwBP,UAAxB,EAAoC;IAClC,MAAMQ,YAAY,GAAG,MAAMd,WAAA,CAAGe,QAAH,CAAYF,SAAZ,EAAuB,OAAvB,CAA3B;;IACA,MAAMG,YAAY,GAAGP,aAAA,CAAKQ,OAAL,CAAaJ,SAAb,CAArB;;IACA,MAAMK,QAAQ,GAAGT,aAAA,CAAKU,QAAL,CAAcH,YAAd,CAAjB;;IACA,MAAMI,KAAK,GAAG,gCAAgCC,IAAhC,CAAqCP,YAArC,CAAd;;IACA,IAAI,CAACM,KAAL,EAAY;MACVE,eAAA,CAAIC,IAAJ,CAAU,qCAAoCV,SAAU,gBAAeK,QAAS,GAAhF;;MACA;IACD;;IACDN,gBAAgB,CAACY,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAT,CAAhB,GAA2C;MACzCF,QADyC;MAEzCF;IAFyC,CAA3C;EAID;;EACD,IAAIjC,eAAA,CAAEgB,OAAF,CAAUa,gBAAV,CAAJ,EAAiC;IAC/BU,eAAA,CAAIC,IAAJ,CAAU,mCAAkCd,aAAA,CAAKC,OAAL,CAAab,OAAb,EAAsB,WAAtB,CAAmC,KAAtE,GACN,yCADH;;IAEA,OAAO;MACLqB,QAAQ,EAAE,IADL;MAELF,YAAY,EAAE;IAFT,CAAP;EAID;;EAED,MAAMS,gBAAgB,GAAG1C,eAAA,CAAE2C,IAAF,CAAOd,gBAAP,EAAyBe,IAAzB,GAAgCC,OAAhC,GAA0C,CAA1C,CAAzB;;EACA,MAAMC,MAAM,GAAGjB,gBAAgB,CAACa,gBAAD,CAA/B;;EACAH,eAAA,CAAIQ,KAAJ,CAAW,2CAA0CC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAuB,EAA5E;;EACA,OAAOA,MAAP;AACD;;AAED,eAAeI,SAAf,CAA0BC,OAA1B,EAAmCC,OAAO,GAAG1B,aAAA,CAAKQ,OAAL,CAAaiB,OAAb,CAA7C,EAAoE;EAClEZ,eAAA,CAAIQ,KAAJ,CAAW,cAAaI,OAAQ,SAAQC,OAAQ,GAAhD;;EACA,MAAMC,YAAA,CAAIC,cAAJ,CAAmBH,OAAnB,CAAN;EACA,MAAME,YAAA,CAAIE,YAAJ,CAAiBJ,OAAjB,EAA0BC,OAA1B,CAAN;;EACAb,eAAA,CAAIQ,KAAJ,CAAU,kBAAV;AACD;;AAYD,eAAeS,SAAf,CAA0BC,OAA1B,EAAmC;EACjC,MAAMC,OAAO,GAAG,MAAMC,gBAAA,CAAQC,OAAR,EAAtB;EACA,MAAMC,iBAAiB,GAAG,UAA1B;;EACA,IAAI;IACF,IAAIC,UAAU,GAAG,KAAjB;IACA,MAAMT,YAAA,CAAIU,WAAJ,CAAgBN,OAAhB,EAAyB,CAAC;MAACO;IAAD,CAAD,KAAa;MAC1CF,UAAU,GAAGE,KAAK,CAACC,QAAN,CAAeC,UAAf,CAA2B,GAAEL,iBAAkB,GAA/C,CAAb;MAEA,OAAO,CAACC,UAAR;IACD,CAJK,CAAN;;IAKA,IAAI,CAACA,UAAL,EAAiB;MACf,OAAO,KAAP;IACD;;IACD,MAAMK,UAAU,GAAGzC,aAAA,CAAKC,OAAL,CAAa+B,OAAb,EAAsB,KAAtB,CAAnB;;IACA,MAAML,YAAA,CAAIE,YAAJ,CAAiBE,OAAjB,EAA0BU,UAA1B,CAAN;IACA,MAAMlD,WAAA,CAAGmD,MAAH,CAAU1C,aAAA,CAAKC,OAAL,CAAawC,UAAb,EAAyBN,iBAAzB,CAAV,CAAN;;IACA,MAAMQ,aAAa,GAAG3C,aAAA,CAAKC,OAAL,CAAa+B,OAAb,EAAsBhC,aAAA,CAAKU,QAAL,CAAcqB,OAAd,CAAtB,CAAtB;;IACA,MAAMJ,YAAA,CAAIiB,SAAJ,CAAcD,aAAd,EAA6B;MACjC5C,GAAG,EAAE0C;IAD4B,CAA7B,CAAN;IAGA,MAAMlD,WAAA,CAAGsD,MAAH,CAAUd,OAAV,CAAN;IACA,MAAMxC,WAAA,CAAGuD,EAAH,CAAMH,aAAN,EAAqBZ,OAArB,CAAN;IACA,OAAO,IAAP;EACD,CApBD,SAoBU;IACR,MAAMxC,WAAA,CAAGmD,MAAH,CAAUV,OAAV,CAAN;EACD;AACF;;AAED,SAASe,oBAAT,CAA+BC,MAA/B,EAAuC;EACrC,IAAIC,OAAO,GAAG,EAAd;;EACA,KAAK,IAAIC,IAAT,IAAiBF,MAAM,CAACG,KAAP,CAAa,IAAb,CAAjB,EAAqC;IACnC,IAAID,IAAI,CAACE,MAAL,GAAc,CAAd,IAAmBF,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAnC,EAAwC;MAEtCD,OAAO,CAACI,IAAR,CAAaH,IAAI,CAACI,IAAL,GAAYC,OAAZ,CAAoB,IAApB,EAA0B,EAA1B,CAAb;IACD;EACF;;EACD,OAAON,OAAP;AACD;;AAED,MAAMO,WAAW,GAAGlF,eAAA,CAAEC,OAAF,CAAU,eAAeiF,WAAf,GAA8B;EAC1D,MAAMpC,MAAM,GAAGtC,OAAO,CAACC,GAAR,CAAY0E,SAA3B;;EACA,IAAI,CAACrC,MAAL,EAAa;IACX,MAAM,IAAIxC,KAAJ,CAAU,uEAAV,CAAN;EACD;;EACD,IAAI,EAAC,MAAMW,WAAA,CAAGC,MAAH,CAAU4B,MAAV,CAAP,CAAJ,EAA8B;IAC5B,MAAM,IAAIxC,KAAJ,CAAW,2BAA0BwC,MAAO,cAA5C,CAAN;EACD;;EACD,MAAM3B,KAAK,GAAG,MAAMF,WAAA,CAAGG,IAAH,CAAQ0B,MAAR,CAApB;;EACA,IAAI,CAAC3B,KAAK,CAACE,WAAN,EAAL,EAA0B;IACxB,MAAM,IAAIf,KAAJ,CAAW,2BAA0BwC,MAAO,0BAA5C,CAAN;EACD;;EACD,OAAOA,MAAP;AACD,CAbmB,CAApB;;;;AAeA,MAAMsC,YAAY,GAAGpF,eAAA,CAAEC,OAAF,CAAU,eAAemF,YAAf,GAA+B;EAC5D,IAAIC,QAAJ;EACA,IAAIC,MAAJ;;EACA,IAAI;IACFD,QAAQ,GAAG,MAAMH,WAAW,EAA5B;EACD,CAFD,CAEE,OAAOK,GAAP,EAAY;IACZD,MAAM,GAAGC,GAAG,CAACC,OAAb;EACD;;EACD,MAAMC,cAAc,GAAI,OAAMC,eAAA,CAAOC,SAAP,KAAqB,MAArB,GAA8B,EAAG,EAA/D;;EACA,IAAIN,QAAJ,EAAc;IACZ,MAAMO,UAAU,GAAGlE,aAAA,CAAKC,OAAL,CAAa0D,QAAb,EAAuB,KAAvB,EAA8BI,cAA9B,CAAnB;;IACA,IAAI,MAAMxE,WAAA,CAAGC,MAAH,CAAU0E,UAAV,CAAV,EAAiC;MAC/B,OAAOA,UAAP;IACD;EACF;;EACD,IAAI;IACF,OAAO,MAAM3E,WAAA,CAAG4E,KAAH,CAASJ,cAAT,CAAb;EACD,CAFD,CAEE,OAAOK,GAAP,EAAY,CAAE;;EAChB,MAAM,IAAIxF,KAAJ,CAAW,QAAOmF,cAAe,8BAAvB,GACb,wCAAuCH,MAAM,IAAI5D,aAAA,CAAKC,OAAL,CAAa0D,QAAb,EAAuB,KAAvB,CAA8B,GAD5E,CAAN;AAED,CApBoB,CAArB;;;;AAsBA,MAAMU,eAAe,GAAG,kBAAkB;EACxC,MAAMC,UAAU,GAAI,UAASN,eAAA,CAAOC,SAAP,KAAqB,MAArB,GAA8B,EAAG,EAA9D;;EACA,IAAI;IACF,OAAO,MAAM1E,WAAA,CAAG4E,KAAH,CAASG,UAAT,CAAb;EACD,CAFD,CAEE,OAAOT,GAAP,EAAY;IACZ,MAAM,IAAIjF,KAAJ,CAAU,4EAAV,CAAN;EACD;AACF,CAPD;;;;AAgBA,eAAe2F,iBAAf,CAAkCC,UAAlC,EAA8C;EAC5C,OAAO,MAAMA,UAAU,CAACC,oBAAX,CAAgC,eAAhC,CAAb;AACD;;AAUD,eAAeC,mBAAf,CAAoCF,UAApC,EAAgD;EAC9C,OAAO,MAAMA,UAAU,CAACC,oBAAX,CAAgC,aAAhC,CAAb;AACD;;AAkBD,SAASE,mBAAT,CAA8BC,OAA9B,EAAuC;EACrC,OAAOtG,eAAA,CAAEuG,IAAF,CAAO,CAAC,yBAAD,EAA4B,0BAA5B,CAAP,EAAiEC,CAAD,IAAOF,OAAO,CAACG,QAAR,CAAiBD,CAAjB,CAAvE,KAEFxG,eAAA,CAAE0G,KAAF,CAAQ,CAAC,4CAAD,EAA+C,0BAA/C,CAAR,EAAqFF,CAAD,IAAOA,CAAC,CAACG,IAAF,CAAOL,OAAP,CAA3F,CAFL;AAGD;;AAKD,SAASM,wBAAT,CAAmCN,OAAnC,EAA4C;EAC1C,IAAIO,CAAC,GAAG,4BAA4BvE,IAA5B,CAAiCgE,OAAjC,CAAR;EACA,OAAQO,CAAC,IAAIA,CAAC,CAAC/B,MAAP,IAAiB+B,CAAC,CAAC,CAAD,CAAnB,GAA0B,IAA1B,GAAiC,KAAxC;AACD;;AAKD,SAASC,qBAAT,CAAgCR,OAAhC,EAAyC;EACvC,IAAIO,CAAC,GAAG,2BAA2BvE,IAA3B,CAAgCgE,OAAhC,CAAR;EACA,OAAOO,CAAC,IAAIpE,QAAQ,CAACoE,CAAC,CAAC,CAAD,CAAD,CAAKhC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,EAAqB,EAArB,CAApB;AACD;;AAMD,SAASkC,eAAT,CAA0BT,OAA1B,EAAmC;EACjC,IAAIO,CAAC,GAAG,uBAAuBvE,IAAvB,CAA4BgE,OAA5B,CAAR;EACA,OAAO,CAACO,CAAD,IACCA,CAAC,IAAIA,CAAC,CAAC/B,MAAF,GAAW,CAAhB,IAAqB+B,CAAC,CAAC,CAAD,CAAD,CAAKhC,KAAL,CAAW,GAAX,EAAgB,CAAhB,MAAuB,MAD7C,IACwD,KAD/D;AAED;;AAUD,SAASmC,aAAT,CAAwBC,eAAxB,EAAyCC,QAAzC,EAAmD;EACjD,MAAM;IACJC,IADI;IAEJC,aAFI;IAGJC,GAHI;IAIJC,QAJI;IAKJC,MALI;IAMJC,QANI;IAOJC,OAPI;IAQJC;EARI,IASFT,eATJ;EAUA,MAAMU,GAAG,GAAG,CAAC,IAAD,EAAO,OAAP,CAAZ;;EACA,IAAIC,aAAA,CAAKC,QAAL,CAAcV,IAAd,CAAJ,EAAyB;IACvBQ,GAAG,CAAC5C,IAAJ,CAAS,QAAT,EAAmBoC,IAAnB;EACD;;EACD,IAAIC,aAAJ,EAAmB;IACjBO,GAAG,CAAC5C,IAAJ,CAAS,IAAT;EACD;;EACD,IAAIuC,QAAQ,IAAID,GAAhB,EAAqB;IACnBM,GAAG,CAAC5C,IAAJ,CAAS,IAAT,EAAgB,GAAEsC,GAAI,IAAGC,QAAS,EAAlC;EACD;;EACD,IAAIG,OAAO,IAAIP,QAAQ,IAAI,EAA3B,EAA+B;IAC7BS,GAAG,CAAC5C,IAAJ,CAAS,IAAT;EACD;;EACD,IAAIwC,MAAJ,EAAY;IACVI,GAAG,CAAC5C,IAAJ,CAAS,IAAT,EAAewC,MAAf;EACD;;EACD,IAAIC,QAAJ,EAAc;IACZG,GAAG,CAAC5C,IAAJ,CAAS,IAAT,EAAeyC,QAAf;EACD;;EACD,IAAIE,KAAJ,EAAW;IACTC,GAAG,CAAC5C,IAAJ,CAAS,IAAT,EAAe2C,KAAf;EACD;;EACD,IAAIT,eAAe,CAACa,uBAApB,EAA6C;IAQ3C,IAAIC,aAAa,GAAG,UAAUC,GAAV,EAAe;MACjCA,GAAG,GAAGA,GAAG,CAAChD,IAAJ,EAAN;MACA,IAAIiD,KAAK,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAZ;;MACA,IAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;QAChB,OAAOD,GAAG,CAAClD,MAAJ,GAAa,CAACkD,GAAD,CAAb,GAAqB,EAA5B;MACD,CAFD,MAEO;QACL,OAAO,CAACA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBF,KAAjB,EAAwBjD,IAAxB,EAAD,EAAiCgD,GAAG,CAACG,SAAJ,CAAcF,KAAK,GAAG,CAAtB,EAAyBjD,IAAzB,EAAjC,CAAP;MACD;IACF,CARD;;IAaA,IAAI8C,uBAAuB,GAAI,IAAGb,eAAe,CAACa,uBAAwB,EAA1E;IACA,IAAIM,EAAE,GAAG,iBAAT;;IACA,OAAO,IAAP,EAAa;MACX,IAAIC,IAAI,GAAGD,EAAE,CAAC9F,IAAH,CAAQwF,uBAAR,CAAX;;MACA,IAAI,CAACO,IAAL,EAAW;QACT,IAAIP,uBAAuB,CAAChD,MAA5B,EAAoC;UAElC6C,GAAG,CAAC5C,IAAJ,CAASuD,KAAT,CAAeX,GAAf,EAAoBI,aAAa,CAACD,uBAAD,CAAjC;QACD;;QAED;MACD;;MAKD,IAAIS,IAAI,GAAGF,IAAI,CAAC,CAAD,CAAf;MACA,IAAIG,OAAO,GAAGV,uBAAuB,CAACI,OAAxB,CAAgCK,IAAhC,CAAd;;MACA,IAAIC,OAAO,KAAK,CAAhB,EAAmB;QACjB,IAAIC,QAAQ,GAAGX,uBAAuB,CAACK,SAAxB,CAAkC,CAAlC,EAAqCK,OAArC,CAAf;QACAb,GAAG,CAAC5C,IAAJ,CAASuD,KAAT,CAAeX,GAAf,EAAoBI,aAAa,CAACU,QAAD,CAAjC;MACD;;MAGDd,GAAG,CAAC5C,IAAJ,CAASwD,IAAT;MAGAT,uBAAuB,GAAGO,IAAI,CAAC,CAAD,CAA9B;IACD;EACF;;EACD,OAAOV,GAAP;AACD;;AAED,MAAMe,kBAAkB,GAAG1I,eAAA,CAAEC,OAAF,CAAU,eAAeyI,kBAAf,GAAqC;EACxE,MAAMC,WAAW,GAAGnI,OAAO,CAACC,GAAR,CAAYC,YAAhC;;EACA,IAAI,CAACiI,WAAL,EAAkB;IAChB,MAAM,IAAIrI,KAAJ,CAAU,yDAAV,CAAN;EACD;;EACD,MAAMsI,cAAc,GAAGlH,aAAA,CAAKC,OAAL,CAAagH,WAAb,EAA0B,OAA1B,EAAmC,mBAAnC,CAAvB;;EACA,IAAI,EAAC,MAAM1H,WAAA,CAAGC,MAAH,CAAU0H,cAAV,CAAP,CAAJ,EAAsC;IACpCrG,eAAA,CAAIC,IAAJ,CAAU,eAAcoG,cAAe,gCAAvC;;IACA;EACD;;EACD,MAAMC,iBAAiB,GAAG,MAAM5H,WAAA,CAAGe,QAAH,CAAY4G,cAAZ,EAA4B,MAA5B,CAAhC;EACA,MAAME,cAAc,GAAG,IAAIC,MAAJ,CAAW,uCAAX,CAAvB;EACA,MAAM1G,KAAK,GAAGyG,cAAc,CAACxG,IAAf,CAAoBuG,iBAApB,CAAd;;EACA,IAAIxG,KAAJ,EAAW;IACT,OAAO;MACL2G,KAAK,EAAEvG,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADV;MAEL4G,KAAK,EAAE5G,KAAK,CAAC,CAAD,CAAL,GAAWI,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAnB,GAAoC,CAFtC;MAGL6G,KAAK,EAAE7G,KAAK,CAAC,CAAD,CAAL,GAAWI,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAnB,GAAoC;IAHtC,CAAP;EAKD;;EACDE,eAAA,CAAIC,IAAJ,CAAU,0CAAyCoG,cAAe,EAAlE;AACD,CArB0B,CAA3B;;;;AA+BA,MAAMO,iBAAiB,GAAGnJ,eAAA,CAAEC,OAAF,CAAU,eAAekJ,iBAAf,CAAkCrI,OAAlC,EAA2C;EAC7E,IAAIsI,cAAc,GAAG,MAAMnI,WAAA,CAAGO,IAAH,CAAQ,IAAR,EAAc;IACvCC,GAAG,EAAEC,aAAA,CAAKC,OAAL,CAAab,OAAb,EAAsB,aAAtB,CADkC;IAEvCc,QAAQ,EAAE;EAF6B,CAAd,CAA3B;;EAIA,IAAI;IACFwH,cAAc,GAAGA,cAAc,CAC5BC,GADc,CACTC,GAAD,IAAS,CAAC5H,aAAA,CAAKU,QAAL,CAAckH,GAAd,CAAD,EAAqBA,GAArB,CADC,EAEd1G,IAFc,CAET,CAAC2G,CAAD,EAAIC,CAAJ,KAAUC,eAAA,CAAOC,QAAP,CAAgBH,CAAC,CAAC,CAAD,CAAjB,EAAsBC,CAAC,CAAC,CAAD,CAAvB,CAFD,EAGdH,GAHc,CAGTM,IAAD,IAAUA,IAAI,CAAC,CAAD,CAHJ,CAAjB;EAID,CALD,CAKE,OAAOpE,GAAP,EAAY;IACZhD,eAAA,CAAIC,IAAJ,CAAU,mCAAkCQ,IAAI,CAACC,SAAL,CAAemG,cAAc,CAACC,GAAf,CAAoBC,GAAD,IAAS5H,aAAA,CAAKU,QAAL,CAAckH,GAAd,CAA5B,CAAf,CAAgE,GAAnG,GACN,4BADH;;IAEA/G,eAAA,CAAIC,IAAJ,CAAU,iEAAgE+C,GAAG,CAACC,OAAQ,EAAtF;;IACA,MAAMoE,KAAK,GAAG,MAAMC,iBAAA,CAAER,GAAF,CAAMD,cAAN,EAAsB,MAAOE,GAAP,IAAe,CAAC,CAAC,MAAMrI,WAAA,CAAGG,IAAH,CAAQkI,GAAR,CAAP,EAAqBQ,KAArB,CAA2BC,OAA3B,EAAD,EAAuCT,GAAvC,CAArC,CAApB;IACAF,cAAc,GAAGQ,KAAK,CACnBhH,IADc,CACT,CAAC2G,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CADT,EAEdH,GAFc,CAETM,IAAD,IAAUA,IAAI,CAAC,CAAD,CAFJ,CAAjB;EAGD;;EACDpH,eAAA,CAAIyH,IAAJ,CAAU,SAAQZ,cAAc,CAACtE,MAAO,iCAAgChE,OAAQ,mBAAhF;;EACA,KAAK,IAAIwI,GAAT,IAAgBF,cAAhB,EAAgC;IAC9B7G,eAAA,CAAIyH,IAAJ,CAAU,OAAMV,GAAI,EAApB;EACD;;EACD,OAAOF,cAAP;AACD,CAxByB,CAA1B;;;;AAmCA,MAAMa,0BAA0B,GAAG,UAAUC,aAAV,EAAyBC,UAAzB,EAAqCC,YAAY,GAAG,IAApD,EAA0D;EAC3F,MAAMC,kBAAkB,GAAIC,SAAD,IAAe,IAAIvB,MAAJ,CAAY,SAAQ/I,eAAA,CAAEuK,YAAF,CAAeD,SAAf,CAA0B,yBAA9C,EAAwE,GAAxE,CAA1C;;EACA,MAAME,aAAa,GAAG,MAAtB;EACA,MAAMC,qBAAqB,GAAG,gCAA9B;EACA,MAAMC,mBAAmB,GAAG,iBAA5B;EACA,MAAM5H,MAAM,GAAG,EAAf;;EACA,KAAK,MAAMwH,SAAX,IAAwBH,UAAxB,EAAoC;IAClC,MAAMQ,UAAU,GAAGN,kBAAkB,CAACC,SAAD,CAAlB,CAA8BhI,IAA9B,CAAmC4H,aAAnC,CAAnB;;IACA,IAAI,CAACS,UAAL,EAAiB;MACf;IACD;;IAED,MAAMC,KAAK,GAAGD,UAAU,CAAC,CAAD,CAAV,CAAc9F,KAAd,CAAoB,IAApB,CAAd;;IACA,IAAI+F,KAAK,CAAC9F,MAAN,GAAe,CAAnB,EAAsB;MACpB;IACD;;IAED,MAAM+F,WAAW,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,CAAgBN,aAAhB,CAApB;;IACA,KAAK,MAAM5F,IAAX,IAAmBgG,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAnB,EAAmC;MACjC,MAAMC,aAAa,GAAGpG,IAAI,CAACkG,MAAL,CAAYN,aAAZ,CAAtB;;MACA,IAAIQ,aAAa,IAAIH,WAArB,EAAkC;QAChC;MACD;;MAED,MAAMI,mBAAmB,GAAGR,qBAAqB,CAACnI,IAAtB,CAA2BsC,IAA3B,CAA5B;;MACA,IAAI,CAACqG,mBAAL,EAA0B;QACxB;MACD;;MACD,MAAMC,IAAI,GAAG;QACXC,UAAU,EAAEF,mBAAmB,CAAC,CAAD;MADpB,CAAb;MAGA,MAAMG,iBAAiB,GAAGV,mBAAmB,CAACpI,IAApB,CAAyBsC,IAAzB,CAA1B;;MACA,IAAIwG,iBAAJ,EAAuB;QACrBF,IAAI,CAACG,OAAL,GAAeD,iBAAiB,CAAC,CAAD,CAAjB,KAAyB,MAAxC;MACD;;MACDtI,MAAM,CAACiC,IAAP,CAAYmG,IAAZ;IACD;EACF;;EAED,MAAMI,cAAc,GAAGxI,MAAM,CAC1ByI,MADoB,CACZL,IAAD,IAAU,CAAClL,eAAA,CAAEwL,SAAF,CAAYpB,YAAZ,CAAD,IAA8Bc,IAAI,CAACG,OAAL,KAAiBjB,YAD5C,EAEpBf,GAFoB,CAEf6B,IAAD,IAAUA,IAAI,CAACC,UAFC,CAAvB;;EAGA5I,eAAA,CAAIQ,KAAJ,CAAW,aAAY6E,aAAA,CAAK6D,SAAL,CAAe,YAAf,EAA6BH,cAAc,CAACxG,MAA5C,EAAoD,IAApD,CAA0D,GAAvE,GACP,QAAOqF,UAAW,IAAGvC,aAAA,CAAK6D,SAAL,CAAe,OAAf,EAAwBtB,UAAU,CAACrF,MAAnC,EAA2C,KAA3C,CAAkD,EAD1E;;EAEA,OAAOwG,cAAP;AACD,CA7CD;;;;AAuEA,SAASI,gBAAT,CAA2BxE,QAA3B,EAAqCyE,OAAO,GAAG,EAA/C,EAAmD;EACjD,MAAM7I,MAAM,GAAG,EAAf;;EAEA,IAAI,CAAC8E,aAAA,CAAKC,QAAL,CAAc8D,OAAO,CAAC1G,OAAtB,CAAD,IAAmC0G,OAAO,CAAC1G,OAA/C,EAAwD;IACtDnC,MAAM,CAACiC,IAAP,CAAY,IAAZ;EACD;;EACD,IAAI4G,OAAO,CAACC,iBAAZ,EAA+B;IAC7B9I,MAAM,CAACiC,IAAP,CAAY,IAAZ;EACD;;EACD,IAAI4G,OAAO,CAACE,SAAZ,EAAuB;IACrB/I,MAAM,CAACiC,IAAP,CAAY,IAAZ;EACD;;EACD,IAAI4G,OAAO,CAACG,gBAAZ,EAA8B;IAC5B,IAAI5E,QAAQ,GAAG,EAAf,EAAmB;MACjB3E,eAAA,CAAIQ,KAAJ,CAAW,2CAAD,GACC,yBAAwBmE,QAAS,iCADlC,GAEC,2BAFX;IAGD,CAJD,MAIO;MACLpE,MAAM,CAACiC,IAAP,CAAY,IAAZ;IACD;EACF;;EAED,IAAI4G,OAAO,CAACI,cAAZ,EAA4B;IAC1BjJ,MAAM,CAACiC,IAAP,CAAY,IAAZ;EACD;;EAED,OAAOjC,MAAP;AACD;;AAkBD,SAASkJ,aAAT,CAAwBC,QAAxB,EAAkC;EAChC,MAAMnJ,MAAM,GAAG;IACbuE,GAAG,EAAE4E,QAAQ,CAACC,OADD;IAEbC,WAAW,EAAE1J,QAAQ,CAACwJ,QAAQ,CAACE,WAAV,EAAuB,EAAvB,CAFR;IAGbC,WAAW,EAAEH,QAAQ,CAACG,WAAT,IAAwB;EAHxB,CAAf;;EAKA,IAAI,CAACH,QAAQ,CAACI,WAAd,EAA2B;IACzB,OAAOvJ,MAAP;EACD;;EAKD,KAAK,MAAMwE,QAAX,IAAuB,CACrB,GAAG2E,QAAQ,CAACI,WAAT,CAAqBC,UADH,EAErB,GAAGL,QAAQ,CAACI,WAAT,CAAqBE,eAFH,CAAvB,EAGG;IACD,IAAIjF,QAAQ,CAACkF,OAAT,KAAqB,KAArB,IAA8BxM,eAAA,CAAEgB,OAAF,CAAUsG,QAAQ,CAACmF,aAAnB,CAAlC,EAAqE;MACnE;IACD;;IAED,KAAK,MAAM;MAACC,OAAD;MAAUC;IAAV,CAAX,IAAoCrF,QAAQ,CAACmF,aAA7C,EAA4D;MAC1D,IAAIzM,eAAA,CAAEgB,OAAF,CAAU0L,OAAV,KAAsB1M,eAAA,CAAEgB,OAAF,CAAU2L,UAAV,CAA1B,EAAiD;QAC/C;MACD;;MAED,MAAMC,YAAY,GAAGF,OAAO,CAACnG,IAAR,CAAa,CAAC;QAACsG;MAAD,CAAD,KAAYA,IAAI,KAAKjN,WAAlC,CAArB;MACA,MAAMkN,kBAAkB,GAAGH,UAAU,CAACpG,IAAX,CAAgB,CAAC;QAACsG;MAAD,CAAD,KAAYA,IAAI,KAAKhN,iBAArC,CAA3B;;MACA,IAAI+M,YAAY,IAAIE,kBAApB,EAAwC;QACtChK,MAAM,CAACwE,QAAP,GAAkBA,QAAQ,CAACuF,IAA3B;QACA,OAAO/J,MAAP;MACD;IACF;EACF;;EACD,OAAOA,MAAP;AACD;;AAYD,SAASiK,gBAAT,CAA2BC,SAA3B,EAAsCC,YAAtC,EAAoD;EAClD,MAAMC,oBAAoB,GAAG,UAAUC,CAAV,EAAa;IACxC,OAAOA,CAAC,CAAClI,OAAF,CAAU,IAAV,EAAgB,EAAhB,EAAoBA,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,EAAsCA,OAAtC,CAA8C,MAA9C,EAAsD,GAAtD,CAAP;EACD,CAFD;;EAIA,MAAMmI,UAAU,GAAG,EAAnB;EACA,IAAIC,UAAU,GAAG,KAAjB;EACA,IAAIC,iBAAiB,GAAG,IAAxB;EACA,IAAIC,eAAe,GAAG,KAAtB;EAEA,MAAMC,mBAAmB,GAAG,0BAA5B;;EACA,KAAK,MAAM5I,IAAX,IAAmBoI,SAAS,CAACnI,KAAV,CAAgB4I,WAAA,CAAGC,GAAnB,CAAnB,EAA4C;IAC1C,MAAMC,WAAW,GAAG/I,IAAI,CAACI,IAAL,EAApB;;IACA,IAAIhF,eAAA,CAAEgB,OAAF,CAAU2M,WAAV,CAAJ,EAA4B;MAC1B;IACD;;IAED,IAAI,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,SAA3B,EAAsCpH,IAAtC,CAA4CC,CAAD,IAAOmH,WAAW,CAACzJ,UAAZ,CAAuBsC,CAAvB,CAAlD,CAAJ,EAAkF;MAChF6G,UAAU,GAAGM,WAAW,CAACzJ,UAAZ,CAAwB,UAAS+I,YAAa,GAA9C,CAAb;MACAK,iBAAiB,GAAG,IAApB;MACAC,eAAe,GAAG,KAAlB;MACA;IACD;;IAED,IAAI,CAACF,UAAL,EAAiB;MACf;IACD;;IAED,IAAIM,WAAW,CAACzJ,UAAZ,CAAuB,UAAvB,CAAJ,EAAwC;MACtCqJ,eAAe,GAAG,KAAlB;MACAD,iBAAiB,GAAG,IAApB;;MAEA,IAAIK,WAAW,CAAClH,QAAZ,CAAqB,UAArB,CAAJ,EAAsC;QACpC,MAAMpE,KAAK,GAAG,kBAAkBC,IAAlB,CAAuBqL,WAAvB,CAAd;;QACA,IAAItL,KAAJ,EAAW;UACTiL,iBAAiB,GAAGjL,KAAK,CAAC,CAAD,CAAzB;QACD;MACF,CALD,MAKO,IAAIsL,WAAW,CAAClH,QAAZ,CAAqB,WAArB,CAAJ,EAAuC;QAC5C,MAAMpE,KAAK,GAAG,mBAAmBC,IAAnB,CAAwBqL,WAAxB,CAAd;;QACA,IAAItL,KAAJ,EAAW;UACTiL,iBAAiB,GAAGjL,KAAK,CAAC,CAAD,CAAzB;UACAkL,eAAe,GAAG,IAAlB;QACD;MACF;;MACD;IACD;;IAED,IAAID,iBAAiB,IAAIK,WAAW,CAACzJ,UAAZ,CAAuB,SAAvB,CAAzB,EAA4D;MAC1D,MAAM7B,KAAK,GAAGmL,mBAAmB,CAAClL,IAApB,CAAyBqL,WAAzB,CAAd;;MACA,IAAItL,KAAJ,EAAW;QACT+K,UAAU,CAACE,iBAAD,CAAV,GAAgCJ,oBAAoB,CAAC7K,KAAK,CAAC,CAAD,CAAN,CAApD;MACD;;MACDiL,iBAAiB,GAAG,IAApB;MACA;IACD;;IAED,IAAIA,iBAAiB,IAAIC,eAArB,IAAwCI,WAAW,CAAClH,QAAZ,CAAqB,WAArB,CAA5C,EAA+E;MAC7E,MAAMpE,KAAK,GAAGmL,mBAAmB,CAAClL,IAApB,CAAyBqL,WAAzB,CAAd;;MACA,IAAItL,KAAJ,EAAW;QACT+K,UAAU,CAACE,iBAAD,CAAV,GAAgC,CAC9B,IAAIF,UAAU,CAACE,iBAAD,CAAV,IAAiC,EAArC,CAD8B,EAE9BJ,oBAAoB,CAAC7K,KAAK,CAAC,CAAD,CAAN,CAFU,CAAhC;MAID;;MACD;IACD;EACF;;EACD,OAAO+K,UAAP;AACD;;AAYD,SAASQ,iBAAT,CAA4BZ,SAA5B,EAAuCC,YAAvC,EAAqD;EACnD,MAAMY,QAAQ,GAAGb,SAAS,CAACnI,KAAV,CAAgB4I,WAAA,CAAGC,GAAnB,CAAjB;;EACA,SAASI,cAAT,CAAyBC,QAAzB,EAAmC;IACjC,IAAIC,GAAG,GAAGD,QAAV;IACA,MAAME,YAAY,GAAGJ,QAAQ,CAACE,QAAD,CAAR,CAAmB7F,OAAnB,CAA2B,GAA3B,CAArB;;IACA,IAAI+F,YAAY,GAAG,CAAnB,EAAsB;MACpB,OAAO,CAAC,IAAD,EAAOD,GAAP,CAAP;IACD;;IACD,IAAIlL,MAAM,GAAG,EAAb;;IACA,OAAOkL,GAAG,GAAGH,QAAQ,CAAC/I,MAAtB,EAA8B;MAC5B,MAAMoJ,oBAAoB,GAAG,KAAK5L,IAAL,CAAUuL,QAAQ,CAACG,GAAD,CAAlB,CAA7B;;MACA,IAAIE,oBAAJ,EAA0B;QACxB,MAAMC,kBAAkB,GAAGD,oBAAoB,CAACE,KAAhD;;QACA,IAAIL,QAAQ,KAAKC,GAAjB,EAAsB;UACpB,OAAO,CACLH,QAAQ,CAACG,GAAD,CAAR,CAAc7F,SAAd,CAAwB8F,YAAY,GAAG,CAAvC,EAA0CE,kBAA1C,CADK,EAELH,GAFK,CAAP;QAID;;QACD,OAAO,CACJ,GAAElL,MAAO,MAAK9C,eAAA,CAAEqO,SAAF,CAAYR,QAAQ,CAACG,GAAD,CAAR,CAAc7F,SAAd,CAAwB,CAAxB,EAA2BgG,kBAA3B,CAAZ,CAA4D,EADtE,EAELH,GAFK,CAAP;MAID;;MACD,IAAIA,GAAG,GAAGD,QAAV,EAAoB;QAClBjL,MAAM,IAAK,MAAK9C,eAAA,CAAEqO,SAAF,CAAYR,QAAQ,CAACG,GAAD,CAApB,CAA2B,EAA3C;MACD,CAFD,MAEO;QACLlL,MAAM,IAAI+K,QAAQ,CAACG,GAAD,CAAR,CAAc7F,SAAd,CAAwB8F,YAAY,GAAG,CAAvC,CAAV;MACD;;MACD,EAAED,GAAF;IACD;;IACD,OAAO,CAAClL,MAAD,EAASkL,GAAT,CAAP;EACD;;EAED,MAAMZ,UAAU,GAAG,EAAnB;EACA,IAAIE,iBAAiB,GAAG,IAAxB;EACA,IAAIC,eAAe,GAAG,KAAtB;EACA,IAAIe,iBAAiB,GAAG,KAAxB;EACA,IAAIC,SAAS,GAAG,CAAhB;;EACA,OAAOA,SAAS,GAAGV,QAAQ,CAAC/I,MAA5B,EAAoC;IAClC,MAAM6I,WAAW,GAAGE,QAAQ,CAACU,SAAD,CAAR,CAAoBvJ,IAApB,EAApB;;IACA,IAAIhF,eAAA,CAAEgB,OAAF,CAAU2M,WAAV,CAAJ,EAA4B;MAC1B,EAAEY,SAAF;MACA;IACD;;IAED,IAAI,CAAC,MAAD,EAAS,SAAT,EAAoBhI,IAApB,CAA0BC,CAAD,IAAOmH,WAAW,CAACzJ,UAAZ,CAAuBsC,CAAvB,CAAhC,CAAJ,EAAgE;MAC9D8G,iBAAiB,GAAG,IAApB;MACAC,eAAe,GAAG,KAAlB;MACAe,iBAAiB,GAAG,KAApB;MACA,EAAEC,SAAF;MACA;IACD;;IAED,IAAIZ,WAAW,CAACzJ,UAAZ,CAAuB,UAAvB,CAAJ,EAAwC;MACtCqJ,eAAe,GAAG,KAAlB;MACAD,iBAAiB,GAAG,IAApB;MACAgB,iBAAiB,GAAG,KAApB;;MAEA,IAAIX,WAAW,CAAClH,QAAZ,CAAqB,SAArB,CAAJ,EAAqC;QACnC,MAAMpE,KAAK,GAAG,gBAAgBC,IAAhB,CAAqBqL,WAArB,CAAd;;QACA,IAAItL,KAAJ,EAAW;UACTiL,iBAAiB,GAAGjL,KAAK,CAAC,CAAD,CAAzB;QACD;MACF,CALD,MAKO,IAAIsL,WAAW,CAAClH,QAAZ,CAAqB,UAArB,CAAJ,EAAsC;QAC3C,MAAMpE,KAAK,GAAG,iBAAiBC,IAAjB,CAAsBqL,WAAtB,CAAd;;QACA,IAAItL,KAAJ,EAAW;UACTiL,iBAAiB,GAAGjL,KAAK,CAAC,CAAD,CAAzB;UACAkL,eAAe,GAAG,IAAlB;QACD;MACF;;MACD,EAAEgB,SAAF;MACA;IACD;;IAED,IAAIjB,iBAAJ,EAAuB;MACrB,IAAIC,eAAJ,EAAqB;QACnB,IAAII,WAAW,CAACzJ,UAAZ,CAAuB,GAAvB,CAAJ,EAAiC;UAC/BoK,iBAAiB,GAAGX,WAAW,CAACzJ,UAAZ,CAAwB,IAAG+I,YAAa,GAAxC,CAApB;UACA,EAAEsB,SAAF;UACA;QACD;;QACD,IAAID,iBAAJ,EAAuB;UACrB,MAAM,CAACE,OAAD,EAAUR,GAAV,IAAiBF,cAAc,CAACS,SAAD,CAArC;UACAA,SAAS,GAAGP,GAAZ;;UACA,IAAIhO,eAAA,CAAEyO,QAAF,CAAWD,OAAX,CAAJ,EAAyB;YACvBpB,UAAU,CAACE,iBAAD,CAAV,GAAgC,CAC9B,IAAIF,UAAU,CAACE,iBAAD,CAAV,IAAiC,EAArC,CAD8B,EAE9BkB,OAF8B,CAAhC;UAID;QACF;MACF,CAhBD,MAgBO,IAAIb,WAAW,CAACzJ,UAAZ,CAAwB,IAAG+I,YAAa,GAAxC,CAAJ,EAAiD;QACtD,MAAM,CAACuB,OAAD,EAAUR,GAAV,IAAiBF,cAAc,CAACS,SAAD,CAArC;QACAA,SAAS,GAAGP,GAAZ;;QACA,IAAIhO,eAAA,CAAEyO,QAAF,CAAWD,OAAX,CAAJ,EAAyB;UACvBpB,UAAU,CAACE,iBAAD,CAAV,GAAgCkB,OAAhC;QACD;;QACDlB,iBAAiB,GAAG,IAApB;MACD;IACF;;IACD,EAAEiB,SAAF;EACD;;EACD,OAAOnB,UAAP;AACD;;AAYD,eAAesB,kBAAf,CAAmCC,aAAnC,EAAkDC,aAAlD,EAAiEC,aAAjE,EAAgF;EAC9E,IAAI5B,YAAY,GAAG2B,aAAa,IAAIC,aAApC;;EACA,IAAI5B,YAAY,CAACxG,QAAb,CAAsB,GAAtB,KAA8B,CAACwG,YAAY,CAACxG,QAAb,CAAsB,IAAtB,CAAnC,EAAgE;IAC9DwG,YAAY,GAAGA,YAAY,CAAChI,OAAb,CAAqB,GAArB,EAA0B,IAA1B,CAAf;EACD;;EACD,MAAM6J,OAAO,GAAG,MAAMH,aAAa,EAAnC;;EACApM,eAAA,CAAIQ,KAAJ,CAAW,4BAA2BC,IAAI,CAACC,SAAL,CAAe6L,OAAf,CAAwB,EAA9D;;EAEA,IAAI7B,YAAY,CAAC8B,WAAb,GAA2B7K,UAA3B,CAAsC,IAAtC,KACC,CAAC4K,OAAO,CAACvI,IAAR,CAAcC,CAAD,IAAOA,CAAC,CAACxB,IAAF,OAAaiI,YAAjC,CADN,EACsD;IACpD1K,eAAA,CAAIQ,KAAJ,CAAW,gCAA+BkK,YAAa,gBAA7C,GACP,sBAAqB4B,aAAc,GADtC;;IAEA5B,YAAY,GAAG4B,aAAf;EACD,CALD,MAKO;IACLtM,eAAA,CAAIQ,KAAJ,CAAW,4BAA2BkK,YAAa,GAAnD;EACD;;EACD,OAAOA,YAAP;AACD;;AAaD,SAAS+B,aAAT,CAAwBC,MAAxB,EAAgCC,UAAhC,EAA4C;EAC1C,IAAI,CAAC,gBAAgBvI,IAAhB,CAAqBsI,MAArB,CAAD,IAAiC,CAAC,WAAWtI,IAAX,CAAgBsI,MAAhB,CAAtC,EAA+D;IAC7D1M,eAAA,CAAIQ,KAAJ,CAAUkM,MAAV;;IACA,MAAM,IAAI3O,KAAJ,CAAW,mBAAkB4O,UAAW,oBAA9B,GACd,uCADI,CAAN;EAED;;EACD,MAAM7M,KAAK,GAAG,eAAeC,IAAf,CAAoB2M,MAApB,CAAd;;EACA,IAAI,CAAC5M,KAAL,EAAY;IACVE,eAAA,CAAIQ,KAAJ,CAAUkM,MAAV;;IACA,MAAM,IAAI3O,KAAJ,CAAW,gBAAe4O,UAAW,4BAA3B,GACd,uCADI,CAAN;EAED;;EACD,MAAMC,OAAO,GAAGnP,eAAA,CAAEgF,IAAF,CAAO3C,KAAK,CAAC,CAAD,CAAZ,EAAiB4C,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC,CAAhB;;EACA,IAAI;IACF,OAAOjC,IAAI,CAACoM,KAAL,CAAWD,OAAX,CAAP;EACD,CAFD,CAEE,OAAOE,CAAP,EAAU;IACV9M,eAAA,CAAIQ,KAAJ,CAAUoM,OAAV;;IACA,MAAM,IAAI7O,KAAJ,CAAW,gBAAe4O,UAAW,mCAA3B,GACd,uCADI,CAAN;EAED;AACF;;AAWD,SAASI,eAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;EAC3C,MAAM1M,MAAM,GAAG,EAAf;;EACA,IAAIyM,QAAQ,IAAIvP,eAAA,CAAEyO,QAAF,CAAWc,QAAX,CAAhB,EAAsC;IACpCzM,MAAM,CAACiC,IAAP,CAAY,OAAZ,EAAsB,wBAAuBwK,QAAQ,CAACR,WAAT,EAAuB,EAApE;EACD;;EACD,IAAIS,OAAO,IAAIxP,eAAA,CAAEyO,QAAF,CAAWe,OAAX,CAAf,EAAoC;IAClC1M,MAAM,CAACiC,IAAP,CAAY,OAAZ,EAAsB,uBAAsByK,OAAO,CAACC,WAAR,EAAsB,EAAlE;EACD;;EACD,IAAIC,MAAJ;;EACA,IAAI1P,eAAA,CAAEyO,QAAF,CAAWc,QAAX,KAAwBvP,eAAA,CAAEyO,QAAF,CAAWe,OAAX,CAAxB,IAA+CD,QAA/C,IAA2DC,OAA/D,EAAwE;IACtEE,MAAM,GAAGH,QAAQ,CAACR,WAAT,KAAyB,GAAzB,GAA+BS,OAAO,CAACC,WAAR,EAAxC;EACD,CAFD,MAEO,IAAIF,QAAQ,IAAIvP,eAAA,CAAEyO,QAAF,CAAWc,QAAX,CAAhB,EAAsC;IAC3CG,MAAM,GAAGH,QAAQ,CAACR,WAAT,EAAT;EACD,CAFM,MAEA,IAAIS,OAAO,IAAIxP,eAAA,CAAEyO,QAAF,CAAWe,OAAX,CAAf,EAAoC;IACzCE,MAAM,GAAGF,OAAT;EACD;;EACD,IAAIE,MAAJ,EAAY;IACV5M,MAAM,CAACiC,IAAP,CAAY,OAAZ,EAAsB,sBAAqB2K,MAAO,EAAlD;EACD;;EACD,OAAO5M,MAAP;AACD;;AAOD,eAAe6M,mBAAf,GAAsC;EACpC,IAAIC,QAAQ,GAAGpP,OAAO,CAACC,GAAR,CAAYoP,qBAA3B;;EACA,IAAI,MAAMC,SAAS,CAACF,QAAD,CAAnB,EAA+B;IAC7B,OAAOA,QAAP;EACD;;EAED,IAAIA,QAAJ,EAAc;IACZrN,eAAA,CAAIC,IAAJ,CAAU,gEAA+DoN,QAAS,gCAAlF;EACD;;EAED,MAAMG,IAAI,GAAGvP,OAAO,CAACC,GAAR,CAAYuP,IAAZ,IAAoBxP,OAAO,CAACC,GAAR,CAAYwP,WAA7C;;EACA,IAAIF,IAAJ,EAAU;IACRH,QAAQ,GAAGlO,aAAA,CAAKC,OAAL,CAAaoO,IAAb,EAAmB,UAAnB,CAAX;EACD;;EAED,IAAI,EAAC,MAAMD,SAAS,CAACF,QAAD,CAAhB,CAAJ,EAAgC;IAC9BrN,eAAA,CAAIQ,KAAJ,CAAW,wBAAuB6M,QAAS,gCAA3C;;IACA,OAAO,IAAP;EACD;;EAED,OAAOA,QAAP;AACD;;AAQD,eAAeE,SAAf,CAA0BF,QAA1B,EAAoC;EAClC,OAAOA,QAAQ,KACV,MAAM3O,WAAA,CAAGC,MAAH,CAAU0O,QAAV,CADI,CAAR,IAEF,CAAC,MAAM3O,WAAA,CAAGG,IAAH,CAAQwO,QAAR,CAAP,EAA0BvO,WAA1B,EAFL;AAGD;;AAYD,SAAS6O,cAAT,CAAyBC,GAAzB,EAA8B;EAC5BA,GAAG,GAAI,GAAEA,GAAI,EAAb;;EACA,IAAIzK,eAAA,CAAOC,SAAP,EAAJ,EAAwB;IACtB,OAAO,UAAUgB,IAAV,CAAewJ,GAAf,IAAuB,IAAGA,GAAG,CAAClL,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAwB,GAAlD,GAAuDkL,GAA9D;EACD;;EACD,OAAOA,GAAG,CAAClL,OAAJ,CAAY,IAAZ,EAAkB,KAAlB,CAAP;AACD;;AAeD,SAASmL,4BAAT,CAAuC9J,OAAvC,EAAgD;EAC9C,MAAM+J,kBAAkB,GAAG,IAAItH,MAAJ,CAAY,QAAO/I,eAAA,CAAEuK,YAAF,CAAe3K,WAAf,CAA4B,IAA/C,CAA3B;EACA,MAAM0Q,cAAc,GAAG,uCAAvB;EACA,MAAMC,MAAM,GAAG,EAAf;EACA,IAAIC,gBAAJ;EACA,IAAIC,KAAK,GAAG,EAAZ;;EACA,KAAK,MAAM7L,IAAX,IAAmB0B,OAAO,CAACzB,KAAR,CAAc,IAAd,EAAoBwE,GAApB,CAAwBrJ,eAAA,CAAE0Q,OAA1B,CAAnB,EAAuD;IACrD,MAAM1F,aAAa,GAAGpG,IAAI,CAACE,MAAL,GAAc9E,eAAA,CAAEqO,SAAF,CAAYzJ,IAAZ,EAAkBE,MAAtD;;IACA,IAAIuL,kBAAkB,CAAC1J,IAAnB,CAAwB/B,IAAxB,CAAJ,EAAmC;MACjC4L,gBAAgB,GAAGxF,aAAnB;;MACA,IAAI,CAAChL,eAAA,CAAEgB,OAAF,CAAUyP,KAAV,CAAL,EAAuB;QACrBF,MAAM,CAACxL,IAAP,CAAY0L,KAAZ;QACAA,KAAK,GAAG,EAAR;MACD;;MACD;IACD;;IACD,IAAIzQ,eAAA,CAAE2Q,KAAF,CAAQH,gBAAR,CAAJ,EAA+B;MAC7B;IACD;;IAED,IAAIxF,aAAa,GAAGwF,gBAApB,EAAsC;MACpCC,KAAK,CAAC1L,IAAN,CAAWH,IAAX;IACD,CAFD,MAEO;MACL,IAAI,CAAC5E,eAAA,CAAEgB,OAAF,CAAUyP,KAAV,CAAL,EAAuB;QACrBF,MAAM,CAACxL,IAAP,CAAY0L,KAAZ;QACAA,KAAK,GAAG,EAAR;MACD;;MACDD,gBAAgB,GAAG,IAAnB;IACD;EACF;;EACD,IAAI,CAACxQ,eAAA,CAAEgB,OAAF,CAAUyP,KAAV,CAAL,EAAuB;IACrBF,MAAM,CAACxL,IAAP,CAAY0L,KAAZ;EACD;;EAED,MAAM3N,MAAM,GAAG,EAAf;;EACA,KAAK,MAAMoI,IAAX,IAAmBqF,MAAnB,EAA2B;IACzB,IAAIK,WAAW,GAAG,KAAlB;IACA,IAAI9D,kBAAkB,GAAG,KAAzB;;IACA,KAAK,MAAMlI,IAAX,IAAmBsG,IAAnB,EAAyB;MACvB,MAAM7I,KAAK,GAAGiO,cAAc,CAAChO,IAAf,CAAoBsC,IAApB,CAAd;;MACA,IAAI,CAACvC,KAAL,EAAY;QACV;MACD;;MAEDuO,WAAW,GAAG,IAAd;MACA9D,kBAAkB,GAAGzK,KAAK,CAAC,CAAD,CAAL,KAAaxC,iBAAlC;MACA;IACD;;IAID,IAAI+Q,WAAW,IAAI,CAAC9D,kBAApB,EAAwC;MACtC;IACD;;IAED,KAAK,MAAM+D,eAAX,IAA8B3F,IAAI,CAAC7B,GAAL,CAASrJ,eAAA,CAAEgF,IAAX,EAAiBuG,MAAjB,CAAwBuF,OAAxB,CAA9B,EAAgE;MAC9D,MAAMC,cAAc,GAAGF,eAAe,CAAChM,KAAhB,CAAsB,KAAtB,EAA6B,CAA7B,CAAvB;;MACA,IAAI,CAACmM,kBAAkB,CAACD,cAAD,CAAvB,EAAyC;QACvC;MACD;;MAED,IAAIjE,kBAAJ,EAAwB;QACtB,OAAO,CAACiE,cAAD,CAAP;MACD;;MACDjO,MAAM,CAACiC,IAAP,CAAYgM,cAAZ;IACD;EACF;;EACD,OAAOjO,MAAP;AACD;;AASD,SAASkO,kBAAT,CAA6BC,WAA7B,EAA0C;EAExC,OAAO,kBAAkB3O,IAAlB,CAAuB2O,WAAvB,CAAP;AACD"}