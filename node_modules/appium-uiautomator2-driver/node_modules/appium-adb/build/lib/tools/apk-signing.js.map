{"version":3,"file":"apk-signing.js","names":["DEFAULT_PRIVATE_KEY","path","resolve","getModuleRoot","DEFAULT_CERTIFICATE","BUNDLETOOL_TUTORIAL","APKSIGNER_VERIFY_FAIL","SHA1","SHA256","SHA512","MD5","DEFAULT_CERT_HASH","JAVA_PROPS_INIT_ERROR","SIGNED_APPS_CACHE","LRU","max","apkSigningMethods","executeApksigner","args","apkSignerJar","getApksignerForOs","fullCmd","getJavaForOs","log","debug","util","quote","stdout","stderr","exec","slice","cwd","dirname","windowsVerbatimArguments","system","isWindows","name","stream","_","trim","split","filter","line","includes","join","signWithDefaultCert","apk","fs","exists","Error","e","message","signWithCustomCert","keystorePath","keyAlias","keystorePassword","keyPassword","err","warn","unsignApk","jarsigner","getJavaHome","sign","appPath","endsWith","APKS_EXTENSION","useKeystore","zipAlignApk","initZipAlign","binaries","zipalign","access","_fs","W_OK","alignedApk","tempDir","prefix","suffix","mkdirp","mv","unlink","checkApkCert","pkg","opts","extname","extractBaseApk","hashMatches","apksignerOutput","expectedHashes","value","toPairs","RegExp","test","basename","requireDefaultCert","appHash","hash","has","output","expected","get","getKeystoreHash","hasMatch","info","isSigned","set","errMsg","keytool","result","hashName","hashRe","match","replace","toLowerCase","isEmpty","JSON","stringify"],"sources":["../../../lib/tools/apk-signing.js"],"sourcesContent":["import _ from 'lodash';\nimport _fs from 'fs';\nimport { exec } from 'teen_process';\nimport path from 'path';\nimport log from '../logger.js';\nimport { tempDir, system, mkdirp, fs, util } from '@appium/support';\nimport LRU from 'lru-cache';\nimport {\n  getJavaForOs, getApksignerForOs, getJavaHome, getModuleRoot, APKS_EXTENSION, unsignApk,\n} from '../helpers.js';\n\nconst DEFAULT_PRIVATE_KEY = path.resolve(getModuleRoot(), 'keys', 'testkey.pk8');\nconst DEFAULT_CERTIFICATE = path.resolve(getModuleRoot(), 'keys', 'testkey.x509.pem');\nconst BUNDLETOOL_TUTORIAL = 'https://developer.android.com/studio/command-line/bundletool';\nconst APKSIGNER_VERIFY_FAIL = 'DOES NOT VERIFY';\nconst SHA1 = 'sha1';\nconst SHA256 = 'sha256';\nconst SHA512 = 'sha512';\nconst MD5 = 'md5';\nconst DEFAULT_CERT_HASH = {\n  [SHA256]: 'a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc'\n};\nconst JAVA_PROPS_INIT_ERROR = 'java.lang.Error: Properties init';\nconst SIGNED_APPS_CACHE = new LRU({\n  max: 30,\n});\n\n\nconst apkSigningMethods = {};\n\n/**\n * Execute apksigner utility with given arguments.\n *\n * @param {?Array<String>} args - The list of tool arguments.\n * @return {string} - Command stdout\n * @throws {Error} If apksigner binary is not present on the local file system\n *                 or the return code is not equal to zero.\n */\napkSigningMethods.executeApksigner = async function executeApksigner (args = []) {\n  const apkSignerJar = await getApksignerForOs(this);\n  const fullCmd = [\n    await getJavaForOs(), '-Xmx1024M', '-Xss1m',\n    '-jar', apkSignerJar,\n    ...args\n  ];\n  log.debug(`Starting apksigner: ${util.quote(fullCmd)}`);\n  // It is necessary to specify CWD explicitly; see https://github.com/appium/appium/issues/14724#issuecomment-737446715\n  const {stdout, stderr} = await exec(fullCmd[0], fullCmd.slice(1), {\n    cwd: path.dirname(apkSignerJar), windowsVerbatimArguments: system.isWindows()\n  });\n  for (let [name, stream] of [['stdout', stdout], ['stderr', stderr]]) {\n    if (!_.trim(stream)) {\n      continue;\n    }\n\n    if (name === 'stdout') {\n      // Make the output less talkative\n      stream = stream.split('\\n')\n        .filter((line) => !line.includes('WARNING:'))\n        .join('\\n');\n    }\n    log.debug(`apksigner ${name}: ${stream}`);\n  }\n  return stdout;\n};\n\n/**\n * (Re)sign the given apk file on the local file system with the default certificate.\n *\n * @param {string} apk - The full path to the local apk file.\n * @throws {Error} If signing fails.\n */\napkSigningMethods.signWithDefaultCert = async function signWithDefaultCert (apk) {\n  log.debug(`Signing '${apk}' with default cert`);\n  if (!(await fs.exists(apk))) {\n    throw new Error(`${apk} file doesn't exist.`);\n  }\n\n  const args = [\n    'sign',\n    '--key', DEFAULT_PRIVATE_KEY,\n    '--cert', DEFAULT_CERTIFICATE,\n    apk,\n  ];\n  try {\n    await this.executeApksigner(args);\n  } catch (e) {\n    throw new Error(`Could not sign '${apk}' with the default certificate. ` +\n      `Original error: ${e.stderr || e.stdout || e.message}`);\n  }\n};\n\n/**\n * (Re)sign the given apk file on the local file system with a custom certificate.\n *\n * @param {string} apk - The full path to the local apk file.\n * @throws {Error} If signing fails.\n */\napkSigningMethods.signWithCustomCert = async function signWithCustomCert (apk) {\n  log.debug(`Signing '${apk}' with custom cert`);\n  if (!(await fs.exists(this.keystorePath))) {\n    throw new Error(`Keystore: ${this.keystorePath} doesn't exist.`);\n  }\n  if (!(await fs.exists(apk))) {\n    throw new Error(`'${apk}' doesn't exist.`);\n  }\n\n  try {\n    await this.executeApksigner(['sign',\n      '--ks', this.keystorePath,\n      '--ks-key-alias', this.keyAlias,\n      '--ks-pass', `pass:${this.keystorePassword}`,\n      '--key-pass', `pass:${this.keyPassword}`,\n      apk]);\n  } catch (err) {\n    log.warn(`Cannot use apksigner tool for signing. Defaulting to jarsigner. ` +\n      `Original error: ${err.stderr || err.stdout || err.message}`);\n    try {\n      if (await unsignApk(apk)) {\n        log.debug(`'${apk}' has been successfully unsigned`);\n      } else {\n        log.debug(`'${apk}' does not need to be unsigned`);\n      }\n      const jarsigner = path.resolve(await getJavaHome(), 'bin',\n        `jarsigner${system.isWindows() ? '.exe' : ''}`);\n      const fullCmd = [jarsigner,\n        '-sigalg', 'MD5withRSA',\n        '-digestalg', 'SHA1',\n        '-keystore', this.keystorePath,\n        '-storepass', this.keystorePassword,\n        '-keypass', this.keyPassword,\n        apk, this.keyAlias];\n      log.debug(`Starting jarsigner: ${util.quote(fullCmd)}`);\n      await exec(fullCmd[0], fullCmd.slice(1), { windowsVerbatimArguments: system.isWindows() });\n    } catch (e) {\n      throw new Error(`Could not sign with custom certificate. ` +\n        `Original error: ${e.stderr || e.message}`);\n    }\n  }\n};\n\n/**\n * (Re)sign the given apk file on the local file system with either\n * custom or default certificate based on _this.useKeystore_ property value\n * and Zip-aligns it after signing.\n *\n * @param {string} appPath - The full path to the local .apk(s) file.\n * @throws {Error} If signing fails.\n */\napkSigningMethods.sign = async function sign (appPath) {\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    let message = 'Signing of .apks-files is not supported. ';\n    if (this.useKeystore) {\n      message += 'Consider manual application bundle signing with the custom keystore ' +\n        `like it is described at ${BUNDLETOOL_TUTORIAL}`;\n    } else {\n      message += `Consider manual application bundle signing with the key at '${DEFAULT_PRIVATE_KEY}' ` +\n        `and the certificate at '${DEFAULT_CERTIFICATE}'. Read ${BUNDLETOOL_TUTORIAL} for more details.`;\n    }\n    log.warn(message);\n    return;\n  }\n\n  // it is necessary to apply zipalign only before signing\n  // if apksigner is used\n  await this.zipAlignApk(appPath);\n\n  if (this.useKeystore) {\n    await this.signWithCustomCert(appPath);\n  } else {\n    await this.signWithDefaultCert(appPath);\n  }\n};\n\n/**\n * Perform zip-aligning to the given local apk file.\n *\n * @param {string} apk - The full path to the local apk file.\n * @returns {boolean} True if the apk has been successfully aligned\n * or false if the apk has been already aligned.\n * @throws {Error} If zip-align fails.\n */\napkSigningMethods.zipAlignApk = async function zipAlignApk (apk) {\n  await this.initZipAlign();\n  try {\n    await exec(this.binaries.zipalign, ['-c', '4', apk]);\n    log.debug(`${apk}' is already zip-aligned. Doing nothing`);\n    return false;\n  } catch (e) {\n    log.debug(`'${apk}' is not zip-aligned. Aligning`);\n  }\n  try {\n    await fs.access(apk, _fs.W_OK);\n  } catch (e) {\n    throw new Error(`The file at '${apk}' is not writeable. ` +\n      `Please grant write permissions to this file or to its parent folder '${path.dirname(apk)}' ` +\n      `for the Appium process, so it can zip-align the file`);\n  }\n  const alignedApk = await tempDir.path({prefix: 'appium', suffix: '.tmp'});\n  await mkdirp(path.dirname(alignedApk));\n  try {\n    await exec(this.binaries.zipalign, ['-f', '4', apk, alignedApk]);\n    await fs.mv(alignedApk, apk, { mkdirp: true });\n    return true;\n  } catch (e) {\n    if (await fs.exists(alignedApk)) {\n      await fs.unlink(alignedApk);\n    }\n    throw new Error(`zipAlignApk failed. Original error: ${e.stderr || e.message}`);\n  }\n};\n\n/**\n * @typedef {Object} CertCheckOptions\n * @property {boolean} requireDefaultCert [true] Whether to require that the destination APK\n * is signed with the default Appium certificate or any valid certificate. This option\n * only has effect if `useKeystore` property is unset.\n */\n\n/**\n * Check if the app is already signed with the default Appium certificate.\n *\n * @param {string} appPath - The full path to the local .apk(s) file.\n * @param {string} pgk - The name of application package.\n * @param {CertCheckOptions} opts - Certificate checking options\n * @return {boolean} True if given application is already signed.\n */\napkSigningMethods.checkApkCert = async function checkApkCert (appPath, pkg, opts = {}) {\n  log.debug(`Checking app cert for ${appPath}`);\n  if (!await fs.exists(appPath)) {\n    log.debug(`'${appPath}' does not exist`);\n    return false;\n  }\n\n  if (path.extname(appPath) === APKS_EXTENSION) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  const hashMatches = (apksignerOutput, expectedHashes) => {\n    for (const [name, value] of _.toPairs(expectedHashes)) {\n      if (new RegExp(`digest:\\\\s+${value}\\\\b`, 'i').test(apksignerOutput)) {\n        log.debug(`${name} hash did match for '${path.basename(appPath)}'`);\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const {\n    requireDefaultCert = true,\n  } = opts;\n\n  const appHash = await fs.hash(appPath);\n  if (SIGNED_APPS_CACHE.has(appHash)) {\n    log.debug(`Using the previously cached signature entry for '${path.basename(appPath)}'`);\n    const {keystorePath, output, expected} = SIGNED_APPS_CACHE.get(appHash);\n    if (this.useKeystore && this.keystorePath === keystorePath || !this.useKeystore) {\n      return (!this.useKeystore && !requireDefaultCert) || hashMatches(output, expected);\n    }\n  }\n\n  const expected = this.useKeystore\n    ? await this.getKeystoreHash(appPath, pkg)\n    : DEFAULT_CERT_HASH;\n  try {\n    await getApksignerForOs(this);\n    const output = await this.executeApksigner(['verify', '--print-certs', appPath]);\n    const hasMatch = hashMatches(output, expected);\n    if (hasMatch) {\n      log.info(`'${appPath}' is signed with the ` +\n        `${this.useKeystore ? 'keystore' : 'default'} certificate`);\n    } else {\n      log.info(`'${appPath}' is signed with a ` +\n        `non-${this.useKeystore ? 'keystore' : 'default'} certificate`);\n    }\n    const isSigned = (!this.useKeystore && !requireDefaultCert) || hasMatch;\n    if (isSigned) {\n      SIGNED_APPS_CACHE.set(appHash, {\n        output,\n        expected,\n        keystorePath: this.keystorePath,\n      });\n    }\n    return isSigned;\n  } catch (err) {\n    // check if there is no signature\n    if (_.includes(err.stderr, APKSIGNER_VERIFY_FAIL)) {\n      log.info(`'${appPath}' is not signed`);\n      return false;\n    }\n    const errMsg = err.stderr || err.stdout || err.message;\n    if (_.includes(errMsg, JAVA_PROPS_INIT_ERROR)) {\n      // This error pops up randomly and we are not quite sure why.\n      // My guess - a race condition in java vm initialization.\n      // Nevertheless, lets make Appium to believe the file is already signed,\n      // because it would be true for 99% of UIAutomator2-based\n      // tests, where we presign server binaries while publishing their NPM module.\n      // If these are not signed, e.g. in case of Espresso, then the next step(s)\n      // would anyway fail.\n      // See https://github.com/appium/appium/issues/14724 for more details.\n      log.warn(errMsg);\n      log.warn(`Assuming '${appPath}' is already signed and continuing anyway`);\n      return true;\n    }\n    throw new Error(`Cannot verify the signature of '${appPath}'. ` +\n      `Original error: ${errMsg}`);\n  }\n};\n\n/**\n * @typedef {Object} KeystoreHash\n * @property {?string} md5 the md5 hash value of the keystore\n * @property {?string} sha1 the sha1 hash value of the keystore\n * @property {?string} sha256 the sha256 hash value of the keystore\n * @property {?string} sha512 the sha512 hash value of the keystore\n */\n\n/**\n * Retrieve the the hash of the given keystore.\n *\n * @return {KeystoreHash}\n * @throws {Error} If getting keystore hash fails.\n */\napkSigningMethods.getKeystoreHash = async function getKeystoreHash () {\n  log.debug(`Getting hash of the '${this.keystorePath}' keystore`);\n  const keytool = path.resolve(await getJavaHome(), 'bin',\n    `keytool${system.isWindows() ? '.exe' : ''}`);\n  if (!await fs.exists(keytool)) {\n    throw new Error(`The keytool utility cannot be found at '${keytool}'`);\n  }\n  const args = [\n    '-v', '-list',\n    '-alias', this.keyAlias,\n    '-keystore', this.keystorePath,\n    '-storepass', this.keystorePassword\n  ];\n  log.info(`Running '${keytool}' with arguments: ${util.quote(args)}`);\n  try {\n    const {stdout} = await exec(keytool, args, { windowsVerbatimArguments: system.isWindows() });\n    const result = {};\n    for (const hashName of [SHA512, SHA256, SHA1, MD5]) {\n      const hashRe = new RegExp(`^\\\\s*${hashName}:\\\\s*([a-f0-9:]+)`, 'mi');\n      const match = hashRe.exec(stdout);\n      if (!match) {\n        continue;\n      }\n      result[hashName] = match[1].replace(/:/g, '').toLowerCase();\n    }\n    if (_.isEmpty(result)) {\n      log.debug(stdout);\n      throw new Error('Cannot parse the hash value from the keytool output');\n    }\n    log.debug(`Keystore hash: ${JSON.stringify(result)}`);\n    return result;\n  } catch (e) {\n    throw new Error(`Cannot get the hash of '${this.keystorePath}' keystore. ` +\n      `Original error: ${e.stderr || e.message}`);\n  }\n};\n\nexport default apkSigningMethods;\n"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA,MAAMA,mBAAmB,GAAGC,aAAA,CAAKC,OAAL,CAAa,IAAAC,sBAAA,GAAb,EAA8B,MAA9B,EAAsC,aAAtC,CAA5B;;AACA,MAAMC,mBAAmB,GAAGH,aAAA,CAAKC,OAAL,CAAa,IAAAC,sBAAA,GAAb,EAA8B,MAA9B,EAAsC,kBAAtC,CAA5B;;AACA,MAAME,mBAAmB,GAAG,8DAA5B;AACA,MAAMC,qBAAqB,GAAG,iBAA9B;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,GAAG,GAAG,KAAZ;AACA,MAAMC,iBAAiB,GAAG;EACxB,CAACH,MAAD,GAAU;AADc,CAA1B;AAGA,MAAMI,qBAAqB,GAAG,kCAA9B;AACA,MAAMC,iBAAiB,GAAG,IAAIC,iBAAJ,CAAQ;EAChCC,GAAG,EAAE;AAD2B,CAAR,CAA1B;AAKA,MAAMC,iBAAiB,GAAG,EAA1B;;AAUAA,iBAAiB,CAACC,gBAAlB,GAAqC,eAAeA,gBAAf,CAAiCC,IAAI,GAAG,EAAxC,EAA4C;EAC/E,MAAMC,YAAY,GAAG,MAAM,IAAAC,0BAAA,EAAkB,IAAlB,CAA3B;EACA,MAAMC,OAAO,GAAG,CACd,MAAM,IAAAC,qBAAA,GADQ,EACQ,WADR,EACqB,QADrB,EAEd,MAFc,EAENH,YAFM,EAGd,GAAGD,IAHW,CAAhB;;EAKAK,eAAA,CAAIC,KAAJ,CAAW,uBAAsBC,aAAA,CAAKC,KAAL,CAAWL,OAAX,CAAoB,EAArD;;EAEA,MAAM;IAACM,MAAD;IAASC;EAAT,IAAmB,MAAM,IAAAC,kBAAA,EAAKR,OAAO,CAAC,CAAD,CAAZ,EAAiBA,OAAO,CAACS,KAAR,CAAc,CAAd,CAAjB,EAAmC;IAChEC,GAAG,EAAE9B,aAAA,CAAK+B,OAAL,CAAab,YAAb,CAD2D;IAC/Bc,wBAAwB,EAAEC,eAAA,CAAOC,SAAP;EADK,CAAnC,CAA/B;;EAGA,KAAK,IAAI,CAACC,IAAD,EAAOC,MAAP,CAAT,IAA2B,CAAC,CAAC,QAAD,EAAWV,MAAX,CAAD,EAAqB,CAAC,QAAD,EAAWC,MAAX,CAArB,CAA3B,EAAqE;IACnE,IAAI,CAACU,eAAA,CAAEC,IAAF,CAAOF,MAAP,CAAL,EAAqB;MACnB;IACD;;IAED,IAAID,IAAI,KAAK,QAAb,EAAuB;MAErBC,MAAM,GAAGA,MAAM,CAACG,KAAP,CAAa,IAAb,EACNC,MADM,CACEC,IAAD,IAAU,CAACA,IAAI,CAACC,QAAL,CAAc,UAAd,CADZ,EAENC,IAFM,CAED,IAFC,CAAT;IAGD;;IACDrB,eAAA,CAAIC,KAAJ,CAAW,aAAYY,IAAK,KAAIC,MAAO,EAAvC;EACD;;EACD,OAAOV,MAAP;AACD,CA1BD;;AAkCAX,iBAAiB,CAAC6B,mBAAlB,GAAwC,eAAeA,mBAAf,CAAoCC,GAApC,EAAyC;EAC/EvB,eAAA,CAAIC,KAAJ,CAAW,YAAWsB,GAAI,qBAA1B;;EACA,IAAI,EAAE,MAAMC,WAAA,CAAGC,MAAH,CAAUF,GAAV,CAAR,CAAJ,EAA6B;IAC3B,MAAM,IAAIG,KAAJ,CAAW,GAAEH,GAAI,sBAAjB,CAAN;EACD;;EAED,MAAM5B,IAAI,GAAG,CACX,MADW,EAEX,OAFW,EAEFlB,mBAFE,EAGX,QAHW,EAGDI,mBAHC,EAIX0C,GAJW,CAAb;;EAMA,IAAI;IACF,MAAM,KAAK7B,gBAAL,CAAsBC,IAAtB,CAAN;EACD,CAFD,CAEE,OAAOgC,CAAP,EAAU;IACV,MAAM,IAAID,KAAJ,CAAW,mBAAkBH,GAAI,kCAAvB,GACb,mBAAkBI,CAAC,CAACtB,MAAF,IAAYsB,CAAC,CAACvB,MAAd,IAAwBuB,CAAC,CAACC,OAAQ,EADjD,CAAN;EAED;AACF,CAlBD;;AA0BAnC,iBAAiB,CAACoC,kBAAlB,GAAuC,eAAeA,kBAAf,CAAmCN,GAAnC,EAAwC;EAC7EvB,eAAA,CAAIC,KAAJ,CAAW,YAAWsB,GAAI,oBAA1B;;EACA,IAAI,EAAE,MAAMC,WAAA,CAAGC,MAAH,CAAU,KAAKK,YAAf,CAAR,CAAJ,EAA2C;IACzC,MAAM,IAAIJ,KAAJ,CAAW,aAAY,KAAKI,YAAa,iBAAzC,CAAN;EACD;;EACD,IAAI,EAAE,MAAMN,WAAA,CAAGC,MAAH,CAAUF,GAAV,CAAR,CAAJ,EAA6B;IAC3B,MAAM,IAAIG,KAAJ,CAAW,IAAGH,GAAI,kBAAlB,CAAN;EACD;;EAED,IAAI;IACF,MAAM,KAAK7B,gBAAL,CAAsB,CAAC,MAAD,EAC1B,MAD0B,EAClB,KAAKoC,YADa,EAE1B,gBAF0B,EAER,KAAKC,QAFG,EAG1B,WAH0B,EAGZ,QAAO,KAAKC,gBAAiB,EAHjB,EAI1B,YAJ0B,EAIX,QAAO,KAAKC,WAAY,EAJb,EAK1BV,GAL0B,CAAtB,CAAN;EAMD,CAPD,CAOE,OAAOW,GAAP,EAAY;IACZlC,eAAA,CAAImC,IAAJ,CAAU,kEAAD,GACN,mBAAkBD,GAAG,CAAC7B,MAAJ,IAAc6B,GAAG,CAAC9B,MAAlB,IAA4B8B,GAAG,CAACN,OAAQ,EAD7D;;IAEA,IAAI;MACF,IAAI,MAAM,IAAAQ,kBAAA,EAAUb,GAAV,CAAV,EAA0B;QACxBvB,eAAA,CAAIC,KAAJ,CAAW,IAAGsB,GAAI,kCAAlB;MACD,CAFD,MAEO;QACLvB,eAAA,CAAIC,KAAJ,CAAW,IAAGsB,GAAI,gCAAlB;MACD;;MACD,MAAMc,SAAS,GAAG3D,aAAA,CAAKC,OAAL,CAAa,MAAM,IAAA2D,oBAAA,GAAnB,EAAkC,KAAlC,EACf,YAAW3B,eAAA,CAAOC,SAAP,KAAqB,MAArB,GAA8B,EAAG,EAD7B,CAAlB;;MAEA,MAAMd,OAAO,GAAG,CAACuC,SAAD,EACd,SADc,EACH,YADG,EAEd,YAFc,EAEA,MAFA,EAGd,WAHc,EAGD,KAAKP,YAHJ,EAId,YAJc,EAIA,KAAKE,gBAJL,EAKd,UALc,EAKF,KAAKC,WALH,EAMdV,GANc,EAMT,KAAKQ,QANI,CAAhB;;MAOA/B,eAAA,CAAIC,KAAJ,CAAW,uBAAsBC,aAAA,CAAKC,KAAL,CAAWL,OAAX,CAAoB,EAArD;;MACA,MAAM,IAAAQ,kBAAA,EAAKR,OAAO,CAAC,CAAD,CAAZ,EAAiBA,OAAO,CAACS,KAAR,CAAc,CAAd,CAAjB,EAAmC;QAAEG,wBAAwB,EAAEC,eAAA,CAAOC,SAAP;MAA5B,CAAnC,CAAN;IACD,CAjBD,CAiBE,OAAOe,CAAP,EAAU;MACV,MAAM,IAAID,KAAJ,CAAW,0CAAD,GACb,mBAAkBC,CAAC,CAACtB,MAAF,IAAYsB,CAAC,CAACC,OAAQ,EADrC,CAAN;IAED;EACF;AACF,CAzCD;;AAmDAnC,iBAAiB,CAAC8C,IAAlB,GAAyB,eAAeA,IAAf,CAAqBC,OAArB,EAA8B;EACrD,IAAIA,OAAO,CAACC,QAAR,CAAiBC,uBAAjB,CAAJ,EAAsC;IACpC,IAAId,OAAO,GAAG,2CAAd;;IACA,IAAI,KAAKe,WAAT,EAAsB;MACpBf,OAAO,IAAI,yEACR,2BAA0B9C,mBAAoB,EADjD;IAED,CAHD,MAGO;MACL8C,OAAO,IAAK,+DAA8DnD,mBAAoB,IAAnF,GACR,2BAA0BI,mBAAoB,WAAUC,mBAAoB,oBAD/E;IAED;;IACDkB,eAAA,CAAImC,IAAJ,CAASP,OAAT;;IACA;EACD;;EAID,MAAM,KAAKgB,WAAL,CAAiBJ,OAAjB,CAAN;;EAEA,IAAI,KAAKG,WAAT,EAAsB;IACpB,MAAM,KAAKd,kBAAL,CAAwBW,OAAxB,CAAN;EACD,CAFD,MAEO;IACL,MAAM,KAAKlB,mBAAL,CAAyBkB,OAAzB,CAAN;EACD;AACF,CAvBD;;AAiCA/C,iBAAiB,CAACmD,WAAlB,GAAgC,eAAeA,WAAf,CAA4BrB,GAA5B,EAAiC;EAC/D,MAAM,KAAKsB,YAAL,EAAN;;EACA,IAAI;IACF,MAAM,IAAAvC,kBAAA,EAAK,KAAKwC,QAAL,CAAcC,QAAnB,EAA6B,CAAC,IAAD,EAAO,GAAP,EAAYxB,GAAZ,CAA7B,CAAN;;IACAvB,eAAA,CAAIC,KAAJ,CAAW,GAAEsB,GAAI,yCAAjB;;IACA,OAAO,KAAP;EACD,CAJD,CAIE,OAAOI,CAAP,EAAU;IACV3B,eAAA,CAAIC,KAAJ,CAAW,IAAGsB,GAAI,gCAAlB;EACD;;EACD,IAAI;IACF,MAAMC,WAAA,CAAGwB,MAAH,CAAUzB,GAAV,EAAe0B,YAAA,CAAIC,IAAnB,CAAN;EACD,CAFD,CAEE,OAAOvB,CAAP,EAAU;IACV,MAAM,IAAID,KAAJ,CAAW,gBAAeH,GAAI,sBAApB,GACb,wEAAuE7C,aAAA,CAAK+B,OAAL,CAAac,GAAb,CAAkB,IAD5E,GAEb,sDAFG,CAAN;EAGD;;EACD,MAAM4B,UAAU,GAAG,MAAMC,gBAAA,CAAQ1E,IAAR,CAAa;IAAC2E,MAAM,EAAE,QAAT;IAAmBC,MAAM,EAAE;EAA3B,CAAb,CAAzB;EACA,MAAM,IAAAC,eAAA,EAAO7E,aAAA,CAAK+B,OAAL,CAAa0C,UAAb,CAAP,CAAN;;EACA,IAAI;IACF,MAAM,IAAA7C,kBAAA,EAAK,KAAKwC,QAAL,CAAcC,QAAnB,EAA6B,CAAC,IAAD,EAAO,GAAP,EAAYxB,GAAZ,EAAiB4B,UAAjB,CAA7B,CAAN;IACA,MAAM3B,WAAA,CAAGgC,EAAH,CAAML,UAAN,EAAkB5B,GAAlB,EAAuB;MAAEgC,MAAM,EAAE;IAAV,CAAvB,CAAN;IACA,OAAO,IAAP;EACD,CAJD,CAIE,OAAO5B,CAAP,EAAU;IACV,IAAI,MAAMH,WAAA,CAAGC,MAAH,CAAU0B,UAAV,CAAV,EAAiC;MAC/B,MAAM3B,WAAA,CAAGiC,MAAH,CAAUN,UAAV,CAAN;IACD;;IACD,MAAM,IAAIzB,KAAJ,CAAW,uCAAsCC,CAAC,CAACtB,MAAF,IAAYsB,CAAC,CAACC,OAAQ,EAAvE,CAAN;EACD;AACF,CA5BD;;AA6CAnC,iBAAiB,CAACiE,YAAlB,GAAiC,eAAeA,YAAf,CAA6BlB,OAA7B,EAAsCmB,GAAtC,EAA2CC,IAAI,GAAG,EAAlD,EAAsD;EACrF5D,eAAA,CAAIC,KAAJ,CAAW,yBAAwBuC,OAAQ,EAA3C;;EACA,IAAI,EAAC,MAAMhB,WAAA,CAAGC,MAAH,CAAUe,OAAV,CAAP,CAAJ,EAA+B;IAC7BxC,eAAA,CAAIC,KAAJ,CAAW,IAAGuC,OAAQ,kBAAtB;;IACA,OAAO,KAAP;EACD;;EAED,IAAI9D,aAAA,CAAKmF,OAAL,CAAarB,OAAb,MAA0BE,uBAA9B,EAA8C;IAC5CF,OAAO,GAAG,MAAM,KAAKsB,cAAL,CAAoBtB,OAApB,CAAhB;EACD;;EAED,MAAMuB,WAAW,GAAG,CAACC,eAAD,EAAkBC,cAAlB,KAAqC;IACvD,KAAK,MAAM,CAACpD,IAAD,EAAOqD,KAAP,CAAX,IAA4BnD,eAAA,CAAEoD,OAAF,CAAUF,cAAV,CAA5B,EAAuD;MACrD,IAAI,IAAIG,MAAJ,CAAY,cAAaF,KAAM,KAA/B,EAAqC,GAArC,EAA0CG,IAA1C,CAA+CL,eAA/C,CAAJ,EAAqE;QACnEhE,eAAA,CAAIC,KAAJ,CAAW,GAAEY,IAAK,wBAAuBnC,aAAA,CAAK4F,QAAL,CAAc9B,OAAd,CAAuB,GAAhE;;QACA,OAAO,IAAP;MACD;IACF;;IACD,OAAO,KAAP;EACD,CARD;;EAUA,MAAM;IACJ+B,kBAAkB,GAAG;EADjB,IAEFX,IAFJ;EAIA,MAAMY,OAAO,GAAG,MAAMhD,WAAA,CAAGiD,IAAH,CAAQjC,OAAR,CAAtB;;EACA,IAAIlD,iBAAiB,CAACoF,GAAlB,CAAsBF,OAAtB,CAAJ,EAAoC;IAClCxE,eAAA,CAAIC,KAAJ,CAAW,oDAAmDvB,aAAA,CAAK4F,QAAL,CAAc9B,OAAd,CAAuB,GAArF;;IACA,MAAM;MAACV,YAAD;MAAe6C,MAAf;MAAuBC;IAAvB,IAAmCtF,iBAAiB,CAACuF,GAAlB,CAAsBL,OAAtB,CAAzC;;IACA,IAAI,KAAK7B,WAAL,IAAoB,KAAKb,YAAL,KAAsBA,YAA1C,IAA0D,CAAC,KAAKa,WAApE,EAAiF;MAC/E,OAAQ,CAAC,KAAKA,WAAN,IAAqB,CAAC4B,kBAAvB,IAA8CR,WAAW,CAACY,MAAD,EAASC,QAAT,CAAhE;IACD;EACF;;EAED,MAAMA,QAAQ,GAAG,KAAKjC,WAAL,GACb,MAAM,KAAKmC,eAAL,CAAqBtC,OAArB,EAA8BmB,GAA9B,CADO,GAEbvE,iBAFJ;;EAGA,IAAI;IACF,MAAM,IAAAS,0BAAA,EAAkB,IAAlB,CAAN;IACA,MAAM8E,MAAM,GAAG,MAAM,KAAKjF,gBAAL,CAAsB,CAAC,QAAD,EAAW,eAAX,EAA4B8C,OAA5B,CAAtB,CAArB;IACA,MAAMuC,QAAQ,GAAGhB,WAAW,CAACY,MAAD,EAASC,QAAT,CAA5B;;IACA,IAAIG,QAAJ,EAAc;MACZ/E,eAAA,CAAIgF,IAAJ,CAAU,IAAGxC,OAAQ,uBAAZ,GACN,GAAE,KAAKG,WAAL,GAAmB,UAAnB,GAAgC,SAAU,cAD/C;IAED,CAHD,MAGO;MACL3C,eAAA,CAAIgF,IAAJ,CAAU,IAAGxC,OAAQ,qBAAZ,GACN,OAAM,KAAKG,WAAL,GAAmB,UAAnB,GAAgC,SAAU,cADnD;IAED;;IACD,MAAMsC,QAAQ,GAAI,CAAC,KAAKtC,WAAN,IAAqB,CAAC4B,kBAAvB,IAA8CQ,QAA/D;;IACA,IAAIE,QAAJ,EAAc;MACZ3F,iBAAiB,CAAC4F,GAAlB,CAAsBV,OAAtB,EAA+B;QAC7BG,MAD6B;QAE7BC,QAF6B;QAG7B9C,YAAY,EAAE,KAAKA;MAHU,CAA/B;IAKD;;IACD,OAAOmD,QAAP;EACD,CApBD,CAoBE,OAAO/C,GAAP,EAAY;IAEZ,IAAInB,eAAA,CAAEK,QAAF,CAAWc,GAAG,CAAC7B,MAAf,EAAuBtB,qBAAvB,CAAJ,EAAmD;MACjDiB,eAAA,CAAIgF,IAAJ,CAAU,IAAGxC,OAAQ,iBAArB;;MACA,OAAO,KAAP;IACD;;IACD,MAAM2C,MAAM,GAAGjD,GAAG,CAAC7B,MAAJ,IAAc6B,GAAG,CAAC9B,MAAlB,IAA4B8B,GAAG,CAACN,OAA/C;;IACA,IAAIb,eAAA,CAAEK,QAAF,CAAW+D,MAAX,EAAmB9F,qBAAnB,CAAJ,EAA+C;MAS7CW,eAAA,CAAImC,IAAJ,CAASgD,MAAT;;MACAnF,eAAA,CAAImC,IAAJ,CAAU,aAAYK,OAAQ,2CAA9B;;MACA,OAAO,IAAP;IACD;;IACD,MAAM,IAAId,KAAJ,CAAW,mCAAkCc,OAAQ,KAA3C,GACb,mBAAkB2C,MAAO,EADtB,CAAN;EAED;AACF,CAhFD;;AAgGA1F,iBAAiB,CAACqF,eAAlB,GAAoC,eAAeA,eAAf,GAAkC;EACpE9E,eAAA,CAAIC,KAAJ,CAAW,wBAAuB,KAAK6B,YAAa,YAApD;;EACA,MAAMsD,OAAO,GAAG1G,aAAA,CAAKC,OAAL,CAAa,MAAM,IAAA2D,oBAAA,GAAnB,EAAkC,KAAlC,EACb,UAAS3B,eAAA,CAAOC,SAAP,KAAqB,MAArB,GAA8B,EAAG,EAD7B,CAAhB;;EAEA,IAAI,EAAC,MAAMY,WAAA,CAAGC,MAAH,CAAU2D,OAAV,CAAP,CAAJ,EAA+B;IAC7B,MAAM,IAAI1D,KAAJ,CAAW,2CAA0C0D,OAAQ,GAA7D,CAAN;EACD;;EACD,MAAMzF,IAAI,GAAG,CACX,IADW,EACL,OADK,EAEX,QAFW,EAED,KAAKoC,QAFJ,EAGX,WAHW,EAGE,KAAKD,YAHP,EAIX,YAJW,EAIG,KAAKE,gBAJR,CAAb;;EAMAhC,eAAA,CAAIgF,IAAJ,CAAU,YAAWI,OAAQ,qBAAoBlF,aAAA,CAAKC,KAAL,CAAWR,IAAX,CAAiB,EAAlE;;EACA,IAAI;IACF,MAAM;MAACS;IAAD,IAAW,MAAM,IAAAE,kBAAA,EAAK8E,OAAL,EAAczF,IAAd,EAAoB;MAAEe,wBAAwB,EAAEC,eAAA,CAAOC,SAAP;IAA5B,CAApB,CAAvB;IACA,MAAMyE,MAAM,GAAG,EAAf;;IACA,KAAK,MAAMC,QAAX,IAAuB,CAACpG,MAAD,EAASD,MAAT,EAAiBD,IAAjB,EAAuBG,GAAvB,CAAvB,EAAoD;MAClD,MAAMoG,MAAM,GAAG,IAAInB,MAAJ,CAAY,QAAOkB,QAAS,mBAA5B,EAAgD,IAAhD,CAAf;MACA,MAAME,KAAK,GAAGD,MAAM,CAACjF,IAAP,CAAYF,MAAZ,CAAd;;MACA,IAAI,CAACoF,KAAL,EAAY;QACV;MACD;;MACDH,MAAM,CAACC,QAAD,CAAN,GAAmBE,KAAK,CAAC,CAAD,CAAL,CAASC,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,EAA2BC,WAA3B,EAAnB;IACD;;IACD,IAAI3E,eAAA,CAAE4E,OAAF,CAAUN,MAAV,CAAJ,EAAuB;MACrBrF,eAAA,CAAIC,KAAJ,CAAUG,MAAV;;MACA,MAAM,IAAIsB,KAAJ,CAAU,qDAAV,CAAN;IACD;;IACD1B,eAAA,CAAIC,KAAJ,CAAW,kBAAiB2F,IAAI,CAACC,SAAL,CAAeR,MAAf,CAAuB,EAAnD;;IACA,OAAOA,MAAP;EACD,CAjBD,CAiBE,OAAO1D,CAAP,EAAU;IACV,MAAM,IAAID,KAAJ,CAAW,2BAA0B,KAAKI,YAAa,cAA7C,GACb,mBAAkBH,CAAC,CAACtB,MAAF,IAAYsB,CAAC,CAACC,OAAQ,EADrC,CAAN;EAED;AACF,CAnCD;;eAqCenC,iB"}