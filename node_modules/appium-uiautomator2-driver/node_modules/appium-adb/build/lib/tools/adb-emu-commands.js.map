{"version":3,"file":"adb-emu-commands.js","names":["PHONE_NUMBER_PATTERN","emuMethods","POWER_AC_STATES","Object","freeze","POWER_AC_ON","POWER_AC_OFF","GSM_CALL_ACTIONS","GSM_CALL","GSM_ACCEPT","GSM_CANCEL","GSM_HOLD","GSM_VOICE_STATES","GSM_VOICE_UNREGISTERED","GSM_VOICE_HOME","GSM_VOICE_ROAMING","GSM_VOICE_SEARCHING","GSM_VOICE_DENIED","GSM_VOICE_OFF","GSM_VOICE_ON","GSM_SIGNAL_STRENGTHS","NETWORK_SPEED","GSM","SCSD","GPRS","EDGE","UMTS","HSDPA","LTE","EVDO","FULL","SENSORS","ACCELERATION","GYROSCOPE","MAGNETIC_FIELD","ORIENTATION","TEMPERATURE","PROXIMITY","LIGHT","PRESSURE","HUMIDITY","MAGNETIC_FIELD_UNCALIBRATED","GYROSCOPE_UNCALIBRATED","HINGE_ANGLE0","HINGE_ANGLE1","HINGE_ANGLE2","HEART_RATE","RGBC_LIGHT","listEmulators","avdsRoot","process","env","ANDROID_AVD_HOME","dirExists","getAvdConfigPaths","log","warn","prefsRoot","getAndroidPrefsRoot","path","resolve","debug","configs","fs","glob","cwd","absolute","map","confPath","avdName","basename","split","slice","join","name","config","filter","_","trim","isEmulatorConnected","emulators","getConnectedEmulators","find","x","udid","curDeviceId","verifyEmulatorConnected","Error","fingerprint","fingerprintId","level","getApiLevel","adbExecEmu","rotate","powerAC","state","values","indexOf","TypeError","sensorSet","sensor","value","includes","isNil","powerCapacity","percent","parseInt","isNaN","powerOFF","sendSMS","phoneNumber","message","replace","test","gsmCall","action","gsmSignal","strength","info","gsmVoice","networkSpeed","speed","execEmuConsoleCommand","execTelnet","cmd","opts","port","portMatch","exec","host","execTimeout","connTimeout","initTimeout","resetTelnetAuthToken","okFlag","nokFlag","eol","client","net","connect","B","reject","connTimeoutObj","setTimeout","execTimeoutObj","initTimeoutObj","isCommandSent","serverResponse","once","e","clearTimeout","on","chunk","push","output","Buffer","concat","toString","cmdStr","isArray","util","quote","write","end","outputArr","length","last","getEmuVersionInfo","propsPath","sdkRoot","exists","content","readFile","revisionMatch","result","revision","buildIdMatch","buildId","getEmuImageProperties","avds","avd","msg","isEmpty","ini","parse","checkAvdExist","some"],"sources":["../../../lib/tools/adb-emu-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport { getAndroidPrefsRoot, dirExists } from '../helpers';\nimport _ from 'lodash';\nimport net from 'net';\nimport { util, fs } from '@appium/support';\nimport B from 'bluebird';\nimport path from 'path';\nimport ini from 'ini';\n\nconst PHONE_NUMBER_PATTERN = /^[+]?[(]?[0-9]*[)]?[-\\s.]?[0-9]*[-\\s.]?[0-9]{2,}$/im;\n\nconst emuMethods = {};\nemuMethods.POWER_AC_STATES = Object.freeze({\n  POWER_AC_ON: 'on',\n  POWER_AC_OFF: 'off'\n});\nemuMethods.GSM_CALL_ACTIONS = Object.freeze({\n  GSM_CALL: 'call',\n  GSM_ACCEPT: 'accept',\n  GSM_CANCEL: 'cancel',\n  GSM_HOLD: 'hold'\n});\nemuMethods.GSM_VOICE_STATES = Object.freeze({\n  GSM_VOICE_UNREGISTERED: 'unregistered',\n  GSM_VOICE_HOME: 'home',\n  GSM_VOICE_ROAMING: 'roaming',\n  GSM_VOICE_SEARCHING: 'searching',\n  GSM_VOICE_DENIED: 'denied',\n  GSM_VOICE_OFF: 'off',\n  GSM_VOICE_ON: 'on'\n});\nemuMethods.GSM_SIGNAL_STRENGTHS = [0, 1, 2, 3, 4];\n\nemuMethods.NETWORK_SPEED = Object.freeze({\n  GSM: 'gsm', // GSM/CSD (up: 14.4, down: 14.4).\n  SCSD: 'scsd', // HSCSD (up: 14.4, down: 57.6).\n  GPRS: 'gprs', // GPRS (up: 28.8, down: 57.6).\n  EDGE: 'edge', // EDGE/EGPRS (up: 473.6, down: 473.6).\n  UMTS: 'umts', // UMTS/3G (up: 384.0, down: 384.0).\n  HSDPA: 'hsdpa', // HSDPA (up: 5760.0, down: 13,980.0).\n  LTE: 'lte', // LTE (up: 58,000, down: 173,000).\n  EVDO: 'evdo', // EVDO (up: 75,000, down: 280,000).\n  FULL: 'full' // No limit, the default (up: 0.0, down: 0.0).\n});\n\nemuMethods.SENSORS = Object.freeze({\n  ACCELERATION: 'acceleration',\n  GYROSCOPE: 'gyroscope',\n  MAGNETIC_FIELD: 'magnetic-field',\n  ORIENTATION: 'orientation',\n  TEMPERATURE: 'temperature',\n  PROXIMITY: 'proximity',\n  LIGHT: 'light',\n  PRESSURE: 'pressure',\n  HUMIDITY: 'humidity',\n  MAGNETIC_FIELD_UNCALIBRATED: 'magnetic-field-uncalibrated',\n  GYROSCOPE_UNCALIBRATED: 'gyroscope-uncalibrated',\n  HINGE_ANGLE0: 'hinge-angle0',\n  HINGE_ANGLE1: 'hinge-angle1',\n  HINGE_ANGLE2: 'hinge-angle2',\n  HEART_RATE: 'heart-rate',\n  RGBC_LIGHT: 'rgbc-light',\n});\n\n/**\n * @typedef {Object} EmuInfo\n * @property {string} name Emulator name, for example `Pixel_XL_API_30`\n * @property {string} config Full path to the emulator config .ini file,\n * for example `/Users/user/.android/avd/Pixel_XL_API_30.ini`\n */\n\n/**\n * Retrieves the list of available Android emulators\n *\n * @returns {Array<EmuInfo>}\n */\nasync function listEmulators () {\n  let avdsRoot = process.env.ANDROID_AVD_HOME;\n  if (await dirExists(avdsRoot)) {\n    return await getAvdConfigPaths(avdsRoot);\n  }\n\n  if (avdsRoot) {\n    log.warn(`The value of the ANDROID_AVD_HOME environment variable '${avdsRoot}' is not an existing directory`);\n  }\n\n  const prefsRoot = await getAndroidPrefsRoot();\n  if (!prefsRoot) {\n    return [];\n  }\n\n  avdsRoot = path.resolve(prefsRoot, 'avd');\n  if (!await dirExists(avdsRoot)) {\n    log.debug(`Virtual devices config root '${avdsRoot}' is not an existing directory`);\n    return [];\n  }\n\n  return await getAvdConfigPaths(avdsRoot);\n}\n\n/**\n * Get configuration paths of all virtual devices\n *\n * @param {string} avdsRoot Path to the directory that contains the AVD .ini files\n * @returns {Array<EmuInfo>}\n */\nasync function getAvdConfigPaths (avdsRoot) {\n  const configs = await fs.glob('*.ini', {\n    cwd: avdsRoot,\n    absolute: true,\n  });\n  return configs.map((confPath) => {\n    const avdName = path.basename(confPath).split('.').slice(0, -1).join('.');\n    return {name: avdName, config: confPath};\n  }).filter(({name}) => _.trim(name));\n}\n\n/**\n * Check the emulator state.\n *\n * @return {boolean} True if Emulator is visible to adb.\n */\nemuMethods.isEmulatorConnected = async function isEmulatorConnected () {\n  let emulators = await this.getConnectedEmulators();\n  return !!_.find(emulators, (x) => x && x.udid === this.curDeviceId);\n};\n\n/**\n * Verify the emulator is connected.\n *\n * @throws {error} If Emulator is not visible to adb.\n */\nemuMethods.verifyEmulatorConnected = async function verifyEmulatorConnected () {\n  if (!(await this.isEmulatorConnected())) {\n    throw new Error(`The emulator \"${this.curDeviceId}\" was unexpectedly disconnected`);\n  }\n};\n\n/**\n * Emulate fingerprint touch event on the connected emulator.\n *\n * @param {string} fingerprintId - The ID of the fingerprint.\n */\nemuMethods.fingerprint = async function fingerprint (fingerprintId) {\n  if (!fingerprintId) {\n    throw new Error('Fingerprint id parameter must be defined');\n  }\n  // the method used only works for API level 23 and above\n  let level = await this.getApiLevel();\n  if (level < 23) {\n    throw new Error(`Device API Level must be >= 23. Current Api level '${level}'`);\n  }\n  await this.adbExecEmu(['finger', 'touch', fingerprintId]);\n};\n\n/**\n * Change the display orientation on the connected emulator.\n * The orientation is changed (PI/2 is added) every time\n * this method is called.\n */\nemuMethods.rotate = async function rotate () {\n  await this.adbExecEmu(['rotate']);\n};\n\n/**\n * Emulate power state change on the connected emulator.\n *\n * @param {string} state ['on'] - Either 'on' or 'off'.\n */\nemuMethods.powerAC = async function powerAC (state = 'on') {\n  if (_.values(emuMethods.POWER_AC_STATES).indexOf(state) === -1) {\n    throw new TypeError(`Wrong power AC state sent '${state}'. `\n      + `Supported values: ${_.values(emuMethods.POWER_AC_STATES)}]`);\n  }\n  await this.adbExecEmu(['power', 'ac', state]);\n};\n\n/**\n * Emulate sensors values on the connected emulator.\n *\n * @param {string} sensor - Sensor type declared in SENSORS items.\n * @param {number|string} value  - Number to set as the sensor value.\n * @throws {Error} - If sensor type or sensor value is not defined\n */\nemuMethods.sensorSet = async function sensorSet (sensor, value) {\n  if (!_.includes(emuMethods.SENSORS, sensor)) {\n    throw new TypeError(`Unsupported sensor sent '${sensor}'. `\n      + `Supported values: ${_.values(emuMethods.SENSORS)}]`);\n  }\n  if (_.isNil(value) || value === '') {\n    throw new TypeError(`Missing/invalid sensor value argument. `\n      + `You need to provide a valid value to set to the sensor in `\n      + `format <value-a>[:<value-b>[:<value-c>[...]]].`);\n  }\n  await this.adbExecEmu(['sensor', 'set', sensor, value]);\n};\n\n/**\n * Emulate power capacity change on the connected emulator.\n *\n * @param {string|number} percent [100] - Percentage value in range [0, 100].\n */\nemuMethods.powerCapacity = async function powerCapacity (percent = 100) {\n  percent = parseInt(percent, 10);\n  if (isNaN(percent) || percent < 0 || percent > 100) {\n    throw new Error(`The percentage value should be valid integer between 0 and 100`);\n  }\n  await this.adbExecEmu(['power', 'capacity', percent]);\n};\n\n/**\n * Emulate power off event on the connected emulator.\n */\nemuMethods.powerOFF = async function powerOFF () {\n  await this.powerAC(emuMethods.POWER_AC_STATES.POWER_AC_OFF);\n  await this.powerCapacity(0);\n};\n\n/**\n * Emulate send SMS event on the connected emulator.\n *\n * @param {string|number} phoneNumber - The phone number of message sender.\n * @param {string} message [''] - The message content.\n * @throws {error} If phone number has invalid format.\n */\nemuMethods.sendSMS = async function sendSMS (phoneNumber, message = '') {\n  message = message.trim();\n  if (message === '') {\n    throw new Error('Sending an SMS requires a message');\n  }\n  phoneNumber = `${phoneNumber}`.replace(/\\s*/, '');\n  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {\n    throw new Error(`Invalid sendSMS phoneNumber param ${phoneNumber}`);\n  }\n  await this.adbExecEmu(['sms', 'send', phoneNumber, message]);\n};\n\n/**\n * Emulate GSM call event on the connected emulator.\n *\n * @param {string|number} phoneNumber - The phone number of the caller.\n * @param {string} action [''] - One of available GSM call actions.\n * @throws {error} If phone number has invalid format.\n * @throws {error} If _action_ value is invalid.\n */\nemuMethods.gsmCall = async function gsmCall (phoneNumber, action = '') {\n  if (_.values(emuMethods.GSM_CALL_ACTIONS).indexOf(action) === -1) {\n    throw new Error(`Invalid gsm action param ${action}. Supported values: ${_.values(emuMethods.GSM_CALL_ACTIONS)}`);\n  }\n  phoneNumber = `${phoneNumber}`.replace(/\\s*/, '');\n  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {\n    throw new Error(`Invalid gsmCall phoneNumber param ${phoneNumber}`);\n  }\n  await this.adbExecEmu(['gsm', action, phoneNumber]);\n};\n\n/**\n * Emulate GSM signal strength change event on the connected emulator.\n *\n * @param {string|number} strength [4] - A number in range [0, 4];\n * @throws {error} If _strength_ value is invalid.\n */\nemuMethods.gsmSignal = async function gsmSignal (strength = 4) {\n  strength = parseInt(strength, 10);\n  if (emuMethods.GSM_SIGNAL_STRENGTHS.indexOf(strength) === -1) {\n    throw new Error(`Invalid signal strength param ${strength}. Supported values: ${_.values(emuMethods.GSM_SIGNAL_STRENGTHS)}`);\n  }\n  log.info('gsm signal-profile <strength> changes the reported strength on next (15s) update.');\n  await this.adbExecEmu(['gsm', 'signal-profile', strength]);\n};\n\n/**\n * Emulate GSM voice event on the connected emulator.\n *\n * @param {string} state ['on'] - Either 'on' or 'off'.\n * @throws {error} If _state_ value is invalid.\n */\nemuMethods.gsmVoice = async function gsmVoice (state = 'on') {\n  // gsm voice <state> allows you to change the state of your GPRS connection\n  if (_.values(emuMethods.GSM_VOICE_STATES).indexOf(state) === -1) {\n    throw new Error(`Invalid gsm voice state param ${state}. Supported values: ${_.values(emuMethods.GSM_VOICE_STATES)}`);\n  }\n  await this.adbExecEmu(['gsm', 'voice', state]);\n};\n\n/**\n * Emulate network speed change event on the connected emulator.\n *\n * @param {string} speed ['full'] - One of possible NETWORK_SPEED values.\n * @throws {error} If _speed_ value is invalid.\n */\nemuMethods.networkSpeed = async function networkSpeed (speed = 'full') {\n  // network speed <speed> allows you to set the network speed emulation.\n  if (_.values(emuMethods.NETWORK_SPEED).indexOf(speed) === -1) {\n    throw new Error(`Invalid network speed param ${speed}. Supported values: ${_.values(emuMethods.NETWORK_SPEED)}`);\n  }\n  await this.adbExecEmu(['network', 'speed', speed]);\n};\n\n/**\n * @typedef {Object} ExecTelnetOptions\n * @property {number} execTimeout [60000] A timeout used to wait for a server\n * reply to the given command\n * @property {number} connTimeout [5000] Console connection timeout in milliseconds\n * @property {number} initTimeout [5000] Telnet console initialization timeout\n * in milliseconds (the time between connection happens and the command prompt\n * is available)\n * @property {?number|string} port The emulator port number. The method will try to parse it\n * from the current device identifier if unset\n */\n\n/**\n * Executes a command through emulator telnet console interface and returns its output\n *\n * @param {Array<string>|string} cmd - The actual command to execute. See\n * https://developer.android.com/studio/run/emulator-console for more details\n * on available commands\n * @param {ExecTelnetOptions} opts\n * @returns {string} The command output\n * @throws {Error} If there was an error while connecting to the Telnet console\n * or if the given command returned non-OK response\n */\nemuMethods.execEmuConsoleCommand = async function execTelnet (cmd, opts = {}) {\n  let port = parseInt(opts.port, 10);\n  if (!port) {\n    const portMatch = /emulator-(\\d+)/i.exec(this.curDeviceId);\n    if (!portMatch) {\n      throw new Error(`Cannot parse the console port number from the device identifier '${this.curDeviceId}'. ` +\n        `Is it an emulator?`);\n    }\n    port = parseInt(portMatch[1], 10);\n  }\n  const host = '127.0.0.1';\n  const {\n    execTimeout = 60000,\n    connTimeout = 5000,\n    initTimeout = 5000,\n  } = opts;\n  await this.resetTelnetAuthToken();\n\n  const okFlag = /^OK$/m;\n  const nokFlag = /^KO\\b/m;\n  const eol = '\\r\\n';\n  const client = net.connect({\n    host,\n    port,\n  });\n\n  return await new B((resolve, reject) => {\n    const connTimeoutObj = setTimeout(\n      () => reject(new Error(`Cannot connect to the Emulator console at ${host}:${port} ` +\n        `after ${connTimeout}ms`)), connTimeout);\n    let execTimeoutObj;\n    let initTimeoutObj;\n    let isCommandSent = false;\n    let serverResponse = [];\n\n    client.once('error', (e) => {\n      clearTimeout(connTimeoutObj);\n      reject(new Error(`Cannot connect to the Emulator console at ${host}:${port}. ` +\n        `Original error: ${e.message}`));\n    });\n\n    client.once('connect', () => {\n      clearTimeout(connTimeoutObj);\n      initTimeoutObj = setTimeout(\n        () => reject(new Error(`Did not get the initial response from the Emulator console at ${host}:${port} ` +\n          `after ${initTimeout}ms`)), initTimeout);\n    });\n\n    client.on('data', (chunk) => {\n      serverResponse.push(chunk);\n      const output = Buffer.concat(serverResponse).toString('utf8').trim();\n      if (okFlag.test(output)) {\n        // The initial incoming data chunk confirms the interface is ready for input\n        if (!isCommandSent) {\n          clearTimeout(initTimeoutObj);\n          serverResponse = [];\n          const cmdStr = _.isArray(cmd) ? util.quote(cmd) : `${cmd}`;\n          log.debug(`Executing Emulator console command: ${cmdStr}`);\n          client.write(cmdStr);\n          client.write(eol);\n          isCommandSent = true;\n          execTimeoutObj = setTimeout(\n            () => reject(new Error(`Did not get any response from the Emulator console at ${host}:${port} ` +\n              `to '${cmd}' command after ${execTimeout}ms`)), execTimeout);\n          return;\n        }\n        clearTimeout(execTimeoutObj);\n        client.end();\n        const outputArr = output.split(eol);\n        // remove the redundant OK flag from the resulting command output\n        return resolve(outputArr.slice(0, outputArr.length - 1).join('\\n').trim());\n      } else if (nokFlag.test(output)) {\n        clearTimeout(initTimeoutObj);\n        clearTimeout(execTimeoutObj);\n        client.end();\n        const outputArr = output.split(eol);\n        return reject(_.trim(_.last(outputArr)));\n      }\n    });\n  });\n};\n\n/**\n * @typedef {Object} EmuVersionInfo\n * @property {?string} revision The actual revision number, for example '30.0.5'\n * @property {?number} buildId The build identifier, for example 6306047\n */\n\n/**\n * Retrieves emulator version from the file system\n *\n * @returns {EmuVersionInfo} If no version info could be parsed then an empty\n * object is returned\n */\nemuMethods.getEmuVersionInfo = async function getEmuVersionInfo () {\n  const propsPath = path.join(this.sdkRoot, 'emulator', 'source.properties');\n  if (!await fs.exists(propsPath)) {\n    return {};\n  }\n\n  const content = await fs.readFile(propsPath, 'utf8');\n  const revisionMatch = /^Pkg\\.Revision=([\\d.]+)$/m.exec(content);\n  const result = {};\n  if (revisionMatch) {\n    result.revision = revisionMatch[1];\n  }\n  const buildIdMatch = /^Pkg\\.BuildId=(\\d+)$/m.exec(content);\n  if (buildIdMatch) {\n    result.buildId = parseInt(buildIdMatch[1], 10);\n  }\n  return result;\n};\n\n/**\n * Retrieves emulator image properties from the local file system\n *\n * @param {string} avdName Emulator name. Should NOT start with '@' character\n * @throws {Error} if there was a failure while extracting the properties\n * @returns {Object} The content of emulator image properties file.\n * Usually this configuration .ini file has the following content:\n *   avd.ini.encoding=UTF-8\n *   path=/Users/username/.android/avd/Pixel_XL_API_30.avd\n *   path.rel=avd/Pixel_XL_API_30.avd\n *   target=android-30\n */\nemuMethods.getEmuImageProperties = async function getEmuImageProperties (avdName) {\n  const avds = await listEmulators();\n  const avd = avds.find(({name}) => name === avdName);\n  if (!avd) {\n    let msg = `Cannot find '${avdName}' emulator. `;\n    if (_.isEmpty(avds)) {\n      msg += `No emulators have been detected on your system`;\n    } else {\n      msg += `Available avd names are: ${avds.map(({name}) => name)}`;\n    }\n    throw new Error(msg);\n  }\n  return ini.parse(await fs.readFile(avd.config, 'utf8'));\n};\n\n/**\n * Check if given emulator exists in the list of available avds.\n *\n * @param {string} avdName - The name of emulator to verify for existence.\n * Should NOT start with '@' character\n * @throws {Error} If the emulator with given name does not exist.\n */\nemuMethods.checkAvdExist = async function checkAvdExist (avdName) {\n  const avds = await listEmulators();\n  if (!avds.some(({name}) => name === avdName)) {\n    let msg = `Avd '${avdName}' is not available. `;\n    if (_.isEmpty(avds)) {\n      msg += `No emulators have been detected on your system`;\n    } else {\n      msg += `Please select your avd name from one of these: '${avds.map(({name}) => name)}'`;\n    }\n    throw new Error(msg);\n  }\n  return true;\n};\n\nexport default emuMethods;\n"],"mappings":"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"}