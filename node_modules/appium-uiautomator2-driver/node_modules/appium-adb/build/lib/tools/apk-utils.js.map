{"version":3,"file":"apk-utils.js","names":["apkUtilsMethods","APP_INSTALL_STATE","UNKNOWN","NOT_INSTALLED","NEWER_VERSION_INSTALLED","SAME_VERSION_INSTALLED","OLDER_VERSION_INSTALLED","REMOTE_CACHE_ROOT","isAppInstalled","pkg","log","debug","installedPattern","RegExp","_","escapeRegExp","stdout","shell","isInstalled","test","e","Error","message","startUri","uri","opts","waitForLaunch","args","push","escapeShellArg","res","toLowerCase","includes","startApp","startAppOptions","activity","action","clone","replace","defaults","waitPkg","waitActivity","retry","stopApp","apiLevel","getApiLevel","cmd","buildStartCmd","intentName","optionalIntentArguments","shellOpts","isInteger","waitDuration","timeout","startsWith","waitForActivity","appDescriptor","dumpWindows","dumpsysArg","getFocusedPackageAndActivity","nullFocusedAppRe","focusedAppRe","nullCurrentFocusRe","currentFocusAppRe","focusedAppCandidates","currentFocusAppCandidates","candidates","pattern","match","exec","appPackage","trim","appActivity","length","intersectionWith","isEqual","waitForActivityOrNot","waitForStop","waitMs","splitNames","names","split","map","name","allPackages","allActivities","possibleActivityNames","oneActivity","currentPkg","join","possibleActivityPatterns","actName","conditionFunc","fullyQualifiedActivity","isActivityFound","some","p","waitForCondition","parseInt","intervalMs","act","waitForNotActivity","uninstallApk","options","info","keepData","forceStop","adbExec","installFromDevicePath","apkPathOnDevice","indexOf","cacheApk","apkPath","appHash","fs","hash","remotePath","path","posix","remoteCachedFiles","errorMarker","lsOutput","_areExtendedLsOptionsSupported","isBoolean","isString","substring","x","filter","Boolean","toHash","parse","catch","timer","timing","Timer","start","size","stat","basename","util","toReadableSizeString","getDuration","asMilliSeconds","toFixed","remoteAppsCache","LRU","max","remoteAppsCacheLimit","difference","keys","forEach","del","set","entriesToCleanup","has","slice","isEmpty","warn","install","appPath","endsWith","APKS_EXTENSION","installApks","cloneDeep","adbExecTimeout","DEFAULT_ADB_EXEC_TIMEOUT","APK_INSTALL_TIMEOUT","timeoutCapName","installArgs","buildInstallArgs","noIncremental","isIncrementalInstallSupported","installOpts","installCmd","performAppInstall","shouldCacheApp","isStreamedInstallSupported","clearCache","cacheApp","cachedAppPath","pmInstallCmdByRemotePath","output","newCachedAppPath","truncatedOutput","substr","isTestPackageOnlyError","msg","err","getApplicationInstallState","apkInfo","getApkInfo","versionCode","pkgVersionCode","versionName","pkgVersionNameStr","getPackageInfo","pkgVersionName","semver","valid","coerce","apkVersionCode","apkVersionNameStr","apkVersionName","satisfies","installOrUpgrade","enforceCurrentBuild","appState","wasUninstalled","uninstallPackage","Object","assign","extractStringsFromApk","language","out","originalAppPath","extractLanguageApk","apkStrings","configMarker","initAapt","formatConfigMarker","binaries","aapt","uniq","os","EOL","parseAaptStrings","stderr","initAapt2","aapt2","parseAapt2Strings","localPath","resolve","mkdirp","writeFile","JSON","stringify","getDeviceLanguage","getDeviceSysLanguage","getDeviceProductLanguage","getDeviceLocale","getDeviceCountry","country","getDeviceSysCountry","getDeviceProductCountry","locale","getDeviceSysLocale","getDeviceProductLocale","setDeviceLocale","validateLocale","split_locale","setDeviceLanguageCountry","ensureCurrentLocale","script","hasLanguage","hasCountry","retryInterval","curLanguage","curCountry","curLocale","localeCode","error","reconnect","ign","restartAdb","toUpperCase","setDeviceSysLocaleViaSettingApp","exists","extractBaseApk","apkReader","ApkReader","open","manifest","readManifest","parseManifest","result","versionNameMatch","versionCodeMatch","pullApk","tmpDir","packageMarker","tmpApp","pull"],"sources":["../../../lib/tools/apk-utils.js"],"sourcesContent":["import {\n  buildStartCmd, APKS_EXTENSION, buildInstallArgs,\n  APK_INSTALL_TIMEOUT, DEFAULT_ADB_EXEC_TIMEOUT,\n  parseManifest, parseAaptStrings, parseAapt2Strings, formatConfigMarker,\n  escapeShellArg,\n} from '../helpers.js';\nimport { exec } from 'teen_process';\nimport log from '../logger.js';\nimport path from 'path';\nimport _ from 'lodash';\nimport { retryInterval, waitForCondition } from 'asyncbox';\nimport { fs, util, mkdirp, timing } from '@appium/support';\nimport semver from 'semver';\nimport os from 'os';\nimport LRU from 'lru-cache';\nimport ApkReader from 'adbkit-apkreader';\n\nconst apkUtilsMethods = {};\n\napkUtilsMethods.APP_INSTALL_STATE = {\n  UNKNOWN: 'unknown',\n  NOT_INSTALLED: 'notInstalled',\n  NEWER_VERSION_INSTALLED: 'newerVersionInstalled',\n  SAME_VERSION_INSTALLED: 'sameVersionInstalled',\n  OLDER_VERSION_INSTALLED: 'olderVersionInstalled',\n};\nconst REMOTE_CACHE_ROOT = '/data/local/tmp/appium_cache';\n\n\n/**\n * Check whether the particular package is present on the device under test.\n *\n * @param {string} pkg - The name of the package to check.\n * @return {boolean} True if the package is installed.\n * @throws {Error} If there was an error while detecting application state\n */\napkUtilsMethods.isAppInstalled = async function isAppInstalled (pkg) {\n  log.debug(`Getting install status for ${pkg}`);\n  const installedPattern = new RegExp(`^\\\\s*Package\\\\s+\\\\[${_.escapeRegExp(pkg)}\\\\][^:]+:$`, 'm');\n  try {\n    const stdout = await this.shell(['dumpsys', 'package', pkg]);\n    const isInstalled = installedPattern.test(stdout);\n    log.debug(`'${pkg}' is${!isInstalled ? ' not' : ''} installed`);\n    return isInstalled;\n  } catch (e) {\n    throw new Error(`Error finding if '${pkg}' is installed. Original error: ${e.message}`);\n  }\n};\n\n/**\n * @typedef {Object} StartUriOptions\n * @property {?boolean} waitForLaunch [true] - if `false` then adb won't wait\n * for the started activity to return the control\n */\n\n/**\n * Start the particular URI on the device under test.\n *\n * @param {string} uri - The name of URI to start.\n * @param {string} pkg - The name of the package to start the URI with.\n * @param {StartUriOptions} opts\n */\napkUtilsMethods.startUri = async function startUri (uri, pkg, opts = {}) {\n  const {\n    waitForLaunch = true,\n  } = opts;\n\n  if (!uri || !pkg) {\n    throw new Error('URI and package arguments are required');\n  }\n\n  const args = ['am', 'start'];\n  if (waitForLaunch) {\n    args.push('-W');\n  }\n  args.push('-a', 'android.intent.action.VIEW',\n    '-d', escapeShellArg(uri),\n    pkg);\n\n  try {\n    const res = await this.shell(args);\n    if (res.toLowerCase().includes('unable to resolve intent')) {\n      throw new Error(res);\n    }\n  } catch (e) {\n    throw new Error(`Error attempting to start URI. Original error: ${e}`);\n  }\n};\n\n/**\n * @typedef {Object} StartAppOptions\n * @property {!string} pkg - The name of the application package\n * @property {?string} activity - The name of the main application activity.\n * This or action is required in order to be able to launch an app.\n * @property {?string} action - The name of the intent action that will launch the required app.\n * This or activity is required in order to be able to launch an app.\n * @property {?boolean} retry [true] - If this property is set to `true`\n * and the activity name does not start with '.' then the method\n * will try to add the missing dot and start the activity once more\n * if the first startup try fails.\n * @property {?boolean} stopApp [true] - Set it to `true` in order to forcefully\n * stop the activity if it is already running.\n * @property {?string} waitPkg - The name of the package to wait to on\n * startup (this only makes sense if this name is different from the one, which is set as `pkg`)\n * @property {?string} waitActivity - The name of the activity to wait to on\n * startup (this only makes sense if this name is different from the one, which is set as `activity`)\n * @property {?number} waitDuration - The number of milliseconds to wait until the\n * `waitActivity` is focused\n * @property {?string|number} user - The number of the user profile to start\n * the given activity with. The default OS user profile (usually zero) is used\n * when this property is unset\n * @property {?boolean} waitForLaunch [true] - if `false` then adb won't wait\n * for the started activity to return the control\n */\n\n/**\n * Start the particular package/activity on the device under test.\n *\n * @param {StartAppOptions} startAppOptions [{}] - Startup options mapping.\n * @return {string} The output of the corresponding adb command.\n * @throws {Error} If there is an error while executing the activity\n */\napkUtilsMethods.startApp = async function startApp (startAppOptions = {}) {\n  if (!startAppOptions.pkg || !(startAppOptions.activity || startAppOptions.action)) {\n    throw new Error('pkg, and activity or intent action, are required to start an application');\n  }\n\n  startAppOptions = _.clone(startAppOptions);\n  if (startAppOptions.activity) {\n    startAppOptions.activity = startAppOptions.activity.replace('$', '\\\\$');\n  }\n  // initializing defaults\n  _.defaults(startAppOptions, {\n    waitPkg: startAppOptions.pkg,\n    waitForLaunch: true,\n    waitActivity: false,\n    retry: true,\n    stopApp: true\n  });\n  // preventing null waitpkg\n  startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;\n\n  const apiLevel = await this.getApiLevel();\n  const cmd = buildStartCmd(startAppOptions, apiLevel);\n  const intentName = `${startAppOptions.action}${startAppOptions.optionalIntentArguments ? ' ' + startAppOptions.optionalIntentArguments : ''}`;\n  try {\n    const shellOpts = {};\n    if (_.isInteger(startAppOptions.waitDuration) && startAppOptions.waitDuration >= 0) {\n      shellOpts.timeout = startAppOptions.waitDuration;\n    }\n    const stdout = await this.shell(cmd, shellOpts);\n    if (stdout.includes('Error: Activity class') && stdout.includes('does not exist')) {\n      if (startAppOptions.retry && !startAppOptions.activity.startsWith('.')) {\n        log.debug(`We tried to start an activity that doesn't exist, ` +\n                  `retrying with '.${startAppOptions.activity}' activity name`);\n        startAppOptions.activity = `.${startAppOptions.activity}`;\n        startAppOptions.retry = false;\n        return await this.startApp(startAppOptions);\n      }\n      throw new Error(`Activity name '${startAppOptions.activity}' used to start the app doesn't ` +\n                      `exist or cannot be launched! Make sure it exists and is a launchable activity`);\n    } else if (stdout.includes('Error: Intent does not match any activities') || stdout.includes('Error: Activity not started, unable to resolve Intent')) {\n      throw new Error(`Activity for intent '${intentName}' used to start the app doesn't ` +\n                      `exist or cannot be launched! Make sure it exists and is a launchable activity`);\n    } else if (stdout.includes('java.lang.SecurityException')) {\n      // if the app is disabled on a real device it will throw a security exception\n      throw new Error(`The permission to start '${startAppOptions.activity}' activity has been denied.` +\n                      `Make sure the activity/package names are correct.`);\n    }\n    if (startAppOptions.waitActivity) {\n      await this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration);\n    }\n    return stdout;\n  } catch (e) {\n    const appDescriptor = startAppOptions.pkg || intentName;\n    throw new Error(`Cannot start the '${appDescriptor}' application. ` +\n      `Consider checking the driver's troubleshooting documentation. ` +\n      `Original error: ${e.message}`);\n  }\n};\n\n/**\n * Helper method to call `adb dumpsys window windows/displays`\n */\napkUtilsMethods.dumpWindows = async function dumpWindows () {\n  const apiLevel = await this.getApiLevel();\n\n  // With version 29, Android changed the dumpsys syntax\n  const dumpsysArg = apiLevel >= 29 ? 'displays' : 'windows';\n  const cmd = ['dumpsys', 'window', dumpsysArg];\n\n  return await this.shell(cmd);\n};\n\n/**\n * @typedef {Object} PackageActivityInfo\n * @property {?string} appPackage - The name of application package,\n *                                  for example 'com.acme.app'.\n * @property {?string} appActivity - The name of main application activity.\n */\n\n/**\n * Get the name of currently focused package and activity.\n *\n * @return {PackageActivityInfo} The mapping, where property names are 'appPackage' and 'appActivity'.\n * @throws {Error} If there is an error while parsing the data.\n */\napkUtilsMethods.getFocusedPackageAndActivity = async function getFocusedPackageAndActivity () {\n  log.debug('Getting focused package and activity');\n  let stdout;\n  try {\n    stdout = await this.dumpWindows();\n  } catch (e) {\n    throw new Error(\n      `Could not retrieve the currently focused package and activity. Original error: ${e.message}`\n    );\n  }\n\n  const nullFocusedAppRe = /^\\s*mFocusedApp=null/m;\n  // https://regex101.com/r/xZ8vF7/1\n  const focusedAppRe = new RegExp(\n    '^\\\\s*mFocusedApp.+Record\\\\{.*\\\\s([^\\\\s\\\\/\\\\}]+)\\\\/([^\\\\s\\\\/\\\\}\\\\,]+)\\\\,?(\\\\s[^\\\\s\\\\/\\\\}]+)*\\\\}',\n    'mg'\n  );\n  const nullCurrentFocusRe = /^\\s*mCurrentFocus=null/m;\n  const currentFocusAppRe = new RegExp('^\\\\s*mCurrentFocus.+\\\\{.+\\\\s([^\\\\s\\\\/]+)\\\\/([^\\\\s]+)\\\\b', 'mg');\n\n  const focusedAppCandidates = [];\n  const currentFocusAppCandidates = [];\n  for (const [candidates, pattern] of [\n    [focusedAppCandidates, focusedAppRe],\n    [currentFocusAppCandidates, currentFocusAppRe]\n  ]) {\n    let match;\n    while ((match = pattern.exec(stdout))) {\n      candidates.push({\n        appPackage: match[1].trim(),\n        appActivity: match[2].trim()\n      });\n    }\n  }\n  if (focusedAppCandidates.length > 1 && currentFocusAppCandidates.length > 0) {\n    // https://github.com/appium/appium/issues/17106\n    return _.intersectionWith(focusedAppCandidates, currentFocusAppCandidates, _.isEqual)[0]\n      ?? focusedAppCandidates[0];\n  }\n  if (focusedAppCandidates.length > 0 || currentFocusAppCandidates.length > 0) {\n    return focusedAppCandidates[0] ?? currentFocusAppCandidates[0];\n  }\n\n  for (const pattern of [nullFocusedAppRe, nullCurrentFocusRe]) {\n    if (pattern.exec(stdout)) {\n      return {\n        appPackage: null,\n        appActivity: null\n      };\n    }\n  }\n\n  log.debug(stdout);\n  throw new Error('Could not retrieve the currently focused package and activity');\n};\n\n/**\n * Wait for the given activity to be focused/non-focused.\n *\n * @param {string} pkg - The name of the package to wait for.\n * @param {string} activity - The name of the activity, belonging to that package,\n *                            to wait for.\n * @param {boolean} waitForStop - Whether to wait until the activity is focused (true)\n *                                or is not focused (false).\n * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.\n * @throws {error} If timeout happens.\n */\napkUtilsMethods.waitForActivityOrNot = async function waitForActivityOrNot (pkg, activity, waitForStop, waitMs = 20000) {\n  if (!pkg || !activity) {\n    throw new Error('Package and activity required.');\n  }\n  log.debug(`Waiting up to ${waitMs}ms for activity matching pkg: '${pkg}' and ` +\n            `activity: '${activity}' to${waitForStop ? ' not' : ''} be focused`);\n\n  const splitNames = (names) => names.split(',').map((name) => name.trim());\n  const allPackages = splitNames(pkg);\n  const allActivities = splitNames(activity);\n\n  const possibleActivityNames = [];\n  for (const oneActivity of allActivities) {\n    if (oneActivity.startsWith('.')) {\n      // add the package name if activity is not full qualified\n      for (const currentPkg of allPackages) {\n        possibleActivityNames.push(`${currentPkg}${oneActivity}`.replace(/\\.+/g, '.'));\n      }\n    } else {\n      // accept fully qualified activity name.\n      possibleActivityNames.push(oneActivity);\n      possibleActivityNames.push(`${pkg}.${oneActivity}`);\n    }\n  }\n  log.debug(`Possible activities, to be checked: ${possibleActivityNames.map((name) => `'${name}'`).join(', ')}`);\n\n  const possibleActivityPatterns = possibleActivityNames.map(\n    (actName) => new RegExp(`^${actName.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*?').replace(/\\$/g, '\\\\$')}$`)\n  );\n\n  const conditionFunc = async () => {\n    let appPackage;\n    let appActivity;\n    try {\n      ({appPackage, appActivity} = await this.getFocusedPackageAndActivity());\n    } catch (e) {\n      log.debug(e.message);\n      return false;\n    }\n    if (appActivity && appPackage) {\n      const fullyQualifiedActivity = appActivity.startsWith('.') ? `${appPackage}${appActivity}` : appActivity;\n      log.debug(`Found package: '${appPackage}' and fully qualified activity name : '${fullyQualifiedActivity}'`);\n      const isActivityFound = _.includes(allPackages, appPackage)\n        && possibleActivityPatterns.some((p) => p.test(fullyQualifiedActivity));\n      if ((!waitForStop && isActivityFound) || (waitForStop && !isActivityFound)) {\n        return true;\n      }\n    }\n    log.debug('Incorrect package and activity. Retrying.');\n    return false;\n  };\n\n  try {\n    await waitForCondition(conditionFunc, {\n      waitMs: parseInt(waitMs, 10),\n      intervalMs: 500,\n    });\n  } catch (e) {\n    throw new Error(`${possibleActivityNames.map((name) => `'${name}'`).join(' or ')} never ${waitForStop ? 'stopped' : 'started'}. ` +\n      `Consider checking the driver's troubleshooting documentation.`);\n  }\n};\n\n/**\n * Wait for the given activity to be focused\n *\n * @param {string} pkg - The name of the package to wait for.\n * @param {string} activity - The name of the activity, belonging to that package,\n *                            to wait for.\n * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.\n * @throws {error} If timeout happens.\n */\napkUtilsMethods.waitForActivity = async function waitForActivity (pkg, act, waitMs = 20000) {\n  await this.waitForActivityOrNot(pkg, act, false, waitMs);\n};\n\n/**\n * Wait for the given activity to be non-focused.\n *\n * @param {string} pkg - The name of the package to wait for.\n * @param {string} activity - The name of the activity, belonging to that package,\n *                            to wait for.\n * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.\n * @throws {error} If timeout happens.\n */\napkUtilsMethods.waitForNotActivity = async function waitForNotActivity (pkg, act, waitMs = 20000) {\n  await this.waitForActivityOrNot(pkg, act, true, waitMs);\n};\n\n/**\n * @typedef {Object} UninstallOptions\n * @property {number} timeout [adbExecTimeout] - The count of milliseconds to wait until the\n *                                      app is uninstalled.\n * @property {boolean} keepData [false] - Set to true in order to keep the\n *                                        application data and cache folders after uninstall.\n */\n\n/**\n * Uninstall the given package from the device under test.\n *\n * @param {string} pkg - The name of the package to be uninstalled.\n * @param {?UninstallOptions} options - The set of uninstall options.\n * @return {boolean} True if the package was found on the device and\n *                   successfully uninstalled.\n */\napkUtilsMethods.uninstallApk = async function uninstallApk (pkg, options = {}) {\n  log.debug(`Uninstalling ${pkg}`);\n  if (!await this.isAppInstalled(pkg)) {\n    log.info(`${pkg} was not uninstalled, because it was not present on the device`);\n    return false;\n  }\n\n  const cmd = ['uninstall'];\n  if (options.keepData) {\n    cmd.push('-k');\n  }\n  cmd.push(pkg);\n\n  let stdout;\n  try {\n    await this.forceStop(pkg);\n    stdout = (await this.adbExec(cmd, {timeout: options.timeout})).trim();\n  } catch (e) {\n    throw new Error(`Unable to uninstall APK. Original error: ${e.message}`);\n  }\n  log.debug(`'adb ${cmd.join(' ')}' command output: ${stdout}`);\n  if (stdout.includes('Success')) {\n    log.info(`${pkg} was successfully uninstalled`);\n    return true;\n  }\n  log.info(`${pkg} was not uninstalled`);\n  return false;\n};\n\n/**\n * Install the package after it was pushed to the device under test.\n *\n * @param {string} apkPathOnDevice - The full path to the package on the device file system.\n * @param {object} opts [{}] - Additional exec options. See {@link https://github.com/appium/node-teen_process}\n *                             for more details on this parameter.\n * @throws {error} If there was a failure during application install.\n */\napkUtilsMethods.installFromDevicePath = async function installFromDevicePath (apkPathOnDevice, opts = {}) {\n  let stdout = await this.shell(['pm', 'install', '-r', apkPathOnDevice], opts);\n  if (stdout.indexOf('Failure') !== -1) {\n    throw new Error(`Remote install failed: ${stdout}`);\n  }\n};\n\n/**\n * @typedef {Object} CachingOptions\n * @property {?number} timeout [adbExecTimeout] - The count of milliseconds to wait until the\n *                                                app is uploaded to the remote location.\n */\n\n/**\n * Caches the given APK at a remote location to speed up further APK deployments.\n *\n * @param {string} apkPath - Full path to the apk on the local FS\n * @param {?CachingOptions} options - Caching options\n * @returns {string} - Full path to the cached apk on the remote file system\n * @throws {Error} if there was a failure while caching the app\n */\napkUtilsMethods.cacheApk = async function cacheApk (apkPath, options = {}) {\n  const appHash = await fs.hash(apkPath);\n  const remotePath = path.posix.join(REMOTE_CACHE_ROOT, `${appHash}.apk`);\n  const remoteCachedFiles = [];\n  // Get current contents of the remote cache or create it for the first time\n  try {\n    const errorMarker = '_ERROR_';\n    let lsOutput = null;\n    if (this._areExtendedLsOptionsSupported === true || !_.isBoolean(this._areExtendedLsOptionsSupported)) {\n      lsOutput = await this.shell([`ls -t -1 ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);\n    }\n    if (!_.isString(lsOutput) || (lsOutput.includes(errorMarker) && !lsOutput.includes(REMOTE_CACHE_ROOT))) {\n      if (!_.isBoolean(this._areExtendedLsOptionsSupported)) {\n        log.debug('The current Android API does not support extended ls options. ' +\n          'Defaulting to no-options call');\n      }\n      lsOutput = await this.shell([`ls ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);\n      this._areExtendedLsOptionsSupported = false;\n    } else {\n      this._areExtendedLsOptionsSupported = true;\n    }\n    if (lsOutput.includes(errorMarker)) {\n      throw new Error(lsOutput.substring(0, lsOutput.indexOf(errorMarker)));\n    }\n    remoteCachedFiles.push(...(\n      lsOutput.split('\\n')\n        .map((x) => x.trim())\n        .filter(Boolean)\n    ));\n  } catch (e) {\n    log.debug(`Got an error '${e.message.trim()}' while getting the list of files in the cache. ` +\n      `Assuming the cache does not exist yet`);\n    await this.shell(['mkdir', '-p', REMOTE_CACHE_ROOT]);\n  }\n  log.debug(`The count of applications in the cache: ${remoteCachedFiles.length}`);\n  const toHash = (remotePath) => path.posix.parse(remotePath).name;\n  // Push the apk to the remote cache if needed\n  if (remoteCachedFiles.some((x) => toHash(x) === appHash)) {\n    log.info(`The application at '${apkPath}' is already cached to '${remotePath}'`);\n    // Update the application timestamp asynchronously in order to bump its position\n    // in the sorted ls output\n    // eslint-disable-next-line promise/prefer-await-to-then\n    this.shell(['touch', '-am', remotePath]).catch(() => {});\n  } else {\n    log.info(`Caching the application at '${apkPath}' to '${remotePath}'`);\n    const timer = new timing.Timer().start();\n    await this.push(apkPath, remotePath, {timeout: options.timeout});\n    const {size} = await fs.stat(apkPath);\n    log.info(`The upload of '${path.basename(apkPath)}' (${util.toReadableSizeString(size)}) ` +\n      `took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);\n  }\n  if (!this.remoteAppsCache) {\n    this.remoteAppsCache = new LRU({\n      max: this.remoteAppsCacheLimit,\n    });\n  }\n  // Cleanup the invalid entries from the cache\n  _.difference([...this.remoteAppsCache.keys()], remoteCachedFiles.map(toHash))\n    .forEach((hash) => this.remoteAppsCache.del(hash));\n  // Bump the cache record for the recently cached item\n  this.remoteAppsCache.set(appHash, remotePath);\n  // If the remote cache exceeds this.remoteAppsCacheLimit, remove the least recently used entries\n  const entriesToCleanup = remoteCachedFiles\n    .map((x) => path.posix.join(REMOTE_CACHE_ROOT, x))\n    .filter((x) => !this.remoteAppsCache.has(toHash(x)))\n    .slice(this.remoteAppsCacheLimit - [...this.remoteAppsCache.keys()].length);\n  if (!_.isEmpty(entriesToCleanup)) {\n    try {\n      await this.shell(['rm', '-f', ...entriesToCleanup]);\n      log.debug(`Deleted ${entriesToCleanup.length} expired application cache entries`);\n    } catch (e) {\n      log.warn(`Cannot delete ${entriesToCleanup.length} expired application cache entries. ` +\n        `Original error: ${e.message}`);\n    }\n  }\n  return remotePath;\n};\n\n/**\n * @typedef {Object} InstallOptions\n * @property {number} timeout [60000] - The count of milliseconds to wait until the\n *                                      app is installed.\n * @property {string} timeoutCapName [androidInstallTimeout] - The timeout option name\n *                                                             users can increase the timeout.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} replace [true] - Set it to false if you don't want\n *                                      the application to be upgraded/reinstalled\n *                                      if it is already present on the device.\n * @property {boolean} noIncremental [false] - Forcefully disables incremental installs if set to `true`.\n *                                             Read https://developer.android.com/preview/features#incremental\n *                                             for more details.\n */\n\n/**\n * Install the package from the local file system.\n *\n * @param {string} appPath - The full path to the local package.\n * @param {?InstallOptions} options - The set of installation options.\n * @throws {Error} If an unexpected error happens during install.\n */\napkUtilsMethods.install = async function install (appPath, options = {}) {\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    return await this.installApks(appPath, options);\n  }\n\n  options = _.cloneDeep(options);\n  _.defaults(options, {\n    replace: true,\n    timeout: this.adbExecTimeout === DEFAULT_ADB_EXEC_TIMEOUT ? APK_INSTALL_TIMEOUT : this.adbExecTimeout,\n    timeoutCapName: 'androidInstallTimeout',\n  });\n\n  const installArgs = buildInstallArgs(await this.getApiLevel(), options);\n  if (options.noIncremental && await this.isIncrementalInstallSupported()) {\n    // Adb throws an error if it does not know about an arg,\n    // which is the case here for older adb versions.\n    installArgs.push('--no-incremental');\n  }\n  const installOpts = {\n    timeout: options.timeout,\n    timeoutCapName: options.timeoutCapName,\n  };\n  const installCmd = [\n    'install',\n    ...installArgs,\n    appPath,\n  ];\n  let performAppInstall = async () => await this.adbExec(installCmd, installOpts);\n  // this.remoteAppsCacheLimit <= 0 means no caching should be applied\n  let shouldCacheApp = this.remoteAppsCacheLimit > 0;\n  if (shouldCacheApp) {\n    shouldCacheApp = !(await this.isStreamedInstallSupported());\n    if (!shouldCacheApp) {\n      log.info(`The application at '${appPath}' will not be cached, because the device under test has ` +\n        `confirmed the support of streamed installs`);\n    }\n  }\n  if (shouldCacheApp) {\n    const clearCache = async () => {\n      log.info(`Clearing the cache at '${REMOTE_CACHE_ROOT}'`);\n      await this.shell(['rm', '-rf', `${REMOTE_CACHE_ROOT}/*`]);\n    };\n    const cacheApp = async () => await this.cacheApk(appPath, {\n      timeout: options.timeout,\n    });\n    try {\n      const cachedAppPath = await cacheApp();\n      performAppInstall = async () => {\n        const pmInstallCmdByRemotePath = (remotePath) => [\n          'pm', 'install',\n          ...installArgs,\n          remotePath,\n        ];\n        const output = await this.shell(pmInstallCmdByRemotePath(cachedAppPath), installOpts);\n        // https://github.com/appium/appium/issues/13970\n        if (/\\bINSTALL_FAILED_INSUFFICIENT_STORAGE\\b/.test(output)) {\n          log.warn(`There was a failure while installing '${appPath}' ` +\n            `because of the insufficient device storage space`);\n          await clearCache();\n          log.info(`Consider decreasing the maximum amount of cached apps ` +\n            `(currently ${this.remoteAppsCacheLimit}) to avoid such issues in the future`);\n          const newCachedAppPath = await cacheApp();\n          return await this.shell(pmInstallCmdByRemotePath(newCachedAppPath), installOpts);\n        }\n        return output;\n      };\n    } catch (e) {\n      log.debug(e);\n      log.warn(`There was a failure while caching '${appPath}': ${e.message}`);\n      log.warn('Falling back to the default installation procedure');\n      await clearCache();\n    }\n  }\n  try {\n    const timer = new timing.Timer().start();\n    const output = await performAppInstall();\n    log.info(`The installation of '${path.basename(appPath)}' took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);\n    const truncatedOutput = (!_.isString(output) || output.length <= 300) ?\n      output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;\n    log.debug(`Install command stdout: ${truncatedOutput}`);\n    if (/\\[INSTALL[A-Z_]+FAILED[A-Z_]+\\]/.test(output)) {\n      if (this.isTestPackageOnlyError(output)) {\n        const msg = `Set 'allowTestPackages' capability to true in order to allow test packages installation.`;\n        log.warn(msg);\n        throw new Error(`${output}\\n${msg}`);\n      }\n      throw new Error(output);\n    }\n  } catch (err) {\n    // on some systems this will throw an error if the app already\n    // exists\n    if (!err.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {\n      throw err;\n    }\n    log.debug(`Application '${appPath}' already installed. Continuing.`);\n  }\n};\n\n/**\n * Retrieves the current installation state of the particular application\n *\n * @param {string} appPath - Full path to the application\n * @param {?string} pkg - Package identifier. If omitted then the script will\n *                        try to extract it on its own\n * @returns {string}]One of `APP_INSTALL_STATE` constants\n */\napkUtilsMethods.getApplicationInstallState = async function getApplicationInstallState (appPath, pkg = null) {\n  let apkInfo = null;\n  if (!pkg) {\n    apkInfo = await this.getApkInfo(appPath);\n    pkg = apkInfo.name;\n  }\n  if (!pkg) {\n    log.warn(`Cannot read the package name of '${appPath}'`);\n    return this.APP_INSTALL_STATE.UNKNOWN;\n  }\n\n  if (!await this.isAppInstalled(pkg)) {\n    log.debug(`App '${appPath}' is not installed`);\n    return this.APP_INSTALL_STATE.NOT_INSTALLED;\n  }\n\n  const {versionCode: pkgVersionCode, versionName: pkgVersionNameStr} = await this.getPackageInfo(pkg);\n  const pkgVersionName = semver.valid(semver.coerce(pkgVersionNameStr));\n  if (!apkInfo) {\n    apkInfo = await this.getApkInfo(appPath);\n  }\n  const {versionCode: apkVersionCode, versionName: apkVersionNameStr} = apkInfo;\n  const apkVersionName = semver.valid(semver.coerce(apkVersionNameStr));\n\n  if (!_.isInteger(apkVersionCode) || !_.isInteger(pkgVersionCode)) {\n    log.warn(`Cannot read version codes of '${appPath}' and/or '${pkg}'`);\n    if (!_.isString(apkVersionName) || !_.isString(pkgVersionName)) {\n      log.warn(`Cannot read version names of '${appPath}' and/or '${pkg}'`);\n      return this.APP_INSTALL_STATE.UNKNOWN;\n    }\n  }\n  if (_.isInteger(apkVersionCode) && _.isInteger(pkgVersionCode)) {\n    if (pkgVersionCode > apkVersionCode) {\n      log.debug(`The version code of the installed '${pkg}' is greater than the application version code (${pkgVersionCode} > ${apkVersionCode})`);\n      return this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED;\n    }\n    // Version codes might not be maintained. Check version names.\n    if (pkgVersionCode === apkVersionCode) {\n      if (_.isString(apkVersionName) && _.isString(pkgVersionName) && semver.satisfies(pkgVersionName, `>=${apkVersionName}`)) {\n        log.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);\n        return semver.satisfies(pkgVersionName, `>${apkVersionName}`)\n          ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED\n          : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;\n      }\n      if (!_.isString(apkVersionName) || !_.isString(pkgVersionName)) {\n        log.debug(`The version name of the installed '${pkg}' is equal to application version name (${pkgVersionCode} === ${apkVersionCode})`);\n        return this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;\n      }\n    }\n  } else if (_.isString(apkVersionName) && _.isString(pkgVersionName) && semver.satisfies(pkgVersionName, `>=${apkVersionName}`)) {\n    log.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);\n    return semver.satisfies(pkgVersionName, `>${apkVersionName}`)\n      ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED\n      : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;\n  }\n\n  log.debug(`The installed '${pkg}' package is older than '${appPath}' (${pkgVersionCode} < ${apkVersionCode} or '${pkgVersionName}' < '${apkVersionName}')'`);\n  return this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED;\n};\n\n/**\n * @typedef {Object} InstallOrUpgradeOptions\n * @property {number} timeout [60000] - The count of milliseconds to wait until the\n *                                      app is installed.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n *                                                 packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on SDCard\n *                                         instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n *                                                permissions requested in the application's manifest\n *                                                automatically after the installation is completed\n *                                                under Android 6+.\n * @property {boolean} enforceCurrentBuild [false] - Set to `true` in order to always prefer\n *                                                   the current build over any installed packages having\n *                                                   the same identifier\n */\n\n/**\n * @typedef {Object} InstallOrUpgradeResult\n * @property {boolean} wasUninstalled - Equals to `true` if the target app has been uninstalled\n *                                      before being installed\n * @property {APP_INSTALL_STATE} appState - One of `adb.APP_INSTALL_STATE` states, which reflects\n *                                          the state of the application before being installed.\n */\n\n/**\n * Install the package from the local file system or upgrade it if an older\n * version of the same package is already installed.\n *\n * @param {string} appPath - The full path to the local package.\n * @param {?string} pkg - The name of the installed package. The method will\n *                        perform faster if it is set.\n * @param {?InstallOrUpgradeOptions} options - Set of install options.\n * @throws {Error} If an unexpected error happens during install.\n * @returns {InstallOrUpgradeResult}\n */\napkUtilsMethods.installOrUpgrade = async function installOrUpgrade (appPath, pkg = null, options = {}) {\n  if (!pkg) {\n    const apkInfo = await this.getApkInfo(appPath);\n    pkg = apkInfo.name;\n  }\n\n  const {\n    enforceCurrentBuild,\n  } = options;\n  const appState = await this.getApplicationInstallState(appPath, pkg);\n  let wasUninstalled = false;\n  const uninstallPackage = async () => {\n    if (!await this.uninstallApk(pkg)) {\n      throw new Error(`'${pkg}' package cannot be uninstalled`);\n    }\n    wasUninstalled = true;\n  };\n  switch (appState) {\n    case this.APP_INSTALL_STATE.NOT_INSTALLED:\n      log.debug(`Installing '${appPath}'`);\n      await this.install(appPath, Object.assign({}, options, {replace: false}));\n      return {\n        appState,\n        wasUninstalled,\n      };\n    case this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED:\n      if (enforceCurrentBuild) {\n        log.info(`Downgrading '${pkg}' as requested`);\n        await uninstallPackage();\n        break;\n      }\n      log.debug(`There is no need to downgrade '${pkg}'`);\n      return {\n        appState,\n        wasUninstalled,\n      };\n    case this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED:\n      if (enforceCurrentBuild) {\n        break;\n      }\n      log.debug(`There is no need to install/upgrade '${appPath}'`);\n      return {\n        appState,\n        wasUninstalled,\n      };\n    case this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED:\n      log.debug(`Executing upgrade of '${appPath}'`);\n      break;\n    default:\n      log.debug(`The current install state of '${appPath}' is unknown. Installing anyway`);\n      break;\n  }\n\n  try {\n    await this.install(appPath, Object.assign({}, options, {replace: true}));\n  } catch (err) {\n    log.warn(`Cannot install/upgrade '${pkg}' because of '${err.message}'. Trying full reinstall`);\n    await uninstallPackage();\n    await this.install(appPath, Object.assign({}, options, {replace: false}));\n  }\n  return {\n    appState,\n    wasUninstalled,\n  };\n};\n\n/**\n * Extract string resources from the given package on local file system.\n *\n * @param {string} appPath - The full path to the .apk(s) package.\n * @param {?string} language - The name of the language to extract the resources for.\n *                             The default language is used if this equals to `null`/`undefined`\n * @param {string} out - The name of the destination folder on the local file system to\n *                       store the extracted file to.\n * @return {Object} A mapping object, where properties are: 'apkStrings', containing\n *                  parsed resource file represented as JSON object, and 'localPath',\n *                  containing the path to the extracted file on the local file system.\n */\napkUtilsMethods.extractStringsFromApk = async function extractStringsFromApk (appPath, language, out) {\n  log.debug(`Extracting strings from for language: ${language || 'default'}`);\n  const originalAppPath = appPath;\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractLanguageApk(appPath, language);\n  }\n\n  let apkStrings = {};\n  let configMarker;\n  try {\n    await this.initAapt();\n\n    configMarker = await formatConfigMarker(async () => {\n      const {stdout} = await exec(this.binaries.aapt, [\n        'd', 'configurations', appPath,\n      ]);\n      return _.uniq(stdout.split(os.EOL));\n    }, language, '(default)');\n\n    const {stdout} = await exec(this.binaries.aapt, [\n      'd', '--values', 'resources', appPath,\n    ]);\n    apkStrings = parseAaptStrings(stdout, configMarker);\n  } catch (e) {\n    log.debug('Cannot extract resources using aapt. Trying aapt2. ' +\n      `Original error: ${e.stderr || e.message}`);\n\n    await this.initAapt2();\n\n    configMarker = await formatConfigMarker(async () => {\n      const {stdout} = await exec(this.binaries.aapt2, [\n        'd', 'configurations', appPath,\n      ]);\n      return _.uniq(stdout.split(os.EOL));\n    }, language, '');\n\n    try {\n      const {stdout} = await exec(this.binaries.aapt2, [\n        'd', 'resources', appPath,\n      ]);\n      apkStrings = parseAapt2Strings(stdout, configMarker);\n    } catch (e) {\n      throw new Error(`Cannot extract resources from '${originalAppPath}'. ` +\n        `Original error: ${e.message}`);\n    }\n  }\n\n  if (_.isEmpty(apkStrings)) {\n    log.warn(`No strings have been found in '${originalAppPath}' resources ` +\n      `for '${configMarker || 'default'}' configuration`);\n  } else {\n    log.info(`Successfully extracted ${_.keys(apkStrings).length} strings from ` +\n      `'${originalAppPath}' resources for '${configMarker || 'default'}' configuration`);\n  }\n\n  const localPath = path.resolve(out, 'strings.json');\n  await mkdirp(out);\n  await fs.writeFile(localPath, JSON.stringify(apkStrings, null, 2), 'utf-8');\n  return {apkStrings, localPath};\n};\n\n/**\n * Get the language name of the device under test.\n *\n * @return {string} The name of device language.\n */\napkUtilsMethods.getDeviceLanguage = async function getDeviceLanguage () {\n  let language;\n  if (await this.getApiLevel() < 23) {\n    language = await this.getDeviceSysLanguage();\n    if (!language) {\n      language = await this.getDeviceProductLanguage();\n    }\n  } else {\n    language = (await this.getDeviceLocale()).split('-')[0];\n  }\n  return language;\n};\n\n/**\n * Get the country name of the device under test.\n *\n * @return {string} The name of device country.\n */\napkUtilsMethods.getDeviceCountry = async function getDeviceCountry () {\n  // this method is only used in API < 23\n  let country = await this.getDeviceSysCountry();\n  if (!country) {\n    country = await this.getDeviceProductCountry();\n  }\n  return country;\n};\n\n/**\n * Get the locale name of the device under test.\n *\n * @return {string} The name of device locale.\n */\napkUtilsMethods.getDeviceLocale = async function getDeviceLocale () {\n  // this method is only used in API >= 23\n  let locale = await this.getDeviceSysLocale();\n  if (!locale) {\n    locale = await this.getDeviceProductLocale();\n  }\n  return locale;\n};\n\n/**\n * Set the locale name of the device under test and the format of the locale is en-US, for example.\n * This method call setDeviceLanguageCountry, so, please use setDeviceLanguageCountry as possible.\n *\n * @param {string} locale - Names of the device language and the country connected with `-`. e.g. en-US.\n */\napkUtilsMethods.setDeviceLocale = async function setDeviceLocale (locale) {\n  const validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);\n  if (!validateLocale.test(locale)) {\n    log.warn(`setDeviceLocale requires the following format: en-US or ja-JP`);\n    return;\n  }\n\n  let split_locale = locale.split('-');\n  await this.setDeviceLanguageCountry(split_locale[0], split_locale[1]);\n};\n\n/**\n * Make sure current device locale is expected or not.\n *\n * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.\n * @param {string} country - Country. The language field is case insensitive, but Locale always canonicalizes to lower case.\n * @param {?string} script - Script. The script field is case insensitive but Locale always canonicalizes to title case.\n *\n * @return {boolean} If current locale is language and country as arguments, return true.\n */\napkUtilsMethods.ensureCurrentLocale = async function ensureCurrentLocale (language, country, script = null) {\n  const hasLanguage = _.isString(language);\n  const hasCountry = _.isString(country);\n\n  if (!hasLanguage && !hasCountry) {\n    log.warn('ensureCurrentLocale requires language or country');\n    return false;\n  }\n\n  // get lower case versions of the strings\n  language = (language || '').toLowerCase();\n  country = (country || '').toLowerCase();\n\n  const apiLevel = await this.getApiLevel();\n\n  return await retryInterval(5, 1000, async () => {\n    try {\n      if (apiLevel < 23) {\n        let curLanguage, curCountry;\n        if (hasLanguage) {\n          curLanguage = (await this.getDeviceLanguage()).toLowerCase();\n          if (!hasCountry && language === curLanguage) {\n            return true;\n          }\n        }\n        if (hasCountry) {\n          curCountry = (await this.getDeviceCountry()).toLowerCase();\n          if (!hasLanguage && country === curCountry) {\n            return true;\n          }\n        }\n        if (language === curLanguage && country === curCountry) {\n          return true;\n        }\n      } else {\n        const curLocale = (await this.getDeviceLocale()).toLowerCase();\n        // zh-hans-cn : zh-cn\n        const localeCode = script ? `${language}-${script.toLowerCase()}-${country}` : `${language}-${country}`;\n\n        if (localeCode === curLocale) {\n          log.debug(`Requested locale is equal to current locale: '${curLocale}'`);\n          return true;\n        }\n      }\n      return false;\n    } catch (err) {\n      // if there has been an error, restart adb and retry\n      log.error(`Unable to check device localization: ${err.message}`);\n      try {\n        await this.reconnect();\n      } catch (ign) {\n        await this.restartAdb();\n      }\n      throw err;\n    }\n  });\n};\n\n/**\n * Set the locale name of the device under test.\n *\n * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.\n *                            format: [a-zA-Z]{2,8}. e.g. en, ja : https://developer.android.com/reference/java/util/Locale.html\n * @param {string} country - Country. The country (region) field is case insensitive, but Locale always canonicalizes to upper case.\n *                            format: [a-zA-Z]{2} | [0-9]{3}. e.g. US, JP : https://developer.android.com/reference/java/util/Locale.html\n * @param {?string} script - Script. The script field is case insensitive but Locale always canonicalizes to title case.\n *                            format: [a-zA-Z]{4}. e.g. Hans in zh-Hans-CN : https://developer.android.com/reference/java/util/Locale.html\n */\napkUtilsMethods.setDeviceLanguageCountry = async function setDeviceLanguageCountry (language, country, script = null) {\n  let hasLanguage = language && _.isString(language);\n  let hasCountry = country && _.isString(country);\n  if (!hasLanguage || !hasCountry) {\n    log.warn(`setDeviceLanguageCountry requires language and country at least`);\n    log.warn(`Got language: '${language}' and country: '${country}'`);\n    return;\n  }\n  let apiLevel = await this.getApiLevel();\n\n  language = (language || '').toLowerCase();\n  country = (country || '').toUpperCase();\n\n  if (apiLevel < 23) {\n    let curLanguage = (await this.getDeviceLanguage()).toLowerCase();\n    let curCountry = (await this.getDeviceCountry()).toUpperCase();\n\n    if (language !== curLanguage || country !== curCountry) {\n      await this.setDeviceSysLocaleViaSettingApp(language, country);\n    }\n  } else {\n    let curLocale = await this.getDeviceLocale();\n\n    // zh-Hans-CN : zh-CN\n    const localeCode = script ? `${language}-${script}-${country}` : `${language}-${country}`;\n    log.debug(`Current locale: '${curLocale}'; requested locale: '${localeCode}'`);\n    if (localeCode.toLowerCase() !== curLocale.toLowerCase()) {\n      await this.setDeviceSysLocaleViaSettingApp(language, country, script);\n    }\n  }\n};\n\n/**\n * @typedef {Object} AppInfo\n * @property {string} name - Package name, for example 'com.acme.app'.\n * @property {number} versionCode - Version code.\n * @property {string} versionName - Version name, for example '1.0'.\n */\n\n/**\n * Get the package info from local apk file.\n *\n * @param {string} appPath - The full path to existing .apk(s) package on the local\n *                           file system.\n * @return {?AppInfo} The parsed application information.\n */\napkUtilsMethods.getApkInfo = async function getApkInfo (appPath) {\n  if (!await fs.exists(appPath)) {\n    throw new Error(`The file at path ${appPath} does not exist or is not accessible`);\n  }\n\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  try {\n    const apkReader = await ApkReader.open(appPath);\n    const manifest = await apkReader.readManifest();\n    const {pkg, versionName, versionCode} = parseManifest(manifest);\n    return {\n      name: pkg,\n      versionCode,\n      versionName,\n    };\n  } catch (e) {\n    log.warn(`Error '${e.message}' while getting badging info`);\n  }\n  return {};\n};\n\n/**\n * Get the package info from the installed application.\n *\n * @param {string} pkg - The name of the installed package.\n * @return {?AppInfo} The parsed application information.\n */\napkUtilsMethods.getPackageInfo = async function getPackageInfo (pkg) {\n  log.debug(`Getting package info for '${pkg}'`);\n  let result = {name: pkg};\n  try {\n    const stdout = await this.shell(['dumpsys', 'package', pkg]);\n    const versionNameMatch = new RegExp(/versionName=([\\d+.]+)/).exec(stdout);\n    if (versionNameMatch) {\n      result.versionName = versionNameMatch[1];\n    }\n    const versionCodeMatch = new RegExp(/versionCode=(\\d+)/).exec(stdout);\n    if (versionCodeMatch) {\n      result.versionCode = parseInt(versionCodeMatch[1], 10);\n    }\n    return result;\n  } catch (err) {\n    log.warn(`Error '${err.message}' while dumping package info`);\n  }\n  return result;\n};\n\n/**\n * Fetches base.apk of the given package to the local file system\n *\n * @param {string} pkg The package identifier (must be already installed on the device)\n * @param {string} tmpDir The destination folder path\n * @returns {string} Full path to the downloaded file\n * @throws {Error} If there was an error while fetching the .apk\n */\napkUtilsMethods.pullApk = async function pullApk (pkg, tmpDir) {\n  const stdout = _.trim(await this.shell(['pm', 'path', pkg]));\n  const packageMarker = 'package:';\n  if (!_.startsWith(stdout, packageMarker)) {\n    throw new Error(`Cannot pull the .apk package for '${pkg}'. Original error: ${stdout}`);\n  }\n\n  const remotePath = stdout.replace(packageMarker, '');\n  const tmpApp = path.resolve(tmpDir, `${pkg}.apk`);\n  await this.pull(remotePath, tmpApp);\n  log.debug(`Pulled app for package '${pkg}' to '${tmpApp}'`);\n  return tmpApp;\n};\n\nexport { REMOTE_CACHE_ROOT };\nexport default apkUtilsMethods;\n"],"mappings":"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"}