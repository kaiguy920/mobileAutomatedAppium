{"version":3,"file":"aab-utils.js","names":["AAB_CACHE","LRU","max","dispose","hash","extractedFilesRoot","fs","rimraf","AAB_CACHE_GUARD","AsyncLock","UNIVERSAL_APK","aabUtilsMethods","process","on","size","paths","values","log","debug","length","util","pluralize","appPath","rimrafSync","e","warn","message","extractUniversalApk","aabPath","opts","exists","Error","aabName","path","basename","apkName","substring","extname","tmpRoot","tempDir","openDir","tmpApksPath","join","acquire","aabHash","keystore","keystorePassword","keyAlias","keyPassword","cacheHash","keystoreHash","keyAliasHash","crypto","createHash","update","digest","has","resultPath","resolve","get","del","initAapt2","args","binaries","aapt2","execBundletool","unzipFile","universalApkPath","fileDeletionPromises","allFileNames","readdir","fileName","fullPath","push","B","all","ign","mv","set"],"sources":["../../../lib/tools/aab-utils.js"],"sourcesContent":["import log from '../logger.js';\nimport path from 'path';\nimport { fs, tempDir, util } from '@appium/support';\nimport LRU from 'lru-cache';\nimport { unzipFile } from '../helpers.js';\nimport AsyncLock from 'async-lock';\nimport B from 'bluebird';\nimport crypto from 'crypto';\n\nconst AAB_CACHE = new LRU({\n  max: 10,\n  dispose: (hash, extractedFilesRoot) => fs.rimraf(extractedFilesRoot),\n});\nconst AAB_CACHE_GUARD = new AsyncLock();\nconst UNIVERSAL_APK = 'universal.apk';\n\nconst aabUtilsMethods = {};\n\nprocess.on('exit', () => {\n  if (!AAB_CACHE.size) {\n    return;\n  }\n\n  const paths = [...AAB_CACHE.values()];\n  log.debug(`Performing cleanup of ${paths.length} cached .aab ` +\n    util.pluralize('package', paths.length));\n  for (const appPath of paths) {\n    try {\n      // Asynchronous calls are not supported in onExit handler\n      fs.rimrafSync(appPath);\n    } catch (e) {\n      log.warn(e.message);\n    }\n  }\n});\n\n/**\n * @typedef {Object} ApkCreationOptions\n * @property {string} keystore Specifies the path to the deployment keystore used\n * to sign the APKs. This flag is optional. If you don't include it,\n * bundletool attempts to sign your APKs with a debug signing key.\n * If the .apk has been already signed and cached then it is not going to be resigned\n * unless a different keystore or key alias is used.\n * @property {string} keystorePassword Specifies your keystoreâ€™s password.\n * It is mandatory to provide this value if `keystore` one is assigned\n * otherwise it is going to be ignored.\n * @property {string} keyAlias Specifies the alias of the signing key you want to use.\n * It is mandatory to provide this value if `keystore` one is assigned\n * otherwise it is going to be ignored.\n * @property {string} keyPassword Specifies the password for the signing key.\n * It is mandatory to provide this value if `keystore` one is assigned\n * otherwise it is going to be ignored.\n */\n\n/**\n * Builds a universal .apk from the given .aab package. See\n * https://developer.android.com/studio/command-line/bundletool#generate_apks\n * for more details.\n *\n * @param {string} aabPath Full path to the source .aab package\n * @param {ApkCreationOptions} opts\n * @returns The path to the resulting universal .apk. The .apk is stored in the internal cache\n * by default.\n * @throws {Error} If there was an error while creating the universal .apk\n */\naabUtilsMethods.extractUniversalApk = async function extractUniversalApk (aabPath, opts = {}) {\n  if (!await fs.exists(aabPath)) {\n    throw new Error(`The file at '${aabPath}' either does not exist or is not accessible`);\n  }\n\n  const aabName = path.basename(aabPath);\n  const apkName = aabName.substring(0, aabName.length - path.extname(aabName).length) + '.apk';\n  const tmpRoot = await tempDir.openDir();\n  const tmpApksPath = path.join(tmpRoot, `${aabName}.apks`);\n  try {\n    return await AAB_CACHE_GUARD.acquire(aabPath, async () => {\n      const aabHash = await fs.hash(aabPath);\n      const {\n        keystore,\n        keystorePassword,\n        keyAlias,\n        keyPassword,\n      } = opts;\n      let cacheHash = aabHash;\n      if (keystore) {\n        if (!await fs.exists(keystore)) {\n          throw new Error(`The keystore file at '${keystore}' either does not exist ` +\n            `or is not accessible`);\n        }\n        if (!keystorePassword || !keyAlias || !keyPassword) {\n          throw new Error('It is mandatory to also provide keystore password, key alias, ' +\n            'and key password if the keystore path is set');\n        }\n        const keystoreHash = await fs.hash(keystore);\n        const keyAliasHash = crypto.createHash('sha1');\n        keyAliasHash.update(keyAlias);\n        cacheHash = [cacheHash, keystoreHash, keyAliasHash.digest('hex')].join(':');\n      }\n      log.debug(`Calculated the cache key for '${aabPath}': ${cacheHash}`);\n      if (AAB_CACHE.has(cacheHash)) {\n        const resultPath = path.resolve(AAB_CACHE.get(cacheHash), apkName);\n        if (await fs.exists(resultPath)) {\n          return resultPath;\n        }\n        AAB_CACHE.del(cacheHash);\n      }\n\n      await this.initAapt2();\n      const args = [\n        'build-apks',\n        '--aapt2', this.binaries.aapt2,\n        '--bundle', aabPath,\n        '--output', tmpApksPath,\n        ...(keystore ? [\n          '--ks', keystore,\n          '--ks-pass', `pass:${keystorePassword}`,\n          '--ks-key-alias', keyAlias,\n          '--key-pass', `pass:${keyPassword}`,\n        ] : []),\n        '--mode=universal'\n      ];\n      log.debug(`Preparing universal .apks bundle from '${aabPath}'`);\n      await this.execBundletool(args, `Cannot build a universal .apks bundle from '${aabPath}'`);\n\n      log.debug(`Unpacking universal application bundle at '${tmpApksPath}' to '${tmpRoot}'`);\n      await unzipFile(tmpApksPath, tmpRoot);\n      let universalApkPath;\n      const fileDeletionPromises = [];\n      const allFileNames = await fs.readdir(tmpRoot);\n      for (const fileName of allFileNames) {\n        const fullPath = path.join(tmpRoot, fileName);\n        if (fileName === UNIVERSAL_APK) {\n          universalApkPath = fullPath;\n        } else {\n          fileDeletionPromises.push(fs.rimraf(fullPath));\n        }\n      }\n      try {\n        await B.all(fileDeletionPromises);\n      } catch (ign) {}\n      if (!universalApkPath) {\n        log.debug(`The following items were extracted from the .aab bundle: ${allFileNames}`);\n        throw new Error(`${UNIVERSAL_APK} cannot be found in '${aabPath}' bundle. ` +\n          `Does the archive contain a valid application bundle?`);\n      }\n      const resultPath = path.join(tmpRoot, apkName);\n      log.debug(`Found ${UNIVERSAL_APK} at '${universalApkPath}'. Caching it to '${resultPath}'`);\n      await fs.mv(universalApkPath, resultPath);\n      AAB_CACHE.set(cacheHash, tmpRoot);\n      return resultPath;\n    });\n  } catch (e) {\n    await fs.rimraf(tmpRoot);\n    throw e;\n  }\n};\n\nexport default aabUtilsMethods;\n"],"mappings":"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"}