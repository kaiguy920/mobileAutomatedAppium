{"version":3,"file":"lockmgmt.js","names":["lockManagementMethods","CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR","CREDENTIAL_DID_NOT_MATCH_ERROR","SUPPORTED_LOCK_CREDENTIAL_TYPES","KEYCODE_POWER","KEYCODE_WAKEUP","HIDE_KEYBOARD_WAIT_TIME","buildCommand","verb","oldCredential","args","cmd","_","isEmpty","push","swipeUp","adb","output","shell","dimensionsMatch","exec","Error","displayWidth","parseInt","displayHeight","x0","y0","x1","y1","map","c","Math","trunc","isLockManagementSupported","isBoolean","_isLockManagementSupported","passFlag","ign","includes","log","debug","verifyLockCredential","credential","stdout","stderr","outputFormat","EXEC_OUTPUT_FORMAT","FULL","some","x","e","message","clearLockCredential","isLockEnabled","test","setLockCredential","credentialType","isInteger","isScreenLocked","process","env","APPIUM_LOG_DUMPSYS","dumpsysFile","path","resolve","cwd","fs","writeFile","isShowingLockscreen","isCurrentFocusOnKeyguard","isScreenOnFully","dismissKeyguard","info","cycleWakeUp","getApiLevel","hideKeyboard","B","delay","back","keyevent"],"sources":["../../../lib/tools/lockmgmt.js"],"sourcesContent":["import log from '../logger.js';\nimport path from 'path';\nimport _ from 'lodash';\nimport { fs } from '@appium/support';\nimport {\n  isShowingLockscreen, isCurrentFocusOnKeyguard, isScreenOnFully,\n} from '../helpers.js';\nimport B from 'bluebird';\n\nconst lockManagementMethods = {};\n\nconst CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR = `Credential can't be null or empty`;\nconst CREDENTIAL_DID_NOT_MATCH_ERROR = `didn't match`;\nconst SUPPORTED_LOCK_CREDENTIAL_TYPES = ['password', 'pin', 'pattern'];\nconst KEYCODE_POWER = 26;\nconst KEYCODE_WAKEUP = 224; // works over API Level 20\nconst HIDE_KEYBOARD_WAIT_TIME = 100;\n\nfunction buildCommand (verb, oldCredential = null, ...args) {\n  const cmd = ['locksettings', verb];\n  if (!_.isEmpty(oldCredential)) {\n    cmd.push('--old', oldCredential);\n  }\n  if (!_.isEmpty(args)) {\n    cmd.push(...args);\n  }\n  return cmd;\n}\n\nasync function swipeUp (adb) {\n  const output = await adb.shell(['dumpsys', 'window']);\n  const dimensionsMatch = /init=(\\d+)x(\\d+)/.exec(output);\n  if (!dimensionsMatch) {\n    throw new Error('Cannot retrieve the display size');\n  }\n  const displayWidth = parseInt(dimensionsMatch[1], 10);\n  const displayHeight = parseInt(dimensionsMatch[2], 10);\n  const x0 = displayWidth / 2;\n  const y0 = displayHeight / 5 * 4;\n  const x1 = x0;\n  const y1 = displayHeight / 5;\n  await adb.shell([\n    'input', 'touchscreen', 'swipe',\n    ...([x0, y0, x1, y1].map((c) => Math.trunc(c)))\n  ]);\n}\n\n/**\n * Check whether the device supports lock settings management with `locksettings`\n * command line tool. This tool has been added to Android toolset since  API 27 Oreo\n *\n * @return {boolean} True if the management is supported. The result is cached per ADB instance\n */\nlockManagementMethods.isLockManagementSupported = async function isLockManagementSupported () {\n  if (!_.isBoolean(this._isLockManagementSupported)) {\n    const passFlag = '__PASS__';\n    let output = '';\n    try {\n      output = await this.shell([`locksettings help && echo ${passFlag}`]);\n    } catch (ign) {}\n    this._isLockManagementSupported = _.includes(output, passFlag);\n    log.debug(`Extended lock settings management is ` +\n      `${this._isLockManagementSupported ? '' : 'not '}supported`);\n  }\n  return this._isLockManagementSupported;\n};\n\n/**\n * Check whether the given credential is matches to the currently set one.\n *\n * @param {?string} credential [null] The credential value. It could be either\n * pin, password or a pattern. A pattern is specified by a non-separated list\n * of numbers that index the cell on the pattern in a 1-based manner in left\n * to right and top to bottom order, i.e. the top-left cell is indexed with 1,\n * whereas the bottom-right cell is indexed with 9. Example: 1234.\n * null/empty value assumes the device has no lock currently set.\n * @return {boolean} True if the given credential matches to the device's one\n * @throws {Error} If the verification faces an unexpected error\n */\nlockManagementMethods.verifyLockCredential = async function verifyLockCredential (credential = null) {\n  try {\n    const {stdout, stderr} = await this.shell(buildCommand('verify', credential), {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (_.includes(stdout, 'verified successfully')) {\n      return true;\n    }\n    if ([`didn't match`, CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR]\n        .some((x) => _.includes(stderr || stdout, x))) {\n      return false;\n    }\n    throw new Error(stderr || stdout);\n  } catch (e) {\n    throw new Error(`Device lock credential verification failed. ` +\n      `Original error: ${e.stderr || e.stdout || e.message}`);\n  }\n};\n\n/**\n * Clears current lock credentials. Usually it takes several seconds for a device to\n * sync the credential state after this method returns.\n *\n * @param {?string} credential [null] The credential value. It could be either\n * pin, password or a pattern. A pattern is specified by a non-separated list\n * of numbers that index the cell on the pattern in a 1-based manner in left\n * to right and top to bottom order, i.e. the top-left cell is indexed with 1,\n * whereas the bottom-right cell is indexed with 9. Example: 1234.\n * null/empty value assumes the device has no lock currently set.\n * @throws {Error} If operation faces an unexpected error\n */\nlockManagementMethods.clearLockCredential = async function clearLockCredential (credential = null) {\n  try {\n    const {stdout, stderr} = await this.shell(buildCommand('clear', credential), {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (!['user has no password', 'Lock credential cleared']\n        .some((x) => _.includes(stderr || stdout, x))) {\n      throw new Error(stderr || stdout);\n    }\n  } catch (e) {\n    throw new Error(`Cannot clear device lock credential. ` +\n      `Original error: ${e.stderr || e.stdout || e.message}`);\n  }\n};\n\n/**\n * Checks whether the device is locked with a credential (either pin or a password\n * or a pattern).\n *\n * @returns {boolean} `true` if the device is locked\n * @throws {Error} If operation faces an unexpected error\n */\nlockManagementMethods.isLockEnabled = async function isLockEnabled () {\n  try {\n    const {stdout, stderr} = await this.shell(buildCommand('get-disabled'), {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (/\\bfalse\\b/.test(stdout)\n        || [CREDENTIAL_DID_NOT_MATCH_ERROR, CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR].some(\n          (x) => _.includes(stderr || stdout, x))) {\n      return true;\n    }\n    if (/\\btrue\\b/.test(stdout)) {\n      return false;\n    }\n    throw new Error(stderr || stdout);\n  } catch (e) {\n    throw new Error(`Cannot check if device lock is enabled. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Sets the device lock.\n *\n * @param {!string} credentialType One of: password, pin, pattern.\n * @param {!string} credential A non-empty credential value to be set.\n * Make sure your new credential matches to the actual system security requirements,\n * e.g. a minimum password length. A pattern is specified by a non-separated list\n * of numbers that index the cell on the pattern in a 1-based manner in left\n * to right and top to bottom order, i.e. the top-left cell is indexed with 1,\n * whereas the bottom-right cell is indexed with 9. Example: 1234.\n * @param {?string} oldCredential [null] An old credential string.\n * It is only required to be set in case you need to change the current\n * credential rather than to set a new one. Setting it to a wrong value will\n * make this method to fail and throw an exception.\n * @throws {Error} If there was a failure while verifying input arguments or setting\n * the credential\n */\nlockManagementMethods.setLockCredential = async function setLockCredential (\n  credentialType, credential, oldCredential = null) {\n  if (!SUPPORTED_LOCK_CREDENTIAL_TYPES.includes(credentialType)) {\n    throw new Error(`Device lock credential type '${credentialType}' is unknown. ` +\n      `Only the following credential types are supported: ${SUPPORTED_LOCK_CREDENTIAL_TYPES}`);\n  }\n  if (_.isEmpty(credential) && !_.isInteger(credential)) {\n    throw new Error('Device lock credential cannot be empty');\n  }\n  const cmd = buildCommand(`set-${credentialType}`, oldCredential, credential);\n  try {\n    const {stdout, stderr} = await this.shell(cmd, {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (!_.includes(stdout, 'set to')) {\n      throw new Error(stderr || stdout);\n    }\n  } catch (e) {\n    throw new Error(`Setting of device lock ${credentialType} credential failed. ` +\n      `Original error: ${e.stderr || e.stdout || e.message}`);\n  }\n};\n\n/**\n * Retrieve the screen lock state of the device under test.\n *\n * @return {boolean} True if the device is locked.\n */\nlockManagementMethods.isScreenLocked = async function isScreenLocked () {\n  const stdout = await this.shell(['dumpsys', 'window']);\n  if (process.env.APPIUM_LOG_DUMPSYS) {\n    // optional debugging\n    // if the method is not working, turn it on and send us the output\n    const dumpsysFile = path.resolve(process.cwd(), 'dumpsys.log');\n    log.debug(`Writing dumpsys output to ${dumpsysFile}`);\n    await fs.writeFile(dumpsysFile, stdout);\n  }\n  return isShowingLockscreen(stdout) || isCurrentFocusOnKeyguard(stdout) || !isScreenOnFully(stdout);\n};\n\n/**\n * Dismisses keyguard overlay.\n */\nlockManagementMethods.dismissKeyguard = async function dismissKeyguard () {\n  log.info('Waking up the device to dismiss the keyguard');\n  // Screen off once to force pre-inputted text field clean after wake-up\n  // Just screen on if the screen defaults off\n  await this.cycleWakeUp();\n\n  if (await this.getApiLevel() > 21) {\n    await this.shell(['wm', 'dismiss-keyguard']);\n    return;\n  }\n\n  const stdout = await this.shell(['dumpsys', 'window', 'windows']);\n  if (!isCurrentFocusOnKeyguard(stdout)) {\n    log.debug('The keyguard seems to be inactive');\n    return;\n  }\n\n  log.debug('Swiping up to dismiss the keyguard');\n  if (await this.hideKeyboard()) {\n    await B.delay(HIDE_KEYBOARD_WAIT_TIME);\n  }\n  log.debug('Dismissing notifications from the unlock view');\n  await this.shell(['service', 'call', 'notification', '1']);\n  await this.back();\n  await swipeUp(this);\n};\n\n/**\n * Presses the corresponding key combination to make sure the device's screen\n * is not turned off and is locked if the latter is enabled.\n */\nlockManagementMethods.cycleWakeUp = async function cycleWakeUp () {\n  await this.keyevent(KEYCODE_POWER);\n  await this.keyevent(KEYCODE_WAKEUP);\n};\n\nexport default lockManagementMethods;\n"],"mappings":"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"}