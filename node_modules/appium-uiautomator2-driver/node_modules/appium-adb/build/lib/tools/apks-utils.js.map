{"version":3,"file":"apks-utils.js","names":["BASE_APK","LANGUAGE_APK","lang","APKS_CACHE","LRU","max","dispose","apksHash","extractedFilesRoot","fs","rimraf","APKS_CACHE_GUARD","AsyncLock","BUNDLETOOL_TIMEOUT_MS","apksUtilsMethods","process","on","size","paths","values","log","debug","length","util","pluralize","appPath","rimrafSync","e","warn","message","extractFromApks","apks","dstPath","_","isArray","acquire","hash","has","resultPath","path","resolve","get","exists","del","tmpRoot","tempDir","openDir","unzipFile","Error","join","sep","set","execBundletool","args","errorMsg","initBundletool","binaries","bundletool","env","adbPort","ANDROID_ADB_SERVER_PORT","adbHost","ANDROID_ADB_SERVER_HOST","JSON","stringify","stdout","exec","getJavaForOs","timeout","truncate","stderr","getDeviceSpec","specLocation","executable","curDeviceId","installMultipleApks","apkPathsToInstall","options","installArgs","buildInstallArgs","getApiLevel","adbExec","timeoutCapName","installApks","grantPermissions","allowTestPackages","APKS_INSTALL_TIMEOUT","push","tasks","basename","getApkInfo","apkInfo","B","all","grantAllPermissions","name","extractBaseApk","extractLanguageApk","language","info","defaultLanguages","ign","isTestPackageOnlyError","output","test"],"sources":["../../../lib/tools/apks-utils.js"],"sourcesContent":["import { exec } from 'teen_process';\nimport log from '../logger.js';\nimport path from 'path';\nimport _ from 'lodash';\nimport { fs, tempDir, util } from '@appium/support';\nimport LRU from 'lru-cache';\nimport {\n  getJavaForOs, unzipFile, buildInstallArgs, APKS_INSTALL_TIMEOUT\n} from '../helpers.js';\nimport AsyncLock from 'async-lock';\nimport B from 'bluebird';\n\nconst BASE_APK = 'base-master.apk';\nconst LANGUAGE_APK = (lang) => `base-${lang}.apk`;\nconst APKS_CACHE = new LRU({\n  max: 10,\n  dispose: (apksHash, extractedFilesRoot) => fs.rimraf(extractedFilesRoot),\n});\nconst APKS_CACHE_GUARD = new AsyncLock();\nconst BUNDLETOOL_TIMEOUT_MS = 4 * 60 * 1000;\n\nconst apksUtilsMethods = {};\n\nprocess.on('exit', () => {\n  if (!APKS_CACHE.size) {\n    return;\n  }\n\n  const paths = [...APKS_CACHE.values()];\n  log.debug(`Performing cleanup of ${paths.length} cached .apks ` +\n    util.pluralize('package', paths.length));\n  for (const appPath of paths) {\n    try {\n      // Asynchronous calls are not supported in onExit handler\n      fs.rimrafSync(appPath);\n    } catch (e) {\n      log.warn(e.message);\n    }\n  }\n});\n\n/**\n * Extracts the particular apks package into a temporary folder,\n * finds and returns the full path to the file contained in this apk.\n * The resulting temporary path, where the .apks file has been extracted,\n * will be stored into the internal LRU cache for better performance.\n *\n * @param {string} apks - The full path to the .apks file\n * @param {string|Array<String>} dstPath - The relative path to the destination file,\n * which is going to be extracted, where each path component is an array item\n * @returns {string} Full path to the extracted file\n * @throws {Error} If the requested item does not exist in the extracted archive or the provides\n * apks file is not a valid bundle\n */\nasync function extractFromApks (apks, dstPath) {\n  if (!_.isArray(dstPath)) {\n    dstPath = [dstPath];\n  }\n\n  return await APKS_CACHE_GUARD.acquire(apks, async () => {\n    // It might be that the original file has been replaced,\n    // so we need to keep the hash sums instead of the actual file paths\n    // as caching keys\n    const apksHash = await fs.hash(apks);\n    log.debug(`Calculated '${apks}' hash: ${apksHash}`);\n\n    if (APKS_CACHE.has(apksHash)) {\n      const resultPath = path.resolve(APKS_CACHE.get(apksHash), ...dstPath);\n      if (await fs.exists(resultPath)) {\n        return resultPath;\n      }\n      APKS_CACHE.del(apksHash);\n    }\n\n    const tmpRoot = await tempDir.openDir();\n    log.debug(`Unpacking application bundle at '${apks}' to '${tmpRoot}'`);\n    await unzipFile(apks, tmpRoot);\n    const resultPath = path.resolve(tmpRoot, ...dstPath);\n    if (!await fs.exists(resultPath)) {\n      throw new Error(`${dstPath.join(path.sep)} cannot be found in '${apks}' bundle. ` +\n        `Does the archive contain a valid application bundle?`);\n    }\n    APKS_CACHE.set(apksHash, tmpRoot);\n    return resultPath;\n  });\n}\n\n/**\n * Executes bundletool utility with given arguments and returns the actual stdout\n *\n * @param {Array<String>} args - the list of bundletool arguments\n * @param {string} errorMsg - The customized error message string\n * @returns {string} the actual command stdout\n * @throws {Error} If bundletool jar does not exist in PATH or there was an error while\n * executing it\n */\napksUtilsMethods.execBundletool = async function execBundletool (args, errorMsg) {\n  await this.initBundletool();\n  args = [\n    '-jar', this.binaries.bundletool,\n    ...args\n  ];\n  const env = process.env;\n  if (this.adbPort) {\n    env.ANDROID_ADB_SERVER_PORT = `${this.adbPort}`;\n  }\n  if (this.adbHost) {\n    env.ANDROID_ADB_SERVER_HOST = this.adbHost;\n  }\n  log.debug(`Executing bundletool with arguments: ${JSON.stringify(args)}`);\n  let stdout;\n  try {\n    ({stdout} = await exec(await getJavaForOs(), args, {\n      env,\n      timeout: BUNDLETOOL_TIMEOUT_MS,\n    }));\n    log.debug(`Command stdout: ${_.truncate(stdout, {length: 300})}`);\n    return stdout;\n  } catch (e) {\n    if (e.stdout) {\n      log.debug(`Command stdout: ${e.stdout}`);\n    }\n    if (e.stderr) {\n      log.debug(`Command stderr: ${e.stderr}`);\n    }\n    throw new Error(`${errorMsg}. Original error: ${e.message}`);\n  }\n};\n\n/**\n * @param {string} specLocation - The full path to the generated device spec location\n * @returns {string} The same `specLocation` value\n * @throws {Error} If it is not possible to retrieve the spec for the current device\n */\napksUtilsMethods.getDeviceSpec = async function getDeviceSpec (specLocation) {\n  const args = [\n    'get-device-spec',\n    '--adb', this.executable.path,\n    '--device-id', this.curDeviceId,\n    '--output', specLocation,\n  ];\n  log.debug(`Getting the spec for the device '${this.curDeviceId}'`);\n  await this.execBundletool(args, 'Cannot retrieve the device spec');\n  return specLocation;\n};\n\n/**\n * @typedef {Object} InstallMultipleApksOptions\n * @property {?number|string} timeout [20000] - The number of milliseconds to wait until\n * the installation is completed\n * @property {string} timeoutCapName [androidInstallTimeout] - The timeout option name\n * users can increase the timeout.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n * packages installation.\n * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard\n * instead of the device memory.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n * permissions requested in the application's manifest automatically after the installation\n * is completed under Android 6+.\n * @property {boolean} partialInstall [false] - Install apks partially. It is used for 'install-multiple'.\n * https://android.stackexchange.com/questions/111064/what-is-a-partial-application-install-via-adb\n */\n\n/**\n * Installs the given apks into the device under test\n *\n * @param {Array<string>} apkPathsToInstall - The full paths to install apks\n * @param {?installMultipleApksOptions} options - Installation options\n */\napksUtilsMethods.installMultipleApks = async function installMultipleApks (apkPathsToInstall, options = {}) {\n  const installArgs = buildInstallArgs(await this.getApiLevel(), options);\n  return await this.adbExec(['install-multiple', ...installArgs, ...apkPathsToInstall], {\n    timeout: options.timeout,\n    timeoutCapName: options.timeoutCapName,\n  });\n};\n\n/**\n * @typedef {Object} InstallApksOptions\n * @property {?number|string} timeout [120000] - The number of milliseconds to wait until\n * the installation is completed\n * @property {string} timeoutCapName [androidInstallTimeout] - The timeout option name\n * users can increase the timeout.\n * @property {boolean} allowTestPackages [false] - Set to true in order to allow test\n * packages installation.\n * @property {boolean} grantPermissions [false] - Set to true in order to grant all the\n * permissions requested in the application's manifest automatically after the installation\n * is completed under Android 6+.\n */\n\n/**\n * Installs the given .apks package into the device under test\n *\n * @param {string} apks - The full path to the .apks file\n * @param {?InstallApksOptions} options - Installation options\n * @throws {Error} If the .apks bundle cannot be installed\n */\napksUtilsMethods.installApks = async function installApks (apks, options = {}) {\n  const {\n    grantPermissions,\n    allowTestPackages,\n    timeout,\n  } = options;\n\n  const args = [\n    'install-apks',\n    '--adb', this.executable.path,\n    '--apks', apks,\n    '--timeout-millis', timeout || APKS_INSTALL_TIMEOUT,\n    '--device-id', this.curDeviceId,\n  ];\n  if (allowTestPackages) {\n    args.push('--allow-test-only');\n  }\n  const tasks = [\n    this.execBundletool(args, `Cannot install '${path.basename(apks)}' to the device ${this.curDeviceId}`)\n  ];\n  if (grantPermissions) {\n    tasks.push(this.getApkInfo(apks));\n  }\n  const [, apkInfo] = await B.all(tasks);\n  if (grantPermissions && apkInfo) {\n    // TODO: Simplify it after https://github.com/google/bundletool/issues/246 is implemented\n    await this.grantAllPermissions(apkInfo.name);\n  }\n};\n\n/**\n * Extracts and returns the full path to the master .apk file inside the bundle.\n *\n * @param {string} apks - The full path to the .apks file\n * @returns {string} The full path to the master bundle .apk\n * @throws {Error} If there was an error while extracting/finding the file\n */\napksUtilsMethods.extractBaseApk = async function extractBaseApk (apks) {\n  return await extractFromApks(apks, ['splits', BASE_APK]);\n};\n\n/**\n * Extracts and returns the full path to the .apk, which contains the corresponding\n * resources for the given language in the .apks bundle.\n *\n * @param {string} apks - The full path to the .apks file\n * @param {?string} language - The language abbreviation. The default language is\n * going to be selected if it is not set.\n * @returns {string} The full path to the corresponding language .apk or the master .apk\n * if language split is not enabled for the bundle.\n * @throws {Error} If there was an error while extracting/finding the file\n */\napksUtilsMethods.extractLanguageApk = async function extractLanguageApk (apks, language = null) {\n  if (language) {\n    try {\n      return await extractFromApks(apks, ['splits', LANGUAGE_APK(language)]);\n    } catch (e) {\n      log.debug(e.message);\n      log.info(`Assuming that splitting by language is not enabled for the '${apks}' bundle ` +\n        `and returning the main apk instead`);\n      return await this.extractBaseApk(apks);\n    }\n  }\n\n  const defaultLanguages = ['en', 'en_us'];\n  for (const lang of defaultLanguages) {\n    try {\n      return await extractFromApks(apks, ['splits', LANGUAGE_APK(lang)]);\n    } catch (ign) {}\n  }\n\n  log.info(`Cannot find any split apk for the default languages ${JSON.stringify(defaultLanguages)}. ` +\n    `Returning the main apk instead.`);\n  return await this.extractBaseApk(apks);\n};\n\napksUtilsMethods.isTestPackageOnlyError = function isTestPackageOnlyError (output) {\n  return /\\[INSTALL_FAILED_TEST_ONLY\\]/.test(output);\n};\n\nexport default apksUtilsMethods;\n"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AAEA,MAAMA,QAAQ,GAAG,iBAAjB;;AACA,MAAMC,YAAY,GAAIC,IAAD,IAAW,QAAOA,IAAK,MAA5C;;AACA,MAAMC,UAAU,GAAG,IAAIC,iBAAJ,CAAQ;EACzBC,GAAG,EAAE,EADoB;EAEzBC,OAAO,EAAE,CAACC,QAAD,EAAWC,kBAAX,KAAkCC,WAAA,CAAGC,MAAH,CAAUF,kBAAV;AAFlB,CAAR,CAAnB;AAIA,MAAMG,gBAAgB,GAAG,IAAIC,kBAAJ,EAAzB;AACA,MAAMC,qBAAqB,GAAG,IAAI,EAAJ,GAAS,IAAvC;AAEA,MAAMC,gBAAgB,GAAG,EAAzB;AAEAC,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmB,MAAM;EACvB,IAAI,CAACb,UAAU,CAACc,IAAhB,EAAsB;IACpB;EACD;;EAED,MAAMC,KAAK,GAAG,CAAC,GAAGf,UAAU,CAACgB,MAAX,EAAJ,CAAd;;EACAC,eAAA,CAAIC,KAAJ,CAAW,yBAAwBH,KAAK,CAACI,MAAO,gBAAtC,GACRC,aAAA,CAAKC,SAAL,CAAe,SAAf,EAA0BN,KAAK,CAACI,MAAhC,CADF;;EAEA,KAAK,MAAMG,OAAX,IAAsBP,KAAtB,EAA6B;IAC3B,IAAI;MAEFT,WAAA,CAAGiB,UAAH,CAAcD,OAAd;IACD,CAHD,CAGE,OAAOE,CAAP,EAAU;MACVP,eAAA,CAAIQ,IAAJ,CAASD,CAAC,CAACE,OAAX;IACD;EACF;AACF,CAhBD;;AA+BA,eAAeC,eAAf,CAAgCC,IAAhC,EAAsCC,OAAtC,EAA+C;EAC7C,IAAI,CAACC,eAAA,CAAEC,OAAF,CAAUF,OAAV,CAAL,EAAyB;IACvBA,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EAED,OAAO,MAAMrB,gBAAgB,CAACwB,OAAjB,CAAyBJ,IAAzB,EAA+B,YAAY;IAItD,MAAMxB,QAAQ,GAAG,MAAME,WAAA,CAAG2B,IAAH,CAAQL,IAAR,CAAvB;;IACAX,eAAA,CAAIC,KAAJ,CAAW,eAAcU,IAAK,WAAUxB,QAAS,EAAjD;;IAEA,IAAIJ,UAAU,CAACkC,GAAX,CAAe9B,QAAf,CAAJ,EAA8B;MAC5B,MAAM+B,UAAU,GAAGC,aAAA,CAAKC,OAAL,CAAarC,UAAU,CAACsC,GAAX,CAAelC,QAAf,CAAb,EAAuC,GAAGyB,OAA1C,CAAnB;;MACA,IAAI,MAAMvB,WAAA,CAAGiC,MAAH,CAAUJ,UAAV,CAAV,EAAiC;QAC/B,OAAOA,UAAP;MACD;;MACDnC,UAAU,CAACwC,GAAX,CAAepC,QAAf;IACD;;IAED,MAAMqC,OAAO,GAAG,MAAMC,gBAAA,CAAQC,OAAR,EAAtB;;IACA1B,eAAA,CAAIC,KAAJ,CAAW,oCAAmCU,IAAK,SAAQa,OAAQ,GAAnE;;IACA,MAAM,IAAAG,kBAAA,EAAUhB,IAAV,EAAgBa,OAAhB,CAAN;;IACA,MAAMN,UAAU,GAAGC,aAAA,CAAKC,OAAL,CAAaI,OAAb,EAAsB,GAAGZ,OAAzB,CAAnB;;IACA,IAAI,EAAC,MAAMvB,WAAA,CAAGiC,MAAH,CAAUJ,UAAV,CAAP,CAAJ,EAAkC;MAChC,MAAM,IAAIU,KAAJ,CAAW,GAAEhB,OAAO,CAACiB,IAAR,CAAaV,aAAA,CAAKW,GAAlB,CAAuB,wBAAuBnB,IAAK,YAAtD,GACb,sDADG,CAAN;IAED;;IACD5B,UAAU,CAACgD,GAAX,CAAe5C,QAAf,EAAyBqC,OAAzB;IACA,OAAON,UAAP;EACD,CAzBY,CAAb;AA0BD;;AAWDxB,gBAAgB,CAACsC,cAAjB,GAAkC,eAAeA,cAAf,CAA+BC,IAA/B,EAAqCC,QAArC,EAA+C;EAC/E,MAAM,KAAKC,cAAL,EAAN;EACAF,IAAI,GAAG,CACL,MADK,EACG,KAAKG,QAAL,CAAcC,UADjB,EAEL,GAAGJ,IAFE,CAAP;EAIA,MAAMK,GAAG,GAAG3C,OAAO,CAAC2C,GAApB;;EACA,IAAI,KAAKC,OAAT,EAAkB;IAChBD,GAAG,CAACE,uBAAJ,GAA+B,GAAE,KAAKD,OAAQ,EAA9C;EACD;;EACD,IAAI,KAAKE,OAAT,EAAkB;IAChBH,GAAG,CAACI,uBAAJ,GAA8B,KAAKD,OAAnC;EACD;;EACDzC,eAAA,CAAIC,KAAJ,CAAW,wCAAuC0C,IAAI,CAACC,SAAL,CAAeX,IAAf,CAAqB,EAAvE;;EACA,IAAIY,MAAJ;;EACA,IAAI;IACF,CAAC;MAACA;IAAD,IAAW,MAAM,IAAAC,kBAAA,EAAK,MAAM,IAAAC,qBAAA,GAAX,EAA2Bd,IAA3B,EAAiC;MACjDK,GADiD;MAEjDU,OAAO,EAAEvD;IAFwC,CAAjC,CAAlB;;IAIAO,eAAA,CAAIC,KAAJ,CAAW,mBAAkBY,eAAA,CAAEoC,QAAF,CAAWJ,MAAX,EAAmB;MAAC3C,MAAM,EAAE;IAAT,CAAnB,CAAkC,EAA/D;;IACA,OAAO2C,MAAP;EACD,CAPD,CAOE,OAAOtC,CAAP,EAAU;IACV,IAAIA,CAAC,CAACsC,MAAN,EAAc;MACZ7C,eAAA,CAAIC,KAAJ,CAAW,mBAAkBM,CAAC,CAACsC,MAAO,EAAtC;IACD;;IACD,IAAItC,CAAC,CAAC2C,MAAN,EAAc;MACZlD,eAAA,CAAIC,KAAJ,CAAW,mBAAkBM,CAAC,CAAC2C,MAAO,EAAtC;IACD;;IACD,MAAM,IAAItB,KAAJ,CAAW,GAAEM,QAAS,qBAAoB3B,CAAC,CAACE,OAAQ,EAApD,CAAN;EACD;AACF,CA/BD;;AAsCAf,gBAAgB,CAACyD,aAAjB,GAAiC,eAAeA,aAAf,CAA8BC,YAA9B,EAA4C;EAC3E,MAAMnB,IAAI,GAAG,CACX,iBADW,EAEX,OAFW,EAEF,KAAKoB,UAAL,CAAgBlC,IAFd,EAGX,aAHW,EAGI,KAAKmC,WAHT,EAIX,UAJW,EAICF,YAJD,CAAb;;EAMApD,eAAA,CAAIC,KAAJ,CAAW,oCAAmC,KAAKqD,WAAY,GAA/D;;EACA,MAAM,KAAKtB,cAAL,CAAoBC,IAApB,EAA0B,iCAA1B,CAAN;EACA,OAAOmB,YAAP;AACD,CAVD;;AAmCA1D,gBAAgB,CAAC6D,mBAAjB,GAAuC,eAAeA,mBAAf,CAAoCC,iBAApC,EAAuDC,OAAO,GAAG,EAAjE,EAAqE;EAC1G,MAAMC,WAAW,GAAG,IAAAC,yBAAA,EAAiB,MAAM,KAAKC,WAAL,EAAvB,EAA2CH,OAA3C,CAApB;EACA,OAAO,MAAM,KAAKI,OAAL,CAAa,CAAC,kBAAD,EAAqB,GAAGH,WAAxB,EAAqC,GAAGF,iBAAxC,CAAb,EAAyE;IACpFR,OAAO,EAAES,OAAO,CAACT,OADmE;IAEpFc,cAAc,EAAEL,OAAO,CAACK;EAF4D,CAAzE,CAAb;AAID,CAND;;AA4BApE,gBAAgB,CAACqE,WAAjB,GAA+B,eAAeA,WAAf,CAA4BpD,IAA5B,EAAkC8C,OAAO,GAAG,EAA5C,EAAgD;EAC7E,MAAM;IACJO,gBADI;IAEJC,iBAFI;IAGJjB;EAHI,IAIFS,OAJJ;EAMA,MAAMxB,IAAI,GAAG,CACX,cADW,EAEX,OAFW,EAEF,KAAKoB,UAAL,CAAgBlC,IAFd,EAGX,QAHW,EAGDR,IAHC,EAIX,kBAJW,EAISqC,OAAO,IAAIkB,6BAJpB,EAKX,aALW,EAKI,KAAKZ,WALT,CAAb;;EAOA,IAAIW,iBAAJ,EAAuB;IACrBhC,IAAI,CAACkC,IAAL,CAAU,mBAAV;EACD;;EACD,MAAMC,KAAK,GAAG,CACZ,KAAKpC,cAAL,CAAoBC,IAApB,EAA2B,mBAAkBd,aAAA,CAAKkD,QAAL,CAAc1D,IAAd,CAAoB,mBAAkB,KAAK2C,WAAY,EAApG,CADY,CAAd;;EAGA,IAAIU,gBAAJ,EAAsB;IACpBI,KAAK,CAACD,IAAN,CAAW,KAAKG,UAAL,CAAgB3D,IAAhB,CAAX;EACD;;EACD,MAAM,GAAG4D,OAAH,IAAc,MAAMC,iBAAA,CAAEC,GAAF,CAAML,KAAN,CAA1B;;EACA,IAAIJ,gBAAgB,IAAIO,OAAxB,EAAiC;IAE/B,MAAM,KAAKG,mBAAL,CAAyBH,OAAO,CAACI,IAAjC,CAAN;EACD;AACF,CA5BD;;AAqCAjF,gBAAgB,CAACkF,cAAjB,GAAkC,eAAeA,cAAf,CAA+BjE,IAA/B,EAAqC;EACrE,OAAO,MAAMD,eAAe,CAACC,IAAD,EAAO,CAAC,QAAD,EAAW/B,QAAX,CAAP,CAA5B;AACD,CAFD;;AAeAc,gBAAgB,CAACmF,kBAAjB,GAAsC,eAAeA,kBAAf,CAAmClE,IAAnC,EAAyCmE,QAAQ,GAAG,IAApD,EAA0D;EAC9F,IAAIA,QAAJ,EAAc;IACZ,IAAI;MACF,OAAO,MAAMpE,eAAe,CAACC,IAAD,EAAO,CAAC,QAAD,EAAW9B,YAAY,CAACiG,QAAD,CAAvB,CAAP,CAA5B;IACD,CAFD,CAEE,OAAOvE,CAAP,EAAU;MACVP,eAAA,CAAIC,KAAJ,CAAUM,CAAC,CAACE,OAAZ;;MACAT,eAAA,CAAI+E,IAAJ,CAAU,+DAA8DpE,IAAK,WAApE,GACN,oCADH;;MAEA,OAAO,MAAM,KAAKiE,cAAL,CAAoBjE,IAApB,CAAb;IACD;EACF;;EAED,MAAMqE,gBAAgB,GAAG,CAAC,IAAD,EAAO,OAAP,CAAzB;;EACA,KAAK,MAAMlG,IAAX,IAAmBkG,gBAAnB,EAAqC;IACnC,IAAI;MACF,OAAO,MAAMtE,eAAe,CAACC,IAAD,EAAO,CAAC,QAAD,EAAW9B,YAAY,CAACC,IAAD,CAAvB,CAAP,CAA5B;IACD,CAFD,CAEE,OAAOmG,GAAP,EAAY,CAAE;EACjB;;EAEDjF,eAAA,CAAI+E,IAAJ,CAAU,uDAAsDpC,IAAI,CAACC,SAAL,CAAeoC,gBAAf,CAAiC,IAAxF,GACN,iCADH;;EAEA,OAAO,MAAM,KAAKJ,cAAL,CAAoBjE,IAApB,CAAb;AACD,CAtBD;;AAwBAjB,gBAAgB,CAACwF,sBAAjB,GAA0C,SAASA,sBAAT,CAAiCC,MAAjC,EAAyC;EACjF,OAAO,+BAA+BC,IAA/B,CAAoCD,MAApC,CAAP;AACD,CAFD;;eAIezF,gB"}