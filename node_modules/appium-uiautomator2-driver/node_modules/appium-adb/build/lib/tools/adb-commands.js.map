{"version":3,"file":"adb-commands.js","names":["MAX_SHELL_BUFFER_LENGTH","NOT_CHANGEABLE_PERM_ERROR","IGNORED_PERM_ERRORS","MAX_PGREP_PATTERN_LEN","HIDDEN_API_POLICY_KEYS","PID_COLUMN_TITLE","PROCESS_NAME_COLUMN_TITLE","PS_TITLE_PATTERN","RegExp","MIN_API_LEVEL_WITH_PERMS_SUPPORT","methods","shellChunks","argTransformer","args","commands","cmdChunk","arg","nextCmd","_","isArray","Error","last","push","join","length","isEmpty","log","debug","JSON","stringify","lastError","cmd","shell","e","getAdbWithCorrectAdbPath","executable","path","getSdkBinaryPath","adb","initAapt","initAapt2","initZipAlign","initBundletool","binaries","bundletool","fs","which","err","getApiLevel","isInteger","_apiLevel","strOutput","getDeviceProperty","apiLevel","parseInt","trim","charCodeQ","charCodeAt","apiLevelDiff","codename","String","fromCharCode","getPlatformVersion","toLowerCase","toUpperCase","isNaN","message","info","isDeviceConnected","devices","getConnectedDevices","mkdir","remotePath","isValidClass","classString","matchComponentName","resolveLaunchableActivity","pkg","opts","preferCmd","stdout","names","parseLaunchableActivityNames","tmpRoot","tempDir","openDir","tmpApp","pullApk","apkActivity","packageAndLaunchActivityFromManifest","stack","warn","rimraf","stderr","outputFormat","EXEC_OUTPUT_FORMAT","FULL","line","split","map","forceStop","killPackage","clear","grantAllPermissions","apk","targetSdk","dumpsysOutput","targetSdkVersionUsingPKG","targetSdkVersionFromManifest","requestedPermissions","getReqPermissions","grantedPermissions","getGrantedPermissions","permissionsToGrant","difference","grantPermissions","permissions","perm","some","pattern","test","grantPermission","permission","revokePermission","cmdOutput","extractMatchingPermissions","getDeniedPermissions","getLocationProviders","getSetting","p","filter","Boolean","toggleGPSLocationProvider","enabled","setSetting","setHiddenApiPolicy","value","ignoreError","k","setDefaultHiddenApiPolicy","stopAndClear","availableIMEs","getIMEListFromOutput","enabledIMEs","enableIME","imeId","disableIME","setIME","defaultIME","engine","keyevent","keycode","code","inputText","text","originalStr","escapedText","replace","adbInputEscapePattern","every","c","includes","q","clearTextField","i","lock","isScreenLocked","timeoutMs","waitForCondition","waitMs","intervalMs","back","goToHome","getAdbPath","getScreenOrientation","getSurfaceOrientation","sendTelnetCommand","command","execEmuConsoleCommand","port","getEmulatorPort","isAirplaneModeOn","setAirplaneMode","on","broadcastAirplaneMode","privileged","ign","isWifiOn","isDataOn","setWifiAndData","wifi","data","isEmulator","util","hasValue","setWifiState","setDataState","isAnimationOn","animator_duration_scale","transition_animation_scale","window_animation_scale","setting","localPath","posix","dirname","adbExec","pull","timeout","processExists","processName","getPIDsByName","getForwardList","connections","EOL","forwardPort","systemPort","devicePort","removePortForward","getReverseList","reversePort","removePortReverse","forwardAbstractPort","ping","indexOf","restart","stopLogcat","restartAdb","waitForDevice","startLogcat","_logcatStartupParams","logcat","Logcat","debugTrace","clearDeviceLogsOnStart","startCapture","stopCapture","getLogcatLogs","getLogs","setLogcatListener","listener","removeLogcatListener","removeListener","listProcessStatus","isBoolean","_doesPsSupportAOption","getNameByPid","pid","titleMatch","exec","allTitles","pidIndex","nameOffset","pidRegex","matchedLine","items","name","_isPgrepAvailable","pgrepOutput","_canPgrepUseFullCmdLineSearch","_isPidofAvailable","shellCommand","escapeRegExp","slice","x","pids","processNameRegex","killProcessesByName","B","all","killProcessByPID","noProcessFlag","e1","broadcastProcessEnd","intent","broadcast","start","Date","now","sleep","endAndroidCoverage","instrumentProc","isRunning","stop","instrument","activity","instrumentWith","pkgActivity","androidCoverage","instrumentClass","waitPkg","waitActivity","resolve","reject","defaultArgs","concat","SubProcess","waitForActivity","property","val","setDeviceProperty","prop","getDeviceSysLanguage","getDeviceSysCountry","getDeviceSysLocale","getDeviceProductLanguage","getDeviceProductCountry","getDeviceProductLocale","getModel","getManufacturer","getScreenSize","size","getScreenDensity","density","densityNumber","setHttpProxy","proxyHost","proxyPort","proxy","isUndefined","httpProxySettins","settingKey","settingValue","deleteHttpProxy","namespace","bugreport","screenrecord","destination","options","videoSize","bitRate","timeLimit","bugReport","fullCmd","quote","runInImeContext","ime","fn","originalIme","delay","getTimeZone","listFeatures","_memoizedFeatures","memoize","curDeviceId","isStreamedInstallSupported","proto","Object","getPrototypeOf","_helpOutput","isIncrementalInstallSupported","binary","getVersion","compareVersions","version","getDeviceIdleWhitelist","output","addToDeviceIdleWhitelist","packages","pluralize"],"sources":["../../../lib/tools/adb-commands.js"],"sourcesContent":["import log from '../logger.js';\nimport {\n  getIMEListFromOutput, getSurfaceOrientation, extractMatchingPermissions,\n  parseLaunchableActivityNames, matchComponentName,\n} from '../helpers.js';\nimport path from 'path';\nimport _ from 'lodash';\nimport { fs, util, tempDir } from '@appium/support';\nimport { EOL } from 'os';\nimport Logcat from '../logcat';\nimport { sleep, waitForCondition } from 'asyncbox';\nimport { SubProcess } from 'teen_process';\nimport B from 'bluebird';\n\nconst MAX_SHELL_BUFFER_LENGTH = 1000;\nconst NOT_CHANGEABLE_PERM_ERROR = /not a changeable permission type/i;\nconst IGNORED_PERM_ERRORS = [\n  NOT_CHANGEABLE_PERM_ERROR,\n  /Unknown permission/i,\n];\nconst MAX_PGREP_PATTERN_LEN = 15;\nconst HIDDEN_API_POLICY_KEYS = [\n  'hidden_api_policy_pre_p_apps',\n  'hidden_api_policy_p_apps',\n  'hidden_api_policy'\n];\nconst PID_COLUMN_TITLE = 'PID';\nconst PROCESS_NAME_COLUMN_TITLE = 'NAME';\nconst PS_TITLE_PATTERN = new RegExp(`^(.*\\\\b${PID_COLUMN_TITLE}\\\\b.*\\\\b${PROCESS_NAME_COLUMN_TITLE}\\\\b.*)$`, 'm');\nconst MIN_API_LEVEL_WITH_PERMS_SUPPORT = 23;\n\nconst methods = {};\n\n/**\n * Creates chunks for the given arguments and executes them in `adb shell`.\n * This is faster than calling `adb shell` separately for each arg, however\n * there is a limit for a maximum length of a single adb command. that is why\n * we need all this complicated logic.\n *\n * @param {Function} argTransformer A function, that receives single argument\n * from the `args` array and transforms it into a shell command. The result\n * of the function must be an array, where each item is a part of a single command.\n * The last item of the array could be ';'. If this is not a semicolon then it is going to\n * be added automatically.\n * @param {Array<number|string>} args Array of argument values to create chunks for\n * @throws {Error} If any of the chunks returns non-zero exit code after being executed\n */\nmethods.shellChunks = async function shellChunks (argTransformer, args) {\n  const commands = [];\n  let cmdChunk = [];\n  for (const arg of args) {\n    const nextCmd = argTransformer(arg);\n    if (!_.isArray(nextCmd)) {\n      throw new Error('Argument transformer must result in an array');\n    }\n    if (_.last(nextCmd) !== ';') {\n      nextCmd.push(';');\n    }\n    if (nextCmd.join(' ').length + cmdChunk.join(' ').length >= MAX_SHELL_BUFFER_LENGTH) {\n      commands.push(cmdChunk);\n      cmdChunk = [];\n    }\n    cmdChunk = [...cmdChunk, ...nextCmd];\n  }\n  if (!_.isEmpty(cmdChunk)) {\n    commands.push(cmdChunk);\n  }\n  log.debug(`Got the following command chunks to execute: ${JSON.stringify(commands)}`);\n  let lastError = null;\n  for (const cmd of commands) {\n    try {\n      await this.shell(cmd);\n    } catch (e) {\n      lastError = e;\n    }\n  }\n  if (lastError) {\n    throw lastError;\n  }\n};\n\n/**\n * Get the path to adb executable amd assign it\n * to this.executable.path and this.binaries.adb properties.\n *\n * @return {ADB} ADB instance.\n */\nmethods.getAdbWithCorrectAdbPath = async function getAdbWithCorrectAdbPath () {\n  this.executable.path = await this.getSdkBinaryPath('adb');\n  return this.adb;\n};\n\n/**\n * Get the full path to aapt tool and assign it to\n * this.binaries.aapt property\n */\nmethods.initAapt = async function initAapt () {\n  await this.getSdkBinaryPath('aapt');\n};\n\n/**\n * Get the full path to aapt2 tool and assign it to\n * this.binaries.aapt2 property\n */\nmethods.initAapt2 = async function initAapt2 () {\n  await this.getSdkBinaryPath('aapt2');\n};\n\n/**\n * Get the full path to zipalign tool and assign it to\n * this.binaries.zipalign property\n */\nmethods.initZipAlign = async function initZipAlign () {\n  await this.getSdkBinaryPath('zipalign');\n};\n\n/**\n * Get the full path to bundletool binary and assign it to\n * this.binaries.bundletool property\n */\nmethods.initBundletool = async function initBundletool () {\n  try {\n    this.binaries.bundletool = await fs.which('bundletool.jar');\n  } catch (err) {\n    throw new Error('bundletool.jar binary is expected to be present in PATH. ' +\n      'Visit https://github.com/google/bundletool for more details.');\n  }\n};\n\n/**\n * Retrieve the API level of the device under test.\n *\n * @return {number} The API level as integer number, for example 21 for\n *                  Android Lollipop. The result of this method is cached, so all the further\n * calls return the same value as the first one.\n */\nmethods.getApiLevel = async function getApiLevel () {\n  if (!_.isInteger(this._apiLevel)) {\n    try {\n      const strOutput = await this.getDeviceProperty('ro.build.version.sdk');\n      let apiLevel = parseInt(strOutput.trim(), 10);\n\n      // Workaround for preview/beta platform API level\n      const charCodeQ = 'q'.charCodeAt(0);\n      // 28 is the first API Level, where Android SDK started returning letters in response to getPlatformVersion\n      const apiLevelDiff = apiLevel - 28;\n      const codename = String.fromCharCode(charCodeQ + apiLevelDiff);\n      if (apiLevelDiff >= 0 && (await this.getPlatformVersion()).toLowerCase() === codename) {\n        log.debug(`Release version is ${codename.toUpperCase()} but found API Level ${apiLevel}. Setting API Level to ${apiLevel + 1}`);\n        apiLevel++;\n      }\n\n      this._apiLevel = apiLevel;\n      log.debug(`Device API level: ${this._apiLevel}`);\n      if (isNaN(this._apiLevel)) {\n        throw new Error(`The actual output '${strOutput}' cannot be converted to an integer`);\n      }\n    } catch (e) {\n      throw new Error(`Error getting device API level. Original error: ${e.message}`);\n    }\n  }\n  return this._apiLevel;\n};\n\n/**\n * Retrieve the platform version of the device under test.\n *\n * @return {string} The platform version as a string, for example '5.0' for\n * Android Lollipop.\n */\nmethods.getPlatformVersion = async function getPlatformVersion () {\n  log.info('Getting device platform version');\n  try {\n    return await this.getDeviceProperty('ro.build.version.release');\n  } catch (e) {\n    throw new Error(`Error getting device platform version. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Verify whether a device is connected.\n *\n * @return {boolean} True if at least one device is visible to adb.\n */\nmethods.isDeviceConnected = async function isDeviceConnected () {\n  let devices = await this.getConnectedDevices();\n  return devices.length > 0;\n};\n\n/**\n * Recursively create a new folder on the device under test.\n *\n * @param {string} remotePath - The new path to be created.\n * @return {string} mkdir command output.\n */\nmethods.mkdir = async function mkdir (remotePath) {\n  return await this.shell(['mkdir', '-p', remotePath]);\n};\n\n/**\n * Verify whether the given argument is a\n * valid class name.\n *\n * @param {string} classString - The actual class name to be verified.\n * @return {?Array.<Match>} The result of Regexp.exec operation\n *                          or _null_ if no matches are found.\n */\nmethods.isValidClass = function isValidClass (classString) {\n  // some.package/some.package.Activity\n  return matchComponentName(classString);\n};\n\n/**\n * @typedef {Object} ResolveActivityOptions\n * @property {boolean?} preferCmd [true] Whether to prefer `cmd` tool usage for\n * launchable activity name detection. It might be useful to disable it if\n * `cmd package resolve-activity` returns 'android/com.android.internal.app.ResolverActivity',\n * which means the app has no default handler set in system settings.\n * See https://github.com/appium/appium/issues/17128 for more details.\n * This option has no effect if the target Android version is below 24 as there\n * the corresponding `cmd` subcommand is not implemented and dumpsys usage is the only\n * possible way to detect the launchable activity name.\n */\n\n/**\n * Fetches the fully qualified name of the launchable activity for the\n * given package. It is expected the package is already installed on\n * the device under test.\n *\n * @param {string} pkg - The target package identifier\n * @param {ResolveActivityOptions?} opts\n * @return {string} Fully qualified name of the launchable activity\n * @throws {Error} If there was an error while resolving the activity name\n */\nmethods.resolveLaunchableActivity = async function resolveLaunchableActivity (pkg, opts = {}) {\n  const { preferCmd = true } = opts;\n  if (!preferCmd || await this.getApiLevel() < 24) {\n    const stdout = await this.shell(['dumpsys', 'package', pkg]);\n    const names = parseLaunchableActivityNames(stdout);\n    if (_.isEmpty(names)) {\n      log.debug(stdout);\n      throw new Error(`Unable to resolve the launchable activity of '${pkg}'. Is it installed on the device?`);\n    }\n    if (names.length === 1) {\n      return names[0];\n    }\n\n    const tmpRoot = await tempDir.openDir();\n    try {\n      const tmpApp = await this.pullApk(pkg, tmpRoot);\n      const {apkActivity} = await this.packageAndLaunchActivityFromManifest(tmpApp);\n      return apkActivity;\n    } catch (e) {\n      log.debug(e.stack);\n      log.warn(`Unable to resolve the launchable activity of '${pkg}'. ` +\n        `The very first match of the dumpsys output is going to be used. ` +\n        `Original error: ${e.message}`);\n      return names[0];\n    } finally {\n      await fs.rimraf(tmpRoot);\n    }\n  }\n  const {stdout, stderr} = await this.shell(['cmd', 'package', 'resolve-activity', '--brief', pkg], {\n    outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n  });\n  for (const line of (stdout || '').split('\\n').map(_.trim)) {\n    if (this.isValidClass(line)) {\n      return line;\n    }\n  }\n  throw new Error(`Unable to resolve the launchable activity of '${pkg}'. Original error: ${stderr || stdout}`);\n};\n\n/**\n * Force application to stop on the device under test.\n *\n * @param {string} pkg - The package name to be stopped.\n * @return {string} The output of the corresponding adb command.\n */\nmethods.forceStop = async function forceStop (pkg) {\n  return await this.shell(['am', 'force-stop', pkg]);\n};\n\n/*\n * Kill application\n *\n * @param {string} pkg - The package name to be stopped.\n * @return {string} The output of the corresponding adb command.\n */\nmethods.killPackage = async function killPackage (pkg) {\n  return await this.shell(['am', 'kill', pkg]);\n};\n\n/**\n * Clear the user data of the particular application on the device\n * under test.\n *\n * @param {string} pkg - The package name to be cleared.\n * @return {string} The output of the corresponding adb command.\n */\nmethods.clear = async function clear (pkg) {\n  return await this.shell(['pm', 'clear', pkg]);\n};\n\n/**\n * Grant all permissions requested by the particular package.\n * This method is only useful on Android 6.0+ and for applications\n * that support components-based permissions setting.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} apk - The path to the actual apk file.\n * @throws {Error} If there was an error while granting permissions\n */\nmethods.grantAllPermissions = async function grantAllPermissions (pkg, apk) {\n  const apiLevel = await this.getApiLevel();\n  let targetSdk = 0;\n  let dumpsysOutput = null;\n  try {\n    if (!apk) {\n      /**\n       * If apk not provided, considering apk already installed on the device\n       * and fetching targetSdk using package name.\n       */\n      dumpsysOutput = await this.shell(['dumpsys', 'package', pkg]);\n      targetSdk = await this.targetSdkVersionUsingPKG(pkg, dumpsysOutput);\n    } else {\n      targetSdk = await this.targetSdkVersionFromManifest(apk);\n    }\n  } catch (e) {\n    //avoiding logging error stack, as calling library function would have logged\n    log.warn(`Ran into problem getting target SDK version; ignoring...`);\n  }\n  if (apiLevel >= MIN_API_LEVEL_WITH_PERMS_SUPPORT && targetSdk >= MIN_API_LEVEL_WITH_PERMS_SUPPORT) {\n    /**\n     * If the device is running Android 6.0(API 23) or higher, and your app's target SDK is 23 or higher:\n     * The app has to list the permissions in the manifest.\n     * refer: https://developer.android.com/training/permissions/requesting.html\n     */\n    dumpsysOutput = dumpsysOutput || await this.shell(['dumpsys', 'package', pkg]);\n    const requestedPermissions = await this.getReqPermissions(pkg, dumpsysOutput);\n    const grantedPermissions = await this.getGrantedPermissions(pkg, dumpsysOutput);\n    const permissionsToGrant = _.difference(requestedPermissions, grantedPermissions);\n    if (_.isEmpty(permissionsToGrant)) {\n      log.info(`${pkg} contains no permissions available for granting`);\n    } else {\n      await this.grantPermissions(pkg, permissionsToGrant);\n    }\n  } else if (targetSdk < MIN_API_LEVEL_WITH_PERMS_SUPPORT) {\n    log.info(`It is only possible to grant permissions in runtime for ` +\n      `apps whose targetSdkVersion in the manifest is set to ${MIN_API_LEVEL_WITH_PERMS_SUPPORT} or above. ` +\n      `The current ${pkg} targetSdkVersion is ${targetSdk || 'unset'}.`);\n  } else if (apiLevel < MIN_API_LEVEL_WITH_PERMS_SUPPORT) {\n    log.info(`The device's OS API level is ${apiLevel}. ` +\n      `It is only possible to grant permissions on devices running Android 6 or above.`);\n  }\n};\n\n/**\n * Grant multiple permissions for the particular package.\n * This call is more performant than `grantPermission` one, since it combines\n * multiple `adb shell` calls into a single command.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {Array<string>} permissions - The list of permissions to be granted.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.grantPermissions = async function grantPermissions (pkg, permissions) {\n  // As it consumes more time for granting each permission,\n  // trying to grant all permission by forming equivalent command.\n  // Also, it is necessary to split long commands into chunks, since the maximum length of\n  // adb shell buffer is limited\n  log.debug(`Granting permissions ${JSON.stringify(permissions)} to '${pkg}'`);\n  try {\n    await this.shellChunks((perm) => ['pm', 'grant', pkg, perm], permissions);\n  } catch (e) {\n    if (!IGNORED_PERM_ERRORS.some((pattern) => pattern.test(e.stderr || e.message))) {\n      throw e;\n    }\n  }\n};\n\n/**\n * Grant single permission for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} permission - The full name of the permission to be granted.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.grantPermission = async function grantPermission (pkg, permission) {\n  try {\n    await this.shell(['pm', 'grant', pkg, permission]);\n  } catch (e) {\n    if (!NOT_CHANGEABLE_PERM_ERROR.test(e.stderr || e.message)) {\n      throw e;\n    }\n  }\n};\n\n/**\n * Revoke single permission from the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} permission - The full name of the permission to be revoked.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.revokePermission = async function revokePermission (pkg, permission) {\n  try {\n    await this.shell(['pm', 'revoke', pkg, permission]);\n  } catch (e) {\n    if (!NOT_CHANGEABLE_PERM_ERROR.test(e.stderr || e.message)) {\n      throw e;\n    }\n  }\n};\n\n/**\n * Retrieve the list of granted permissions for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} cmdOutput [null] - Optional parameter containing command output of\n *                                    _dumpsys package_ command. It may speed up the method execution.\n * @return {Array<String>} The list of granted permissions or an empty list.\n * @throws {Error} If there was an error while changing permissions.\n */\nmethods.getGrantedPermissions = async function getGrantedPermissions (pkg, cmdOutput = null) {\n  log.debug('Retrieving granted permissions');\n  const stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  return extractMatchingPermissions(stdout, ['install', 'runtime'], true);\n};\n\n/**\n * Retrieve the list of denied permissions for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} cmdOutput [null] - Optional parameter containing command output of\n *                                    _dumpsys package_ command. It may speed up the method execution.\n * @return {Array<String>} The list of denied permissions or an empty list.\n */\nmethods.getDeniedPermissions = async function getDeniedPermissions (pkg, cmdOutput = null) {\n  log.debug('Retrieving denied permissions');\n  const stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  return extractMatchingPermissions(stdout, ['install', 'runtime'], false);\n};\n\n/**\n * Retrieve the list of requested permissions for the particular package.\n *\n * @param {string} pkg - The package name to be processed.\n * @param {string} cmdOutput [null] - Optional parameter containing command output of\n *                                    _dumpsys package_ command. It may speed up the method execution.\n * @return {Array<String>} The list of requested permissions or an empty list.\n */\nmethods.getReqPermissions = async function getReqPermissions (pkg, cmdOutput = null) {\n  log.debug('Retrieving requested permissions');\n  const stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  return extractMatchingPermissions(stdout, ['requested']);\n};\n\n/**\n * Retrieve the list of location providers for the device under test.\n *\n * @return {Array.<String>} The list of available location providers or an empty list.\n */\nmethods.getLocationProviders = async function getLocationProviders () {\n  let stdout = await this.getSetting('secure', 'location_providers_allowed');\n  return stdout.trim().split(',')\n    .map((p) => p.trim())\n    .filter(Boolean);\n};\n\n/**\n * Toggle the state of GPS location provider.\n *\n * @param {boolean} enabled - Whether to enable (true) or disable (false) the GPS provider.\n */\nmethods.toggleGPSLocationProvider = async function toggleGPSLocationProvider (enabled) {\n  await this.setSetting('secure', 'location_providers_allowed', `${enabled ? '+' : '-'}gps`);\n};\n\n/**\n * Set hidden api policy to manage access to non-SDK APIs.\n * https://developer.android.com/preview/restrictions-non-sdk-interfaces\n *\n * @param {number|string} value - The API enforcement policy.\n *     For Android P\n *     0: Disable non-SDK API usage detection. This will also disable logging, and also break the strict mode API,\n *        detectNonSdkApiUsage(). Not recommended.\n *     1: \"Just warn\" - permit access to all non-SDK APIs, but keep warnings in the log.\n *        The strict mode API will keep working.\n *     2: Disallow usage of dark grey and black listed APIs.\n *     3: Disallow usage of blacklisted APIs, but allow usage of dark grey listed APIs.\n *\n *     For Android Q\n *     https://developer.android.com/preview/non-sdk-q#enable-non-sdk-access\n *     0: Disable all detection of non-SDK interfaces. Using this setting disables all log messages for non-SDK interface usage\n *        and prevents you from testing your app using the StrictMode API. This setting is not recommended.\n *     1: Enable access to all non-SDK interfaces, but print log messages with warnings for any non-SDK interface usage.\n *        Using this setting also allows you to test your app using the StrictMode API.\n *     2: Disallow usage of non-SDK interfaces that belong to either the black list\n *        or to a restricted greylist for your target API level.\n *\n * @param {boolean} ignoreError [false] Whether to ignore an exception in 'adb shell settings put global' command\n * @throws {error} If there was an error and ignoreError was true while executing 'adb shell settings put global'\n *                 command on the device under test.\n */\nmethods.setHiddenApiPolicy = async function setHiddenApiPolicy (value, ignoreError = false) {\n  try {\n    await this.shell(HIDDEN_API_POLICY_KEYS.map((k) => `settings put global ${k} ${value}`).join(';'));\n  } catch (e) {\n    if (!ignoreError) {\n      throw e;\n    }\n    log.info(`Failed to set setting keys '${HIDDEN_API_POLICY_KEYS}' to '${value}'. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Reset access to non-SDK APIs to its default setting.\n * https://developer.android.com/preview/restrictions-non-sdk-interfaces\n *\n * @param {boolean} ignoreError [false] Whether to ignore an exception in 'adb shell settings delete global' command\n * @throws {error} If there was an error and ignoreError was true while executing 'adb shell settings delete global'\n *                 command on the device under test.\n */\nmethods.setDefaultHiddenApiPolicy = async function setDefaultHiddenApiPolicy (ignoreError = false) {\n  try {\n    await this.shell(HIDDEN_API_POLICY_KEYS.map((k) => `settings delete global ${k}`).join(';'));\n  } catch (e) {\n    if (!ignoreError) {\n      throw e;\n    }\n    log.info(`Failed to delete keys '${HIDDEN_API_POLICY_KEYS}'. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Stop the particular package if it is running and clears its application data.\n *\n * @param {string} pkg - The package name to be processed.\n */\nmethods.stopAndClear = async function stopAndClear (pkg) {\n  try {\n    await this.forceStop(pkg);\n    await this.clear(pkg);\n  } catch (e) {\n    throw new Error(`Cannot stop and clear ${pkg}. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Retrieve the list of available input methods (IMEs) for the device under test.\n *\n * @return {Array.<String>} The list of IME names or an empty list.\n */\nmethods.availableIMEs = async function availableIMEs () {\n  try {\n    return getIMEListFromOutput(await this.shell(['ime', 'list', '-a']));\n  } catch (e) {\n    throw new Error(`Error getting available IME's. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Retrieve the list of enabled input methods (IMEs) for the device under test.\n *\n * @return {Array.<String>} The list of enabled IME names or an empty list.\n */\nmethods.enabledIMEs = async function enabledIMEs () {\n  try {\n    return getIMEListFromOutput(await this.shell(['ime', 'list']));\n  } catch (e) {\n    throw new Error(`Error getting enabled IME's. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Enable the particular input method on the device under test.\n *\n * @param {string} imeId - One of existing IME ids.\n */\nmethods.enableIME = async function enableIME (imeId) {\n  await this.shell(['ime', 'enable', imeId]);\n};\n\n/**\n * Disable the particular input method on the device under test.\n *\n * @param {string} imeId - One of existing IME ids.\n */\nmethods.disableIME = async function disableIME (imeId) {\n  await this.shell(['ime', 'disable', imeId]);\n};\n\n/**\n * Set the particular input method on the device under test.\n *\n * @param {string} imeId - One of existing IME ids.\n */\nmethods.setIME = async function setIME (imeId) {\n  await this.shell(['ime', 'set', imeId]);\n};\n\n/**\n * Get the default input method on the device under test.\n *\n * @return {?string} The name of the default input method\n */\nmethods.defaultIME = async function defaultIME () {\n  try {\n    let engine = await this.getSetting('secure', 'default_input_method');\n    if (engine === 'null') {\n      return null;\n    }\n    return engine.trim();\n  } catch (e) {\n    throw new Error(`Error getting default IME. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Send the particular keycode to the device under test.\n *\n * @param {string|number} keycode - The actual key code to be sent.\n */\nmethods.keyevent = async function keyevent (keycode) {\n  // keycode must be an int.\n  let code = parseInt(keycode, 10);\n  await this.shell(['input', 'keyevent', code]);\n};\n\n/**\n * Send the particular text or a number to the device under test.\n * The text gets properly escaped before being passed to ADB.\n * Noop if the text is empty.\n *\n * @param {string|number} text - The actual text to be sent.\n * @throws {Error} If it is impossible to escape the given string\n */\nmethods.inputText = async function inputText (text) {\n  if (text === '') {\n    return;\n  }\n\n  const originalStr = `${text}`;\n  const escapedText = originalStr.replace(/\\$/g, '\\\\$').replace(/ /g, '%s');\n  let args = ['input', 'text', originalStr];\n  // https://stackoverflow.com/questions/25791423/adb-shell-input-text-does-not-take-ampersand-character/25791498\n  const adbInputEscapePattern = /[()<>|;&*\\\\~^\"']/g;\n  if (escapedText !== originalStr || adbInputEscapePattern.test(originalStr)) {\n    if (_.every(['\"', `'`], (c) => originalStr.includes(c))) {\n      throw new Error(\n        `Did not know how to escape a string that contains both types of quotes (\" and ')`\n      );\n    }\n    const q = originalStr.includes('\"') ? `'` : '\"';\n    args = [`input text ${q}${escapedText}${q}`];\n  }\n  await this.shell(args);\n};\n\n/**\n * Clear the active text field on the device under test by sending\n * special keyevents to it.\n *\n * @param {number} length [100] - The maximum length of the text in the field to be cleared.\n */\nmethods.clearTextField = async function clearTextField (length = 100) {\n  // assumes that the EditText field already has focus\n  log.debug(`Clearing up to ${length} characters`);\n  if (length === 0) {\n    return;\n  }\n  let args = ['input', 'keyevent'];\n  for (let i = 0; i < length; i++) {\n    // we cannot know where the cursor is in the text field, so delete both before\n    // and after so that we get rid of everything\n    // https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEL\n    // https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FORWARD_DEL\n    args.push('67', '112');\n  }\n  await this.shell(args);\n};\n\n/**\n * Send the special keycode to the device under test in order to lock it.\n */\nmethods.lock = async function lock () {\n  if (await this.isScreenLocked()) {\n    log.debug('Screen is already locked. Doing nothing.');\n    return;\n  }\n  log.debug('Pressing the KEYCODE_POWER button to lock screen');\n  await this.keyevent(26);\n\n  const timeoutMs = 5000;\n  try {\n    await waitForCondition(async () => await this.isScreenLocked(), {\n      waitMs: timeoutMs,\n      intervalMs: 500,\n    });\n  } catch (e) {\n    throw new Error(`The device screen is still locked after ${timeoutMs}ms timeout`);\n  }\n};\n\n/**\n * Send the special keycode to the device under test in order to emulate\n * Back button tap.\n */\nmethods.back = async function back () {\n  log.debug('Pressing the BACK button');\n  await this.keyevent(4);\n};\n\n/**\n * Send the special keycode to the device under test in order to emulate\n * Home button tap.\n */\nmethods.goToHome = async function goToHome () {\n  log.debug('Pressing the HOME button');\n  await this.keyevent(3);\n};\n\n/**\n * @return {string} the actual path to adb executable.\n */\nmethods.getAdbPath = function getAdbPath () {\n  return this.executable.path;\n};\n\n/**\n * Retrieve current screen orientation of the device under test.\n *\n * @return {number} The current orientation encoded as an integer number.\n */\nmethods.getScreenOrientation = async function getScreenOrientation () {\n  let stdout = await this.shell(['dumpsys', 'input']);\n  return getSurfaceOrientation(stdout);\n};\n\n/**\n * Send an arbitrary Telnet command to the device under test.\n *\n * @param {string} command - The command to be sent.\n *\n * @return {string} The actual output of the given command.\n */\nmethods.sendTelnetCommand = async function sendTelnetCommand (command) {\n  return await this.execEmuConsoleCommand(command, {port: await this.getEmulatorPort()});\n};\n\n/**\n * Check the state of Airplane mode on the device under test.\n *\n * @return {boolean} True if Airplane mode is enabled.\n */\nmethods.isAirplaneModeOn = async function isAirplaneModeOn () {\n  let stdout = await this.getSetting('global', 'airplane_mode_on');\n  return parseInt(stdout, 10) !== 0;\n};\n\n/**\n * Change the state of Airplane mode in Settings on the device under test.\n *\n * @param {boolean} on - True to enable the Airplane mode in Settings and false to disable it.\n */\nmethods.setAirplaneMode = async function setAirplaneMode (on) {\n  await this.setSetting('global', 'airplane_mode_on', on ? 1 : 0);\n};\n\n/**\n * Broadcast the state of Airplane mode on the device under test.\n * This method should be called after {@link #setAirplaneMode}, otherwise\n * the mode change is not going to be applied for the device.\n *\n * @param {boolean} on - True to broadcast enable and false to broadcast disable.\n */\nmethods.broadcastAirplaneMode = async function broadcastAirplaneMode (on) {\n  const args = [\n    'am', 'broadcast',\n    '-a', 'android.intent.action.AIRPLANE_MODE',\n    '--ez', 'state', on ? 'true' : 'false',\n  ];\n  try {\n    await this.shell(args);\n  } catch (e) {\n    // https://github.com/appium/appium/issues/17422\n    if (_.includes(e.stderr, 'SecurityException')) {\n      try {\n        await this.shell(args, {privileged: true});\n        return;\n      } catch (ign) {}\n    }\n    throw e;\n  }\n};\n\n/**\n * Check the state of WiFi on the device under test.\n *\n * @return {boolean} True if WiFi is enabled.\n */\nmethods.isWifiOn = async function isWifiOn () {\n  let stdout = await this.getSetting('global', 'wifi_on');\n  return (parseInt(stdout, 10) !== 0);\n};\n\n/**\n * Check the state of Data transfer on the device under test.\n *\n * @return {boolean} True if Data transfer is enabled.\n */\nmethods.isDataOn = async function isDataOn () {\n  let stdout = await this.getSetting('global', 'mobile_data');\n  return (parseInt(stdout, 10) !== 0);\n};\n\n/**\n * Change the state of WiFi and/or Data transfer on the device under test.\n *\n * @param {boolean} wifi - True to enable and false to disable WiFi.\n * @param {boolean} data - True to enable and false to disable Data transfer.\n * @param {boolean} isEmulator [false] - Set it to true if the device under test\n *                                       is an emulator rather than a real device.\n */\nmethods.setWifiAndData = async function setWifiAndData ({wifi, data}, isEmulator = false) {\n  if (util.hasValue(wifi)) {\n    await this.setWifiState(wifi, isEmulator);\n  }\n  if (util.hasValue(data)) {\n    await this.setDataState(data, isEmulator);\n  }\n};\n\n/**\n * Check the state of animation on the device under test.\n *\n * @return {boolean} True if at least one of animation scale settings\n *                   is not equal to '0.0'.\n */\nmethods.isAnimationOn = async function isAnimationOn () {\n  let animator_duration_scale = await this.getSetting('global', 'animator_duration_scale');\n  let transition_animation_scale = await this.getSetting('global', 'transition_animation_scale');\n  let window_animation_scale = await this.getSetting('global', 'window_animation_scale');\n  return _.some([animator_duration_scale, transition_animation_scale, window_animation_scale],\n                (setting) => setting !== '0.0');\n};\n\n/**\n * Forcefully recursively remove a path on the device under test.\n * Be careful while calling this method.\n *\n * @param {string} path - The path to be removed recursively.\n */\nmethods.rimraf = async function rimraf (path) {\n  await this.shell(['rm', '-rf', path]);\n};\n\n/**\n * Send a file to the device under test.\n *\n * @param {string} localPath - The path to the file on the local file system.\n * @param {string} remotePath - The destination path on the remote device.\n * @param {object} opts - Additional options mapping. See\n *                        https://github.com/appium/node-teen_process,\n *                        _exec_ method options, for more information about available\n *                        options.\n */\nmethods.push = async function push (localPath, remotePath, opts) {\n  await this.mkdir(path.posix.dirname(remotePath));\n  await this.adbExec(['push', localPath, remotePath], opts);\n};\n\n/**\n * Receive a file from the device under test.\n *\n * @param {string} remotePath - The source path on the remote device.\n * @param {string} localPath - The destination path to the file on the local file system.\n * @param {object} opts - Additional options mapping. See\n *                        https://github.com/appium/node-teen_process,\n *                        _exec_ method options, for more information about available\n *                        options.\n */\nmethods.pull = async function pull (remotePath, localPath, opts = {}) {\n  // pull folder can take more time, increasing time out to 60 secs\n  await this.adbExec(['pull', remotePath, localPath], {...opts, timeout: opts.timeout ?? 60000});\n};\n\n/**\n * Check whether the process with the particular name is running on the device\n * under test.\n *\n * @param {string} processName - The name of the process to be checked.\n * @return {boolean} True if the given process is running.\n * @throws {Error} If the given process name is not a valid class name.\n */\nmethods.processExists = async function processExists (processName) {\n  return !_.isEmpty(await this.getPIDsByName(processName));\n};\n\n/**\n * Get TCP port forwarding with adb on the device under test.\n * @return {Array.<String>} The output of the corresponding adb command. An array contains each forwarding line of output\n */\nmethods.getForwardList = async function getForwardList () {\n  log.debug(`List forwarding ports`);\n  const connections = await this.adbExec(['forward', '--list']);\n  return connections.split(EOL).filter((line) => Boolean(line.trim()));\n};\n\n/**\n * Setup TCP port forwarding with adb on the device under test.\n *\n * @param {string|number} systemPort - The number of the local system port.\n * @param {string|number} devicePort - The number of the remote device port.\n */\nmethods.forwardPort = async function forwardPort (systemPort, devicePort) {\n  log.debug(`Forwarding system: ${systemPort} to device: ${devicePort}`);\n  await this.adbExec(['forward', `tcp:${systemPort}`, `tcp:${devicePort}`]);\n};\n\n/**\n * Remove TCP port forwarding with adb on the device under test. The forwarding\n * for the given port should be setup with {@link #forwardPort} first.\n *\n * @param {string|number} systemPort - The number of the local system port\n *                                     to remove forwarding on.\n */\nmethods.removePortForward = async function removePortForward (systemPort) {\n  log.debug(`Removing forwarded port socket connection: ${systemPort} `);\n  await this.adbExec(['forward', `--remove`, `tcp:${systemPort}`]);\n};\n\n/**\n * Get TCP port forwarding with adb on the device under test.\n * @return {Array.<String>} The output of the corresponding adb command. An array contains each forwarding line of output\n */\nmethods.getReverseList = async function getReverseList () {\n  log.debug(`List reverse forwarding ports`);\n  const connections = await this.adbExec(['reverse', '--list']);\n  return connections.split(EOL).filter((line) => Boolean(line.trim()));\n};\n\n/**\n * Setup TCP port forwarding with adb on the device under test.\n * Only available for API 21+.\n *\n * @param {string|number} devicePort - The number of the remote device port.\n * @param {string|number} systemPort - The number of the local system port.\n */\nmethods.reversePort = async function reversePort (devicePort, systemPort) {\n  log.debug(`Forwarding device: ${devicePort} to system: ${systemPort}`);\n  await this.adbExec(['reverse', `tcp:${devicePort}`, `tcp:${systemPort}`]);\n};\n\n/**\n * Remove TCP port forwarding with adb on the device under test. The forwarding\n * for the given port should be setup with {@link #forwardPort} first.\n *\n * @param {string|number} devicePort - The number of the remote device port\n *                                     to remove forwarding on.\n */\nmethods.removePortReverse = async function removePortReverse (devicePort) {\n  log.debug(`Removing reverse forwarded port socket connection: ${devicePort} `);\n  await this.adbExec(['reverse', `--remove`, `tcp:${devicePort}`]);\n};\n\n/**\n * Setup TCP port forwarding with adb on the device under test. The difference\n * between {@link #forwardPort} is that this method does setup for an abstract\n * local port.\n *\n * @param {string|number} systemPort - The number of the local system port.\n * @param {string|number} devicePort - The number of the remote device port.\n */\nmethods.forwardAbstractPort = async function forwardAbstractPort (systemPort, devicePort) {\n  log.debug(`Forwarding system: ${systemPort} to abstract device: ${devicePort}`);\n  await this.adbExec(['forward', `tcp:${systemPort}`, `localabstract:${devicePort}`]);\n};\n\n/**\n * Execute ping shell command on the device under test.\n *\n * @return {boolean} True if the command output contains 'ping' substring.\n * @throws {error} If there was an error while executing 'ping' command on the\n *                 device under test.\n */\nmethods.ping = async function ping () {\n  let stdout = await this.shell(['echo', 'ping']);\n  if (stdout.indexOf('ping') === 0) {\n    return true;\n  }\n  throw new Error(`ADB ping failed, returned ${stdout}`);\n};\n\n/**\n * Restart the device under test using adb commands.\n *\n * @throws {error} If start fails.\n */\nmethods.restart = async function restart () {\n  try {\n    await this.stopLogcat();\n    await this.restartAdb();\n    await this.waitForDevice(60);\n    await this.startLogcat(this._logcatStartupParams);\n  } catch (e) {\n    throw new Error(`Restart failed. Original error: ${e.message}`);\n  }\n};\n\n/**\n * @typedef {Object} LogcatOpts\n * @property {string} format The log print format, where <format> is one of:\n *   brief process tag thread raw time threadtime long\n * `threadtime` is the default value.\n * @property {Array<string>} filterSpecs Series of <tag>[:priority]\n * where <tag> is a log component tag (or * for all) and priority is:\n *  V    Verbose\n *  D    Debug\n *  I    Info\n *  W    Warn\n *  E    Error\n *  F    Fatal\n *  S    Silent (supress all output)\n *\n * '*' means '*:d' and <tag> by itself means <tag>:v\n *\n * If not specified on the commandline, filterspec is set from ANDROID_LOG_TAGS.\n * If no filterspec is found, filter defaults to '*:I'\n */\n\n/**\n * Start the logcat process to gather logs.\n *\n * @param {?LogcatOpts} opts\n * @throws {Error} If restart fails.\n */\nmethods.startLogcat = async function startLogcat (opts = {}) {\n  if (!_.isEmpty(this.logcat)) {\n    throw new Error(\"Trying to start logcat capture but it's already started!\");\n  }\n\n  this.logcat = new Logcat({\n    adb: this.executable,\n    debug: false,\n    debugTrace: false,\n    clearDeviceLogsOnStart: !!this.clearDeviceLogsOnStart,\n  });\n  await this.logcat.startCapture(opts);\n  this._logcatStartupParams = opts;\n};\n\n/**\n * Stop the active logcat process which gathers logs.\n * The call will be ignored if no logcat process is running.\n */\nmethods.stopLogcat = async function stopLogcat () {\n  if (_.isEmpty(this.logcat)) {\n    return;\n  }\n  try {\n    await this.logcat.stopCapture();\n  } finally {\n    this.logcat = null;\n  }\n};\n\n/**\n * Retrieve the output from the currently running logcat process.\n * The logcat process should be executed by {2link #startLogcat} method.\n *\n * @return {string} The collected logcat output.\n * @throws {Error} If logcat process is not running.\n */\nmethods.getLogcatLogs = function getLogcatLogs () {\n  if (_.isEmpty(this.logcat)) {\n    throw new Error(\"Can't get logcat logs since logcat hasn't started\");\n  }\n  return this.logcat.getLogs();\n};\n\n/**\n * Set the callback for the logcat output event.\n *\n * @param {Function} listener - The listener function, which accepts one argument. The argument is\n *                              a log record object with `timestamp`, `level` and `message` properties.\n * @throws {Error} If logcat process is not running.\n */\nmethods.setLogcatListener = function setLogcatListener (listener) {\n  if (_.isEmpty(this.logcat)) {\n    throw new Error(\"Logcat process hasn't been started\");\n  }\n  this.logcat.on('output', listener);\n};\n\n/**\n * Removes the previously set callback for the logcat output event.\n *\n * @param {Function} listener - The listener function, which has been previously\n *                              passed to `setLogcatListener`\n * @throws {Error} If logcat process is not running.\n */\nmethods.removeLogcatListener = function removeLogcatListener (listener) {\n  if (_.isEmpty(this.logcat)) {\n    throw new Error(\"Logcat process hasn't been started\");\n  }\n  this.logcat.removeListener('output', listener);\n};\n\n/**\n * At some point of time Google has changed the default `ps` behaviour, so it only\n * lists processes that belong to the current shell user rather to all\n * users. It is necessary to execute ps with -A command line argument\n * to mimic the previous behaviour.\n *\n * @returns {string} the output of `ps` command where all processes are included\n */\nmethods.listProcessStatus = async function listProcessStatus () {\n  if (!_.isBoolean(this._doesPsSupportAOption)) {\n    try {\n      this._doesPsSupportAOption = /^-A\\b/m.test(await this.shell(['ps', '--help']));\n    } catch (e) {\n      log.debug(e.stack);\n      this._doesPsSupportAOption = false;\n    }\n  }\n  return await this.shell(this._doesPsSupportAOption ? ['ps', '-A'] : ['ps']);\n};\n\n/**\n * Returns process name for the given process identifier\n *\n * @param {string|number} pid - The valid process identifier\n * @throws {Error} If the given PID is either invalid or is not present\n * in the active processes list\n * @returns {string} The process name\n */\nmethods.getNameByPid = async function getNameByPid (pid) {\n  if (isNaN(pid)) {\n    throw new Error(`The PID value must be a valid number. '${pid}' is given instead`);\n  }\n  pid = parseInt(pid, 10);\n\n  const stdout = await this.listProcessStatus();\n  const titleMatch = PS_TITLE_PATTERN.exec(stdout);\n  if (!titleMatch) {\n    log.debug(stdout);\n    throw new Error(`Could not get the process name for PID '${pid}'`);\n  }\n  const allTitles = titleMatch[1].trim().split(/\\s+/);\n  const pidIndex = allTitles.indexOf(PID_COLUMN_TITLE);\n  // it might not be stable to take NAME by index, because depending on the\n  // actual SDK the ps output might not contain an abbreviation for the S flag:\n  // USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME\n  // USER     PID   PPID  VSIZE  RSS     WCHAN    PC   S    NAME\n  const nameOffset = allTitles.indexOf(PROCESS_NAME_COLUMN_TITLE) - allTitles.length;\n  const pidRegex = new RegExp(`^(.*\\\\b${pid}\\\\b.*)$`, 'gm');\n  let matchedLine;\n  while ((matchedLine = pidRegex.exec(stdout))) {\n    const items = matchedLine[1].trim().split(/\\s+/);\n    if (parseInt(items[pidIndex], 10) === pid && items[items.length + nameOffset]) {\n      return items[items.length + nameOffset];\n    }\n  }\n  log.debug(stdout);\n  throw new Error(`Could not get the process name for PID '${pid}'`);\n};\n\n/**\n * Get the list of process ids for the particular process on the device under test.\n *\n * @param {string} name - The part of process name.\n * @return {Array.<number>} The list of matched process IDs or an empty list.\n * @throws {Error} If the passed process name is not a valid one\n */\nmethods.getPIDsByName = async function getPIDsByName (name) {\n  log.debug(`Getting IDs of all '${name}' processes`);\n  if (!this.isValidClass(name)) {\n    throw new Error(`Invalid process name: '${name}'`);\n  }\n  // https://github.com/appium/appium/issues/13567\n  if (await this.getApiLevel() >= 23) {\n    if (!_.isBoolean(this._isPgrepAvailable)) {\n      // pgrep is in priority, since pidof has been reported of having bugs on some platforms\n      const pgrepOutput = _.trim(await this.shell(['pgrep --help; echo $?']));\n      this._isPgrepAvailable = parseInt(_.last(pgrepOutput.split(/\\s+/)), 10) === 0;\n      if (this._isPgrepAvailable) {\n        this._canPgrepUseFullCmdLineSearch = /^-f\\b/m.test(pgrepOutput);\n      } else {\n        this._isPidofAvailable = parseInt(await this.shell(['pidof --help > /dev/null; echo $?']), 10) === 0;\n      }\n    }\n    if (this._isPgrepAvailable || this._isPidofAvailable) {\n      const shellCommand = this._isPgrepAvailable\n        ? (this._canPgrepUseFullCmdLineSearch\n          ? ['pgrep', '-f', _.escapeRegExp(`([[:blank:]]|^)${name}([[:blank:]]|$)`)]\n          // https://github.com/appium/appium/issues/13872\n          : [`pgrep ^${_.escapeRegExp(name.slice(-MAX_PGREP_PATTERN_LEN))}$ ` +\n              `|| pgrep ^${_.escapeRegExp(name.slice(0, MAX_PGREP_PATTERN_LEN))}$`])\n        : ['pidof', name];\n      try {\n        return (await this.shell(shellCommand))\n          .split(/\\s+/)\n          .map((x) => parseInt(x, 10))\n          .filter((x) => _.isInteger(x));\n      } catch (e) {\n        // error code 1 is returned if the utility did not find any processes\n        // with the given name\n        if (e.code !== 1) {\n          throw new Error(`Could not extract process ID of '${name}': ${e.message}`);\n        }\n        if (_.includes(e.stderr || e.stdout, 'syntax error')) {\n          log.warn(`Got an unexpected response from the shell interpreter: ${e.stderr || e.stdout}`);\n        } else {\n          return [];\n        }\n      }\n    }\n  }\n\n  log.debug('Using ps-based PID detection');\n  const stdout = await this.listProcessStatus();\n  const titleMatch = PS_TITLE_PATTERN.exec(stdout);\n  if (!titleMatch) {\n    log.debug(stdout);\n    throw new Error(`Could not extract PID of '${name}' from ps output`);\n  }\n  const allTitles = titleMatch[1].trim().split(/\\s+/);\n  const pidIndex = allTitles.indexOf(PID_COLUMN_TITLE);\n  const pids = [];\n  const processNameRegex = new RegExp(`^(.*\\\\b\\\\d+\\\\b.*\\\\b${_.escapeRegExp(name)}\\\\b.*)$`, 'gm');\n  let matchedLine;\n  while ((matchedLine = processNameRegex.exec(stdout))) {\n    const items = matchedLine[1].trim().split(/\\s+/);\n    if (pidIndex >= allTitles.length || isNaN(items[pidIndex])) {\n      log.debug(stdout);\n      throw new Error(`Could not extract PID of '${name}' from '${matchedLine[1].trim()}'`);\n    }\n    pids.push(parseInt(items[pidIndex], 10));\n  }\n  return pids;\n};\n\n/**\n * Get the list of process ids for the particular process on the device under test.\n *\n * @param {string} name - The part of process name.\n * @return {Array.<number>} The list of matched process IDs or an empty list.\n */\nmethods.killProcessesByName = async function killProcessesByName (name) {\n  try {\n    log.debug(`Attempting to kill all ${name} processes`);\n    const pids = await this.getPIDsByName(name);\n    if (_.isEmpty(pids)) {\n      log.info(`No '${name}' process has been found`);\n    } else {\n      await B.all(pids.map((p) => this.killProcessByPID(p)));\n    }\n  } catch (e) {\n    throw new Error(`Unable to kill ${name} processes. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Kill the particular process on the device under test.\n * The current user is automatically switched to root if necessary in order\n * to properly kill the process.\n *\n * @param {string|number} pid - The ID of the process to be killed.\n * @throws {Error} If the process cannot be killed.\n */\nmethods.killProcessByPID = async function killProcessByPID (pid) {\n  log.debug(`Attempting to kill process ${pid}`);\n  const noProcessFlag = 'No such process';\n  try {\n    // Check if the process exists and throw an exception otherwise\n    await this.shell(['kill', pid]);\n  } catch (e) {\n    if (_.includes(e.stderr, noProcessFlag)) {\n      return;\n    }\n    if (!_.includes(e.stderr, 'Operation not permitted')) {\n      throw e;\n    }\n    log.info(`Cannot kill PID ${pid} due to insufficient permissions. Retrying as root`);\n    try {\n      await this.shell(['kill', pid], {\n        privileged: true\n      });\n    } catch (e1) {\n      if (_.includes(e1.stderr, noProcessFlag)) {\n        return;\n      }\n      throw e1;\n    }\n  }\n};\n\n/**\n * Broadcast process killing on the device under test.\n *\n * @param {string} intent - The name of the intent to broadcast to.\n * @param {string} processName - The name of the killed process.\n * @throws {error} If the process was not killed.\n */\nmethods.broadcastProcessEnd = async function broadcastProcessEnd (intent, processName) {\n  // start the broadcast without waiting for it to finish.\n  this.broadcast(intent);\n  // wait for the process to end\n  let start = Date.now();\n  let timeoutMs = 40000;\n  try {\n    while ((Date.now() - start) < timeoutMs) {\n      if (await this.processExists(processName)) {\n        // cool down\n        await sleep(400);\n        continue;\n      }\n      return;\n    }\n    throw new Error(`Process never died within ${timeoutMs} ms`);\n  } catch (e) {\n    throw new Error(`Unable to broadcast process end. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Broadcast a message to the given intent.\n *\n * @param {string} intent - The name of the intent to broadcast to.\n * @throws {error} If intent name is not a valid class name.\n */\nmethods.broadcast = async function broadcast (intent) {\n  if (!this.isValidClass(intent)) {\n    throw new Error(`Invalid intent ${intent}`);\n  }\n  log.debug(`Broadcasting: ${intent}`);\n  await this.shell(['am', 'broadcast', '-a', intent]);\n};\n\n/**\n * Kill Android instruments if they are currently running.\n */\nmethods.endAndroidCoverage = async function endAndroidCoverage () {\n  if (this.instrumentProc && this.instrumentProc.isRunning) {\n    await this.instrumentProc.stop();\n  }\n};\n\n/**\n * Instrument the particular activity.\n *\n * @param {string} pkg - The name of the package to be instrumented.\n * @param {string} activity - The name of the main activity in this package.\n * @param {string} instrumentWith - The name of the package to instrument\n *                                  the activity with.\n * @throws {error} If any exception is reported by adb shell.\n */\nmethods.instrument = async function instrument (pkg, activity, instrumentWith) {\n  if (activity[0] !== '.') {\n    pkg = '';\n  }\n  let pkgActivity = (pkg + activity).replace(/\\.+/g, '.'); // Fix pkg..activity error\n  let stdout = await this.shell([\n    'am', 'instrument',\n    '-e', 'main_activity',\n    pkgActivity,\n    instrumentWith,\n  ]);\n  if (stdout.indexOf('Exception') !== -1) {\n    throw new Error(`Unknown exception during instrumentation. Original error ${stdout.split('\\n')[0]}`);\n  }\n};\n\n/**\n * Collect Android coverage by instrumenting the particular activity.\n *\n * @param {string} instrumentClass - The name of the instrumentation class.\n * @param {string} waitPkg - The name of the package to be instrumented.\n * @param {string} waitActivity - The name of the main activity in this package.\n *\n * @return {promise} The promise is successfully resolved if the instrumentation starts\n *                   without errors.\n */\nmethods.androidCoverage = async function androidCoverage (instrumentClass, waitPkg, waitActivity) {\n  if (!this.isValidClass(instrumentClass)) {\n    throw new Error(`Invalid class ${instrumentClass}`);\n  }\n  return await new B(async (resolve, reject) => {\n    let args = this.executable.defaultArgs\n      .concat(['shell', 'am', 'instrument', '-e', 'coverage', 'true', '-w'])\n      .concat([instrumentClass]);\n    log.debug(`Collecting coverage data with: ${[this.executable.path].concat(args).join(' ')}`);\n    try {\n      // am instrument runs for the life of the app process.\n      this.instrumentProc = new SubProcess(this.executable.path, args);\n      await this.instrumentProc.start(0);\n      this.instrumentProc.on('output', (stdout, stderr) => {\n        if (stderr) {\n          reject(new Error(`Failed to run instrumentation. Original error: ${stderr}`));\n        }\n      });\n      await this.waitForActivity(waitPkg, waitActivity);\n      resolve();\n    } catch (e) {\n      reject(new Error(`Android coverage failed. Original error: ${e.message}`));\n    }\n  });\n};\n\n/**\n * Get the particular property of the device under test.\n *\n * @param {string} property - The name of the property. This name should\n *                            be known to _adb shell getprop_ tool.\n *\n * @return {string} The value of the given property.\n */\nmethods.getDeviceProperty = async function getDeviceProperty (property) {\n  let stdout = await this.shell(['getprop', property]);\n  let val = stdout.trim();\n  log.debug(`Current device property '${property}': ${val}`);\n  return val;\n};\n\n/**\n * @typedef {object} setPropOpts\n * @property {boolean} privileged - Do we run setProp as a privileged command? Default true.\n */\n\n/**\n * Set the particular property of the device under test.\n *\n * @param {string} property - The name of the property. This name should\n *                            be known to _adb shell setprop_ tool.\n * @param {string} val - The new property value.\n * @param {setPropOpts} opts\n *\n * @throws {error} If _setprop_ utility fails to change property value.\n */\nmethods.setDeviceProperty = async function setDeviceProperty (prop, val, opts = {}) {\n  const {privileged = true} = opts;\n  log.debug(`Setting device property '${prop}' to '${val}'`);\n  await this.shell(['setprop', prop, val], {\n    privileged,\n  });\n};\n\n/**\n * @return {string} Current system language on the device under test.\n */\nmethods.getDeviceSysLanguage = async function getDeviceSysLanguage () {\n  return await this.getDeviceProperty('persist.sys.language');\n};\n\n/**\n * @return {string} Current country name on the device under test.\n */\nmethods.getDeviceSysCountry = async function getDeviceSysCountry () {\n  return await this.getDeviceProperty('persist.sys.country');\n};\n\n/**\n * @return {string} Current system locale name on the device under test.\n */\nmethods.getDeviceSysLocale = async function getDeviceSysLocale () {\n  return await this.getDeviceProperty('persist.sys.locale');\n};\n\n/**\n * @return {string} Current product language name on the device under test.\n */\nmethods.getDeviceProductLanguage = async function getDeviceProductLanguage () {\n  return await this.getDeviceProperty('ro.product.locale.language');\n};\n\n/**\n * @return {string} Current product country name on the device under test.\n */\nmethods.getDeviceProductCountry = async function getDeviceProductCountry () {\n  return await this.getDeviceProperty('ro.product.locale.region');\n};\n\n/**\n * @return {string} Current product locale name on the device under test.\n */\nmethods.getDeviceProductLocale = async function getDeviceProductLocale () {\n  return await this.getDeviceProperty('ro.product.locale');\n};\n\n/**\n * @return {string} The model name of the device under test.\n */\nmethods.getModel = async function getModel () {\n  return await this.getDeviceProperty('ro.product.model');\n};\n\n/**\n * @return {string} The manufacturer name of the device under test.\n */\nmethods.getManufacturer = async function getManufacturer () {\n  return await this.getDeviceProperty('ro.product.manufacturer');\n};\n\n/**\n * Get the current screen size.\n *\n * @return {string} Device screen size as string in format 'WxH' or\n *                  _null_ if it cannot be determined.\n */\nmethods.getScreenSize = async function getScreenSize () {\n  let stdout = await this.shell(['wm', 'size']);\n  let size = new RegExp(/Physical size: ([^\\r?\\n]+)*/g).exec(stdout);\n  if (size && size.length >= 2) {\n    return size[1].trim();\n  }\n  return null;\n};\n\n/**\n * Get the current screen density in dpi\n *\n * @return {?number} Device screen density as a number or _null_ if it\n *                  cannot be determined\n */\nmethods.getScreenDensity = async function getScreenDensity () {\n  let stdout = await this.shell(['wm', 'density']);\n  let density = new RegExp(/Physical density: ([^\\r?\\n]+)*/g).exec(stdout);\n  if (density && density.length >= 2) {\n    let densityNumber = parseInt(density[1].trim(), 10);\n    return isNaN(densityNumber) ? null : densityNumber;\n  }\n  return null;\n};\n\n/**\n * Setup HTTP proxy in device global settings.\n * Read https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r21/core/java/android/provider/Settings.java for each property\n *\n * @param {string} proxyHost - The host name of the proxy.\n * @param {string|number} proxyPort - The port number to be set.\n */\nmethods.setHttpProxy = async function setHttpProxy (proxyHost, proxyPort) {\n  let proxy = `${proxyHost}:${proxyPort}`;\n  if (_.isUndefined(proxyHost)) {\n    throw new Error(`Call to setHttpProxy method with undefined proxy_host: ${proxy}`);\n  }\n  if (_.isUndefined(proxyPort)) {\n    throw new Error(`Call to setHttpProxy method with undefined proxy_port ${proxy}`);\n  }\n\n  const httpProxySettins = [\n    ['http_proxy', proxy],\n    ['global_http_proxy_host', proxyHost],\n    ['global_http_proxy_port', proxyPort]\n  ];\n  for (const [settingKey, settingValue] of httpProxySettins) {\n    await this.setSetting('global', settingKey, settingValue);\n  }\n};\n\n/**\n * Delete HTTP proxy in device global settings.\n * Rebooting the test device is necessary to apply the change.\n */\nmethods.deleteHttpProxy = async function deleteHttpProxy () {\n  const httpProxySettins = [\n    'http_proxy',\n    'global_http_proxy_host',\n    'global_http_proxy_port',\n    'global_http_proxy_exclusion_list' // `global_http_proxy_exclusion_list=` was generated by `settings global htto_proxy xxxx`\n  ];\n  for (const setting of httpProxySettins) {\n    await this.shell(['settings', 'delete', 'global', setting]);\n  }\n};\n\n/**\n * Set device property.\n * [android.provider.Settings]{@link https://developer.android.com/reference/android/provider/Settings.html}\n *\n * @param {string} namespace - one of {system, secure, global}, case-insensitive.\n * @param {string} setting - property name.\n * @param {string|number} value - property value.\n * @return {string} command output.\n */\nmethods.setSetting = async function setSetting (namespace, setting, value) {\n  return await this.shell(['settings', 'put', namespace, setting, value]);\n};\n\n/**\n * Get device property.\n * [android.provider.Settings]{@link https://developer.android.com/reference/android/provider/Settings.html}\n *\n * @param {string} namespace - one of {system, secure, global}, case-insensitive.\n * @param {string} setting - property name.\n * @return {string} property value.\n */\nmethods.getSetting = async function getSetting (namespace, setting) {\n  return await this.shell(['settings', 'get', namespace, setting]);\n};\n\n/**\n * Retrieve the `adb bugreport` command output. This\n * operation may take up to several minutes.\n *\n * @param {?number} timeout [120000] - Command timeout in milliseconds\n * @returns {string} Command stdout\n */\nmethods.bugreport = async function bugreport (timeout = 120000) {\n  return await this.adbExec(['bugreport'], {timeout});\n};\n\n/**\n * @typedef {Object} ScreenrecordOptions\n * @property {?string} videoSize - The format is widthxheight.\n *                  The default value is the device's native display resolution (if supported),\n *                  1280x720 if not. For best results,\n *                  use a size supported by your device's Advanced Video Coding (AVC) encoder.\n *                  For example, \"1280x720\"\n * @property {?boolean} bugReport - Set it to `true` in order to display additional information on the video overlay,\n *                                  such as a timestamp, that is helpful in videos captured to illustrate bugs.\n *                                  This option is only supported since API level 27 (Android P).\n * @property {?string|number} timeLimit - The maximum recording time, in seconds.\n *                                        The default (and maximum) value is 180 (3 minutes).\n * @property {?string|number} bitRate - The video bit rate for the video, in megabits per second.\n *                The default value is 4. You can increase the bit rate to improve video quality,\n *                but doing so results in larger movie files.\n */\n\n/**\n * Initiate screenrecord utility on the device\n *\n * @param {string} destination - Full path to the writable media file destination\n *                               on the device file system.\n * @param {?ScreenrecordOptions} options [{}]\n * @returns {SubProcess} screenrecord process, which can be then controlled by the client code\n */\nmethods.screenrecord = function screenrecord (destination, options = {}) {\n  const cmd = ['screenrecord'];\n  const {\n    videoSize,\n    bitRate,\n    timeLimit,\n    bugReport,\n  } = options;\n  if (util.hasValue(videoSize)) {\n    cmd.push('--size', videoSize);\n  }\n  if (util.hasValue(timeLimit)) {\n    cmd.push('--time-limit', timeLimit);\n  }\n  if (util.hasValue(bitRate)) {\n    cmd.push('--bit-rate', bitRate);\n  }\n  if (bugReport) {\n    cmd.push('--bugreport');\n  }\n  cmd.push(destination);\n\n  const fullCmd = [\n    ...this.executable.defaultArgs,\n    'shell',\n    ...cmd\n  ];\n  log.debug(`Building screenrecord process with the command line: adb ${util.quote(fullCmd)}`);\n  return new SubProcess(this.executable.path, fullCmd);\n};\n\n/**\n * Executes the given function with the given input method context\n * and then restores the IME to the original value\n *\n * @param {string} ime - Valid IME identifier\n * @param {Function} fn - Function to execute\n * @returns {*} The result of the given function\n */\nmethods.runInImeContext = async function runInImeContext (ime, fn) {\n  const originalIme = await this.defaultIME();\n  if (originalIme === ime) {\n    log.debug(`The original IME is the same as '${ime}'. There is no need to reset it`);\n  } else {\n    await this.enableIME(ime);\n    await this.setIME(ime);\n    // https://github.com/appium/appium/issues/15943\n    await B.delay(500);\n  }\n  try {\n    return await fn();\n  } finally {\n    if (originalIme !== ime) {\n      await this.setIME(originalIme);\n    }\n  }\n};\n\n/**\n * Get tz database time zone formatted timezone\n *\n * @returns {string} TZ database Time Zones format\n *\n * @throws {error} If any exception is reported by adb shell.\n */\nmethods.getTimeZone = async function getTimeZone () {\n  log.debug('Getting current timezone');\n  try {\n    return await this.getDeviceProperty('persist.sys.timezone');\n  } catch (e) {\n    throw new Error(`Error getting timezone. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Retrieves the list of features supported by the device under test\n *\n * @returns {Array<string>} the list of supported feature names or an empty list.\n * An example adb command output:\n * ```\n * cmd\n * ls_v2\n * fixed_push_mkdir\n * shell_v2\n * abb\n * stat_v2\n * apex\n * abb_exec\n * remount_shell\n * fixed_push_symlink_timestamp\n * ```\n * @throws {Error} if there was an error while retrieving the list\n */\nmethods.listFeatures = async function listFeatures () {\n  this._memoizedFeatures = this._memoizedFeatures\n    || _.memoize(async () => await this.adbExec(['features']), () => this.curDeviceId);\n  try {\n    return (await this._memoizedFeatures())\n      .split(/\\s+/)\n      .map((x) => x.trim())\n      .filter(Boolean);\n  } catch (e) {\n    if (_.includes(e.stderr, 'unknown command')) {\n      return [];\n    }\n    throw e;\n  }\n};\n\n/**\n * Checks the state of streamed install feature.\n * This feature allows to speed up apk installation\n * since it does not require the original apk to be pushed to\n * the device under test first, which also saves space.\n * Although, it is required that both the device under test\n * and the adb server have the mentioned functionality.\n * See https://github.com/aosp-mirror/platform_system_core/blob/master/adb/client/adb_install.cpp\n * for more details\n *\n * @returns {boolean} `true` if the feature is supported by both adb and the\n * device under test\n */\nmethods.isStreamedInstallSupported = async function isStreamedInstallSupported () {\n  const proto = Object.getPrototypeOf(this);\n  proto._helpOutput = proto._helpOutput || await this.adbExec(['help']);\n  return proto._helpOutput.includes('--streaming')\n    && (await this.listFeatures()).includes('cmd');\n};\n\n/**\n * Checks whether incremental install feature is supported by ADB.\n * Read https://developer.android.com/preview/features#incremental\n * for more details on it.\n *\n * @returns {boolean} `true` if the feature is supported by both adb and the\n * device under test\n */\nmethods.isIncrementalInstallSupported = async function isIncrementalInstallSupported () {\n  const {binary} = await this.getVersion();\n  if (!binary) {\n    return false;\n  }\n  return util.compareVersions(binary.version, '>=', '30.0.1')\n    && (await this.listFeatures()).includes('abb_exec');\n};\n\n/**\n * Retrieves the list of packages from Doze whitelist on Android 8+\n *\n * @returns {Array<string>} The list of whitelisted packages. An example output:\n * system,com.android.shell,2000\n * system,com.google.android.cellbroadcastreceiver,10143\n * user,io.appium.settings,10157\n */\nmethods.getDeviceIdleWhitelist = async function getDeviceIdleWhitelist () {\n  if (await this.getApiLevel() < 23) {\n    // Doze mode has only been added since Android 6\n    return [];\n  }\n\n  log.info('Listing packages in Doze whitelist');\n  const output = await this.shell(['dumpsys', 'deviceidle', 'whitelist']);\n  return _.trim(output).split(/\\n/)\n    .map((line) => _.trim(line))\n    .filter(Boolean);\n};\n\n/**\n * Adds an existing package(s) into the Doze whitelist on Android 8+\n *\n * @param  {...string} packages One or more packages to add. If the package\n * already exists in the whitelist then it is only going to be added once.\n * If the package with the given name is not installed/not known then an error\n * will be thrown.\n * @returns {Boolean} `true` if the command to add package(s) has been executed\n */\nmethods.addToDeviceIdleWhitelist = async function addToDeviceIdleWhitelist (...packages) {\n  if (_.isEmpty(packages) || await this.getApiLevel() < 23) {\n    // Doze mode has only been added since Android 6\n    return false;\n  }\n\n  log.info(`Adding ${util.pluralize('package', packages.length)} ${JSON.stringify(packages)} to Doze whitelist`);\n  await this.shellChunks((pkg) => ['dumpsys', 'deviceidle', 'whitelist', `+${pkg}`], packages);\n  return true;\n};\n\nexport default methods;\n"],"mappings":"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"}