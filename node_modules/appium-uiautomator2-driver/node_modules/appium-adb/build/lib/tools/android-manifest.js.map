{"version":3,"file":"android-manifest.js","names":["manifestMethods","packageAndLaunchActivityFromManifest","appPath","endsWith","APKS_EXTENSION","extractBaseApk","manifest","apkReader","ApkReader","open","readManifest","e","log","debug","Error","pkg","activity","parseManifest","info","apkPackage","apkActivity","targetSdkVersionFromManifest","originalAppPath","getTargetSdkViaApkReader","usesSdk","_","isInteger","targetSdkVersion","getTargetSdkViaAapt","initAapt","args","stdout","exec","binaries","aapt","parseInt","versionGetters","toolName","versionGetter","message","JSON","stringify","map","pair","targetSdkVersionUsingPKG","cmdOutput","shell","RegExp","length","compileManifest","manifestPackage","targetPackage","platform","platformPath","getAndroidPlatformAndPath","sdkRoot","resultPath","androidJarPath","path","resolve","fs","exists","rimraf","initAapt2","util","quote","aapt2","stderr","e1","insertManifest","srcApk","dstApk","zip","assertValidZip","unzipFile","manifestName","basename","copyFile","ign","cwd","dirname","tmpRoot","tempDir","openDir","extractAllTo","mv","toArchive","hasInternetPermissionFromManifest","usesPermissions","some","name"],"sources":["../../../lib/tools/android-manifest.js"],"sourcesContent":["import { exec } from 'teen_process';\nimport log from '../logger.js';\nimport {\n  getAndroidPlatformAndPath, unzipFile,\n  APKS_EXTENSION, parseManifest } from '../helpers.js';\nimport { fs, zip, tempDir, util } from '@appium/support';\nimport _ from 'lodash';\nimport path from 'path';\nimport ApkReader from 'adbkit-apkreader';\n\nlet manifestMethods = {};\n\n/**\n * @typedef {Object} APKInfo\n * @property {string} apkPackage - The name of application package, for example 'com.acme.app'.\n * @property {string} apkActivity - The name of main application activity.\n */\n\n/**\n * Extract package and main activity name from application manifest.\n *\n * @param {string} appPath - The full path to application .apk(s) package\n * @return {APKInfo} The parsed application info.\n * @throws {error} If there was an error while getting the data from the given\n *                 application package.\n */\nmanifestMethods.packageAndLaunchActivityFromManifest = async function packageAndLaunchActivityFromManifest (appPath) {\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  let manifest;\n  try {\n    const apkReader = await ApkReader.open(appPath);\n    manifest = await apkReader.readManifest();\n  } catch (e) {\n    log.debug(e);\n    throw new Error(`Cannot extract a manifest from '${appPath}'. ` +\n      `Is it a valid Android application?`);\n  }\n  const {pkg, activity} = parseManifest(manifest);\n  log.info(`Package name: '${pkg}'`);\n  log.info(`Main activity name: '${activity}'`);\n  return {\n    apkPackage: pkg,\n    apkActivity: activity,\n  };\n};\n\n/**\n * Extract target SDK version from application manifest.\n *\n * @param {string} appPath - The full path to .apk(s) package.\n * @return {number} The version of the target SDK.\n * @throws {error} If there was an error while getting the data from the given\n *                 application package.\n */\nmanifestMethods.targetSdkVersionFromManifest = async function targetSdkVersionFromManifest (appPath) {\n  log.debug(`Extracting target SDK version of '${appPath}'`);\n  const originalAppPath = appPath;\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  const getTargetSdkViaApkReader = async () => {\n    const apkReader = await ApkReader.open(appPath);\n    const manifest = await apkReader.readManifest();\n    if (manifest.usesSdk && _.isInteger(manifest.usesSdk.targetSdkVersion)) {\n      return manifest.usesSdk.targetSdkVersion;\n    }\n    throw new Error('Cannot find the information about targetSdkVersion in the manifest');\n  };\n  const getTargetSdkViaAapt = async () => {\n    await this.initAapt();\n    const args = ['dump', 'badging', appPath];\n    const {stdout} = await exec(this.binaries.aapt, args);\n    const targetSdkVersion = /targetSdkVersion:'([^']+)'/g.exec(stdout);\n    if (!targetSdkVersion) {\n      log.debug(stdout);\n      throw new Error('Cannot parse the command output');\n    }\n    return parseInt(targetSdkVersion[1], 10);\n  };\n  const versionGetters = [\n    ['ApkReader', getTargetSdkViaApkReader],\n    ['aapt', getTargetSdkViaAapt],\n  ];\n  for (const [toolName, versionGetter] of versionGetters) {\n    try {\n      return await versionGetter();\n    } catch (e) {\n      log.info(`Cannot extract targetSdkVersion of '${originalAppPath}' using ${toolName}. ` +\n        `Original error: ${e.message}`);\n    }\n  }\n  throw new Error(`Cannot extract the target SDK version number of '${originalAppPath}' using either of ` +\n    `${JSON.stringify(versionGetters.map((pair) => pair[0]))} tools. ` +\n    `Check the server log for more details`);\n};\n\n/**\n * Extract target SDK version from package information.\n *\n * @param {string} pkg - The class name of the package installed on the device under test.\n * @param {?string} cmdOutput - Optional parameter containing the output of\n *                              _dumpsys package_ command. It may speed up the method execution.\n * @return {number} The version of the target SDK.\n */\nmanifestMethods.targetSdkVersionUsingPKG = async function targetSdkVersionUsingPKG (pkg, cmdOutput = null) {\n  let stdout = cmdOutput || await this.shell(['dumpsys', 'package', pkg]);\n  let targetSdkVersion = new RegExp(/targetSdk=([^\\s\\s]+)/g).exec(stdout);\n  if (targetSdkVersion && targetSdkVersion.length >= 2) {\n    targetSdkVersion = targetSdkVersion[1];\n  } else {\n    // targetSdk not found in the dump, assigning 0 to targetSdkVersion\n    targetSdkVersion = 0;\n  }\n  return parseInt(targetSdkVersion, 10);\n};\n\n/**\n * Create binary representation of package manifest (usually AndroidManifest.xml).\n * `${manifest}.apk` file will be created as the result of this method\n * containing the compiled manifest.\n *\n * @param {string} manifest - Full path to the initial manifest template\n * @param {string} manifestPackage - The name of the manifest package\n * @param {string} targetPackage - The name of the destination package\n */\nmanifestMethods.compileManifest = async function compileManifest (manifest, manifestPackage, targetPackage) {\n  const {platform, platformPath} = await getAndroidPlatformAndPath(this.sdkRoot);\n  if (!platform) {\n    throw new Error('Cannot compile the manifest. The required platform does not exist (API level >= 17)');\n  }\n  const resultPath = `${manifest}.apk`;\n  const androidJarPath = path.resolve(platformPath, 'android.jar');\n  if (await fs.exists(resultPath)) {\n    await fs.rimraf(resultPath);\n  }\n  try {\n    await this.initAapt2();\n    // https://developer.android.com/studio/command-line/aapt2\n    const args = [\n      'link',\n      '-o', resultPath,\n      '--manifest', manifest,\n      '--rename-manifest-package', manifestPackage,\n      '--rename-instrumentation-target-package', targetPackage,\n      '-I', androidJarPath,\n      '-v',\n    ];\n    log.debug(`Compiling the manifest using '${util.quote([this.binaries.aapt2, ...args])}'`);\n    await exec(this.binaries.aapt2, args);\n  } catch (e) {\n    log.debug('Cannot compile the manifest using aapt2. Defaulting to aapt. ' +\n      `Original error: ${e.stderr || e.message}`);\n    await this.initAapt();\n    const args = [\n      'package',\n      '-M', manifest,\n      '--rename-manifest-package', manifestPackage,\n      '--rename-instrumentation-target-package', targetPackage,\n      '-I', androidJarPath,\n      '-F', resultPath,\n      '-f',\n    ];\n    log.debug(`Compiling the manifest using '${util.quote([this.binaries.aapt, ...args])}'`);\n    try {\n      await exec(this.binaries.aapt, args);\n    } catch (e1) {\n      throw new Error(`Cannot compile the manifest. Original error: ${e1.stderr || e1.message}`);\n    }\n  }\n  log.debug(`Compiled the manifest at '${resultPath}'`);\n};\n\n/**\n * Replace/insert the specially precompiled manifest file into the\n * particular package.\n *\n * @param {string} manifest - Full path to the precompiled manifest\n *                            created by `compileManifest` method call\n *                            without .apk extension\n * @param {string} srcApk - Full path to the existing valid application package, where\n *                          this manifest has to be insetred to. This package\n *                          will NOT be modified.\n * @param {string} dstApk - Full path to the resulting package.\n *                          The file will be overridden if it already exists.\n */\nmanifestMethods.insertManifest = async function insertManifest (manifest, srcApk, dstApk) {\n  log.debug(`Inserting manifest '${manifest}', src: '${srcApk}', dst: '${dstApk}'`);\n  await zip.assertValidZip(srcApk);\n  await unzipFile(`${manifest}.apk`);\n  const manifestName = path.basename(manifest);\n  try {\n    await this.initAapt();\n    await fs.copyFile(srcApk, dstApk);\n    log.debug('Moving manifest');\n    try {\n      await exec(this.binaries.aapt, [\n        'remove', dstApk, manifestName\n      ]);\n    } catch (ign) {}\n    await exec(this.binaries.aapt, [\n      'add', dstApk, manifestName\n    ], {cwd: path.dirname(manifest)});\n  } catch (e) {\n    log.debug('Cannot insert manifest using aapt. Defaulting to zip. ' +\n      `Original error: ${e.stderr || e.message}`);\n    const tmpRoot = await tempDir.openDir();\n    try {\n      // Unfortunately NodeJS does not provide any reliable methods\n      // to replace files inside zip archives without loading the\n      // whole archive content into RAM\n      log.debug(`Extracting the source apk at '${srcApk}'`);\n      await zip.extractAllTo(srcApk, tmpRoot);\n      log.debug('Moving manifest');\n      await fs.mv(manifest, path.resolve(tmpRoot, manifestName));\n      log.debug(`Collecting the destination apk at '${dstApk}'`);\n      await zip.toArchive(dstApk, {\n        cwd: tmpRoot,\n      });\n    } finally {\n      await fs.rimraf(tmpRoot);\n    }\n  }\n  log.debug(`Manifest insertion into '${dstApk}' is completed`);\n};\n\n/**\n * Check whether package manifest contains Internet permissions.\n *\n * @param {string} appPath - The full path to .apk(s) package.\n * @return {boolean} True if the manifest requires Internet access permission.\n */\nmanifestMethods.hasInternetPermissionFromManifest = async function hasInternetPermissionFromManifest (appPath) {\n  log.debug(`Checking if '${appPath}' requires internet access permission in the manifest`);\n  if (appPath.endsWith(APKS_EXTENSION)) {\n    appPath = await this.extractBaseApk(appPath);\n  }\n\n  const apkReader = await ApkReader.open(appPath);\n  const manifest = await apkReader.readManifest();\n  return (manifest.usesPermissions || []).some(({name}) => name === 'android.permission.INTERNET');\n};\n\nexport default manifestMethods;\n"],"mappings":"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"}